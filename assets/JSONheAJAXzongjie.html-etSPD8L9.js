import{_ as p,r as o,o as c,c as l,a as i,b as n,e as t,d as s,f as e}from"./app-GYMnAgnr.js";const u={},r=n("h2",{id:"json-简介",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#json-简介","aria-hidden":"true"},"#"),s(" JSON 简介")],-1),d=n("li",null,[n("p",null,[s("JSON JavaScript 对象表示法（"),n("strong",null,"J"),s("ava"),n("strong",null,"S"),s("cript "),n("strong",null,"O"),s("bject "),n("strong",null,"N"),s("otation） 是一种存储数据的方式。")])],-1),k={href:"http://www.json.org/json-zh.html",target:"_blank",rel:"noopener noreferrer"},v=n("strong",null,"JSON官方文档",-1),g={href:"http://www.baidu.com/link?url=PBcR_52qwPshS34XW9dLsgs3xgpA06G3tkRB4YqzYF3",target:"_blank",rel:"noopener noreferrer"},m=n("strong",null,"JSON在线解析及格式化验证",-1),h=e(`<h2 id="关于-json-对象" tabindex="-1"><a class="header-anchor" href="#关于-json-对象" aria-hidden="true">#</a> 关于 JSON 对象</h2><ul><li><p>JSON对象由 <strong>名称 / 值 对</strong> 组成</p></li><li><p>名称和值之间用冒号 <strong>:</strong> 隔开</p></li><li><p>名称必须用 <strong>双引号 &quot;</strong> 包含起来</p></li><li><p>值可以是任意 javascript 数据类型，字符串，布尔，数字 ，数组甚至是对象</p></li><li><p>不同的 <strong>名称/值 对</strong> 之间用 逗号 <strong>,</strong> 隔开</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>var gareen = <span class="token punctuation">{</span>
      <span class="token property">&quot;name&quot;</span><span class="token operator">:</span><span class="token string">&quot;Micheal&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;age&quot;</span><span class="token operator">:</span><span class="token number">19</span><span class="token punctuation">,</span>
      <span class="token property">&quot;sex&quot;</span><span class="token operator">:</span><span class="token string">&quot;男&quot;</span>
<span class="token punctuation">}</span>;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>通过 <strong>点.</strong> 访问 JSON 对象的属性</p></li></ul><h2 id="json-的作用" tabindex="-1"><a class="header-anchor" href="#json-的作用" aria-hidden="true">#</a> JSON 的作用</h2><p>由于其语法格式简单，层次结构鲜明，现多用于作为 <strong>数据载体</strong>，在网络中进行数据传输。</p><h2 id="json-数组" tabindex="-1"><a class="header-anchor" href="#json-数组" aria-hidden="true">#</a> JSON 数组</h2><ul><li><p>通过方括号[] 创建JSON 数组</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>var heros=
<span class="token punctuation">[</span>
    <span class="token punctuation">{</span><span class="token property">&quot;name&quot;</span><span class="token operator">:</span><span class="token string">&quot;盖伦&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;hp&quot;</span><span class="token operator">:</span><span class="token number">616</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token property">&quot;name&quot;</span><span class="token operator">:</span><span class="token string">&quot;提莫&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;hp&quot;</span><span class="token operator">:</span><span class="token number">313</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token property">&quot;name&quot;</span><span class="token operator">:</span><span class="token string">&quot;死歌&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;hp&quot;</span><span class="token operator">:</span><span class="token number">432</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token property">&quot;name&quot;</span><span class="token operator">:</span><span class="token string">&quot;火女&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;hp&quot;</span><span class="token operator">:</span><span class="token number">389</span><span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>访问 JSON 数组和访问普通数组一样，通过下标访问</p></li></ul><h2 id="使用-fastjson-解析json和序列化对象" tabindex="-1"><a class="header-anchor" href="#使用-fastjson-解析json和序列化对象" aria-hidden="true">#</a> 使用 fastjson 解析JSON和序列化对象</h2><p><code>Fastjson</code> 使用也是比较简单的，分为以下三步完成</p><ol><li><p><strong>导入坐标</strong></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2.62<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>Java对象转JSON</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> jsonStr <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将 Java 对象转换为 JSON 串，只需要使用 <code>Fastjson</code> 提供的 <code>JSON</code> 类中的 <code>toJSONString()</code> 静态方法即可。</p></li><li><p><strong>JSON字符串转Java对象</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>jsonStr<span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将 json 转换为 Java 对象，只需要使用 <code>Fastjson</code> 提供的 <code>JSON</code> 类中的 <code>parseObject()</code> 静态方法即可。</p></li></ol><h2 id="ajax简介及作用" tabindex="-1"><a class="header-anchor" href="#ajax简介及作用" aria-hidden="true">#</a> AJAX简介及作用</h2><ul><li>Ajax 即“Asynchronous Javascript And XML”（异步 JavaScript 和 XML），是指一种创建交互式、快速动态网页应用的网页开发技术，无需重新加载整个网页的情况下，能够更新部分网页的技术。</li><li>通过在后台与服务器进行少量数据交换，Ajax 可以使网页实现 <strong>异步更新</strong>。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。</li><li><strong>同步请求</strong> 是指：浏览器页面发送请求给服务器后，在服务器处理请求的过程中，浏览器页面不能做其他的操作，只能等到服务器响应结束后，浏览器页面才能继续做其他的操作。</li><li><strong>异步请求</strong> 是指：浏览器页面发送请求给服务器后，在服务器处理请求的过程中，浏览器页面还可以做其他的操作。</li></ul><h2 id="ajax的应用领域及优点" tabindex="-1"><a class="header-anchor" href="#ajax的应用领域及优点" aria-hidden="true">#</a> AJAX的应用领域及优点</h2><ul><li>应用领域：数据校验</li><li>优点： <ol><li>用户体验比较好（不需要页面跳转，速度快）</li><li>服务器压力比较小</li></ol></li></ul><h2 id="如何发起-ajax-请求" tabindex="-1"><a class="header-anchor" href="#如何发起-ajax-请求" aria-hidden="true">#</a> 如何发起 AJAX 请求</h2><h3 id="jquery发起ajax请求" tabindex="-1"><a class="header-anchor" href="#jquery发起ajax请求" aria-hidden="true">#</a> jQuery发起Ajax请求</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">&quot;xxxservlet&quot;</span><span class="token punctuation">,</span>
	<span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">&quot;post&quot;</span><span class="token punctuation">,</span>
	<span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span>
		<span class="token literal-property property">key</span><span class="token operator">:</span>value<span class="token punctuation">,</span>
		<span class="token literal-property property">key</span><span class="token operator">:</span>value
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token literal-property property">dataType</span><span class="token operator">:</span><span class="token string">&quot;json&quot;</span><span class="token punctuation">,</span>
	<span class="token function-variable function">success</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		msg<span class="token punctuation">.</span>key<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>	
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16),b={href:"http://api.jquery.com/jQuery.ajax/",target:"_blank",rel:"noopener noreferrer"},x=e(`<h3 id="javascript发起ajax请求" tabindex="-1"><a class="header-anchor" href="#javascript发起ajax请求" aria-hidden="true">#</a> JavaScript发起Ajax请求</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> xmlhttp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
xmlhttp<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;xxxservlet&quot;</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
xmlhttp<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
xmlhttp<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>xmlhttp<span class="token punctuation">.</span>readyState<span class="token operator">==</span><span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xmlhttp<span class="token punctuation">.</span>status<span class="token operator">==</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token comment">//成功后的处理</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),j={href:"https://www.w3school.com.cn/ajax/ajax_xmlhttprequest_send.asp",target:"_blank",rel:"noopener noreferrer"},q=e(`<h2 id="axios" tabindex="-1"><a class="header-anchor" href="#axios" aria-hidden="true">#</a> Axios</h2><p>Axios 对原生的 AJAX 进行了封装，简化了书写，其官网是 https://www.axios-http.cn</p><h3 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用" aria-hidden="true">#</a> 基本使用</h3><p>axios 使用是比较简单的，分为以下两步：</p><ul><li><p>引入 axios 的 js 文件</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>js/axios-0.18.0.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>使用 axios 发送请求，并获取响应结果</p><ul><li><p>发送 get 请求</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">method</span><span class="token operator">:</span><span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">&quot;http://localhost:8080/ajax-demo1/aJAXDemo1?username=zhangsan&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resp</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>发送 post 请求</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">method</span><span class="token operator">:</span><span class="token string">&quot;post&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">&quot;http://localhost:8080/ajax-demo1/aJAXDemo1&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token string">&quot;username=zhangsan&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resp</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><p><code>axios()</code> 是用来发送异步请求的，小括号中使用 js 对象传递请求相关的参数：</p><ul><li><code>method</code> 属性：用来设置请求方式的。取值为 <code>get</code> 或者 <code>post</code>。</li><li><code>url</code> 属性：用来书写请求的资源路径。如果是 <code>get</code> 请求，需要将请求参数拼接到路径的后面，格式为： <code>url?参数名=参数值&amp;参数名2=参数值2</code>。</li><li><code>data</code> 属性：作为请求体被发送的数据。也就是说如果是 <code>post</code> 请求的话，数据需要作为 <code>data</code> 属性的值。</li></ul><p><code>then()</code> 需要传递一个匿名函数。我们将 <code>then()</code> 中传递的匿名函数称为 <strong>回调函数</strong>，意思是该匿名函数在发送请求时不会被调用，而是在成功响应后调用的函数。而该回调函数中的 <code>resp</code> 参数是对响应的数据进行封装的对象，通过 <code>resp.data</code> 可以获取到响应的数据。</p><h3 id="请求方法别名" tabindex="-1"><a class="header-anchor" href="#请求方法别名" aria-hidden="true">#</a> 请求方法别名</h3><p>为了方便起见， Axios 已经为所有支持的请求方法提供了别名。如下：</p><ul><li><p><code>get</code> 请求 ： <code>axios.get(url[,config])</code></p></li><li><p><code>delete</code> 请求 ： <code>axios.delete(url[,config])</code></p></li><li><p><code>head</code> 请求 ： <code>axios.head(url[,config])</code></p></li><li><p><code>options</code> 请求 ： <code>axios.option(url[,config])</code></p></li><li><p><code>post</code> 请求：<code>axios.post(url[,data[,config])</code></p></li><li><p><code>put</code> 请求：<code>axios.put(url[,data[,config])</code></p></li><li><p><code>patch</code> 请求：<code>axios.patch(url[,data[,config])</code></p></li></ul><p>而我们只关注 <code>get</code> 请求和 <code>post</code> 请求。</p><p>入门案例中的 <code>get</code> 请求代码可以改为如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;http://localhost:8080/ajax-demo/axiosServlet?username=zhangsan&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resp</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>入门案例中的 <code>post</code> 请求代码可以改为如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&quot;http://localhost:8080/ajax-demo/axiosServlet&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;username=zhangsan&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resp</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16);function f(y,_){const a=o("ExternalLinkIcon");return c(),l("div",null,[i(" more "),r,n("ul",null,[d,n("li",null,[n("p",null,[n("a",k,[v,t(a)])])]),n("li",null,[n("p",null,[n("a",g,[m,t(a)])])])]),h,n("ul",null,[n("li",null,[s("其他参数和用法可参照 "),n("a",b,[s("jQuery官方文档"),t(a)])])]),x,n("ul",null,[n("li",null,[s("其他参数和用法可参照 "),n("a",j,[s("W3school-AJAX文档"),t(a)])])]),q])}const S=p(u,[["render",f],["__file","JSONheAJAXzongjie.html.vue"]]);export{S as default};
