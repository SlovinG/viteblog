import{_ as a,o as e,c as p,a as t,b as n,d as s,f as o}from"./app-GYMnAgnr.js";const c="/viteblog/assets/370-ravL5XVk.png",l="/viteblog/assets/371-v5pXGbow.png",i="/viteblog/assets/372-U0NxZrLN.png",u="/viteblog/assets/373-9UBW2rKy.png",r={},k=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[s("最近在写的项目里用到了 "),n("code",null,"BufferedReader.ReadLine()"),s(" 方法，却没有深入了解过，导致出现了一些信息阻塞的问题，特以此文，让自己重新系统化认识一下 Java 里的 BufferedReader 流")])],-1),d=n("h2",{id:"一、什么是-bufferedreader-类",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#一、什么是-bufferedreader-类","aria-hidden":"true"},"#"),s(" 一、什么是 BufferedReader 类")],-1),v=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"API文档描述"),n("p",null,"BufferedReader 类从字符输入流中读取文本并缓冲字符，以便有效地读取字符，数组和行。"),n("p",null,"可以通过构造函数指定缓冲区大小也可以使用默认大小（在大多数情况下，默认值已经足够大了）"),n("p",null,"由 Reader 构成的每个读取请求都会导致相应的读取请求由基础字符或字节流构成，建议通过 BufferedReader 包装 Reader 的实例类以提高效率如："),n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token class-name"},"BufferedReader"),s(" in  "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"BufferedReader"),s("（"),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"FileReader"),s("（“foo"),n("span",{class:"token punctuation"},"."),s("in”））"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])]),n("p",null,"使用 DataInputStreams 进行文本输入的程序可以通过用适当的 BufferedReader 替换每个 DataInputStream 来进行本地化。")],-1),m=o(`<h3 id="_1、从字符输入流中读取文本并缓冲字符-以便有效地读取字符-数组和行怎么理解" tabindex="-1"><a class="header-anchor" href="#_1、从字符输入流中读取文本并缓冲字符-以便有效地读取字符-数组和行怎么理解" aria-hidden="true">#</a> 1、从字符输入流中读取文本并缓冲字符，以便有效地读取字符，数组和行怎么理解？</h3><p>说明该类存在缓冲字符数组并且是该类可以高效读取字符的关键。</p><h3 id="_2、构造函数指定缓冲区大小也可以使用默认大小怎么理解" tabindex="-1"><a class="header-anchor" href="#_2、构造函数指定缓冲区大小也可以使用默认大小怎么理解" aria-hidden="true">#</a> 2、构造函数指定缓冲区大小也可以使用默认大小怎么理解？</h3><p>意味着该类存在的构造方法既可以传递数值指定缓冲区大小也可以由类中的默认大小指定。</p><h3 id="_3、由reader构成的每个读取请求都会导致相应的读取请求由基础字符或字节流构成-建议通过bufferedreader包装reader的实例类以提高效率" tabindex="-1"><a class="header-anchor" href="#_3、由reader构成的每个读取请求都会导致相应的读取请求由基础字符或字节流构成-建议通过bufferedreader包装reader的实例类以提高效率" aria-hidden="true">#</a> 3、由Reader构成的每个读取请求都会导致相应的读取请求由基础字符或字节流构成，建议通过BufferedReader包装Reader的实例类以提高效率?</h3><p>Reader构成的对象是字符对象，每次的读取请求都会涉及到字节读取解码字符的过程，而BufferedReader类中有设计减少这样的解码次数的方法，进而提高了转换效率 。</p><h3 id="_4、bufferedreader替代datainputstreams进行本地化" tabindex="-1"><a class="header-anchor" href="#_4、bufferedreader替代datainputstreams进行本地化" aria-hidden="true">#</a> 4、BufferedReader替代DataInputStreams进行本地化？</h3><p>未知。</p><h2 id="二、bufferedreader-类实例域" tabindex="-1"><a class="header-anchor" href="#二、bufferedreader-类实例域" aria-hidden="true">#</a> 二、BufferedReader 类实例域</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//字符输入流</span>
<span class="token keyword">private</span> <span class="token class-name">Reader</span> in<span class="token punctuation">;</span>
 
<span class="token comment">//字符缓冲区</span>
<span class="token keyword">private</span> <span class="token keyword">char</span> cb<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
 
<span class="token comment">//读取字符存储的最末下标+1</span>
<span class="token keyword">private</span> <span class="token keyword">int</span> nChars<span class="token punctuation">;</span>
 
<span class="token comment">//读取字符存储的起始下标</span>
<span class="token keyword">private</span> <span class="token keyword">int</span> nextChar<span class="token punctuation">;</span>

<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">INVALIDATED</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">UNMARKED</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">int</span> markedChar <span class="token operator">=</span> <span class="token constant">UNMARKED</span><span class="token punctuation">;</span>

<span class="token comment">//仅在markedChar为0时有效</span>
<span class="token keyword">private</span> <span class="token keyword">int</span> readAheadLimit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token comment">//如果下个字符是换行符，则跳过--专用于readLine()方法里面控制</span>
<span class="token keyword">private</span> <span class="token keyword">boolean</span> skipLF <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
 
<span class="token comment">//设置标志时的markedSkipLF--用于mark()方法的变量</span>
<span class="token keyword">private</span> <span class="token keyword">boolean</span> markedSkipLF <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
 
<span class="token comment">//默认的字符缓冲大小</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> defaultCharBufferSize <span class="token operator">=</span><span class="token number">8192</span><span class="token punctuation">;</span>
    
<span class="token comment">//用于readLine()方法时初始化StringBuffer的初始容量</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> defaultExpectedLineLength <span class="token operator">=</span> <span class="token number">80</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、bufferedreader-类构造函数" tabindex="-1"><a class="header-anchor" href="#三、bufferedreader-类构造函数" aria-hidden="true">#</a> 三、BufferedReader 类构造函数</h2><h3 id="_1、使用默认的缓冲区大小来创建缓冲字符输入流-默认大小为8192个字符" tabindex="-1"><a class="header-anchor" href="#_1、使用默认的缓冲区大小来创建缓冲字符输入流-默认大小为8192个字符" aria-hidden="true">#</a> 1、使用默认的缓冲区大小来创建缓冲字符输入流，默认大小为8192个字符</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> defaultCharBufferSize <span class="token operator">=</span> <span class="token number">8192</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token class-name">Reader</span> in<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span> defaultCharBufferSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token class-name">Reader</span> in<span class="token punctuation">,</span> <span class="token keyword">int</span> sz<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>sz <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;Buffer size &lt;= 0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>in <span class="token operator">=</span> in<span class="token punctuation">;</span>
    cb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>sz<span class="token punctuation">]</span><span class="token punctuation">;</span>
    nextChar <span class="token operator">=</span> nChars <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-创建指定缓冲区大小的缓冲字符输入流-一般使用默认即可" tabindex="-1"><a class="header-anchor" href="#_2-创建指定缓冲区大小的缓冲字符输入流-一般使用默认即可" aria-hidden="true">#</a> 2）创建指定缓冲区大小的缓冲字符输入流，一般使用默认即可</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token class-name">Reader</span> in<span class="token punctuation">,</span> <span class="token keyword">int</span> sz<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>sz <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;Buffer size &lt;= 0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>in <span class="token operator">=</span> in<span class="token punctuation">;</span>
    cb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>sz<span class="token punctuation">]</span><span class="token punctuation">;</span>
    nextChar <span class="token operator">=</span> nChars <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四、bufferedreader-类-api" tabindex="-1"><a class="header-anchor" href="#四、bufferedreader-类-api" aria-hidden="true">#</a> 四、BufferedReader 类 API</h2><h3 id="_1、read-方法-读取1个或多个字节-返回一个字符-当读取到文件末尾时-返回-1" tabindex="-1"><a class="header-anchor" href="#_1、read-方法-读取1个或多个字节-返回一个字符-当读取到文件末尾时-返回-1" aria-hidden="true">#</a> 1、read() 方法：读取1个或多个字节，返回一个字符，当读取到文件末尾时，返回 -1</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 读取一个字符，若读取到末尾则返回-1
 */</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">{</span>
    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">ensureOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">//一般条件为真，除非是使用了skip方法跳跃字节</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>nextChar <span class="token operator">&gt;=</span> nChars<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//调用该方法读取字符</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>nextChar <span class="token operator">&gt;=</span> nChars<span class="token punctuation">)</span>
                    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            
            <span class="token comment">//此方法暂时不用管，涉及跳过字节数和换行符问题</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>skipLF<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                skipLF <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>cb<span class="token punctuation">[</span>nextChar<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    nextChar<span class="token operator">++</span><span class="token punctuation">;</span>
                    <span class="token keyword">continue</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> cb<span class="token punctuation">[</span>nextChar<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实际流程图解：</p><p><img src="`+c+`" alt="img"></p><h3 id="_2、fill-方法-从底层输入流中填充字符到缓冲区中-此方法会调用streamdecoder的方法实现字节到字符的转换" tabindex="-1"><a class="header-anchor" href="#_2、fill-方法-从底层输入流中填充字符到缓冲区中-此方法会调用streamdecoder的方法实现字节到字符的转换" aria-hidden="true">#</a> 2、fill() 方法：从底层输入流中填充字符到缓冲区中，此方法会调用StreamDecoder的方法实现字节到字符的转换</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 填充字符缓冲区，若有效则将标记考虑在内
 */</span>
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> dst<span class="token punctuation">;</span>
    
    <span class="token comment">//查看是否调用过make方法进行标记--若未使用make方法，则条件为真</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>markedChar <span class="token operator">&lt;=</span> <span class="token constant">UNMARKED</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        dst <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> delta <span class="token operator">=</span> nextChar <span class="token operator">-</span> markedChar<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>delta <span class="token operator">&gt;=</span> readAheadLimit<span class="token punctuation">)</span><span class="token punctuation">{</span>
            markedChar <span class="token operator">=</span> <span class="token constant">INVALIDATED</span><span class="token punctuation">;</span>
            readAheadLimit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            dst <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>readAheadLimit <span class="token operator">&lt;=</span> cb<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>cb<span class="token punctuation">,</span> markedChar<span class="token punctuation">,</span> cb<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> delta<span class="token punctuation">)</span><span class="token punctuation">;</span>
                markedChar <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                dst <span class="token operator">=</span> delta<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span><span class="token punctuation">{</span>
                <span class="token keyword">char</span> ncb<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>readAheadLimit<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>cb<span class="token punctuation">,</span> markedChar<span class="token punctuation">,</span> ncb<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> delta<span class="token punctuation">)</span><span class="token punctuation">;</span>
                cb <span class="token operator">=</span> ncb<span class="token punctuation">;</span>
                markedChar <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                dst <span class="token operator">=</span> delta<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            nextChar <span class="token operator">=</span> nChars <span class="token operator">=</span> delta<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">int</span> n<span class="token punctuation">;</span>
    <span class="token keyword">do</span><span class="token punctuation">{</span>
      <span class="token comment">//调用InputStreamReader的方法，实际是调用StreamDecoder的read(char cbuf[], int offset, int length)方法   </span>
        n <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>cb<span class="token punctuation">,</span> dst<span class="token punctuation">,</span> cb<span class="token punctuation">.</span>length <span class="token operator">-</span> dst<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//当读取到字符时</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   
        nChars <span class="token operator">=</span> dst <span class="token operator">+</span> n<span class="token punctuation">;</span>   <span class="token comment">//字符缓冲区存储读到的字符的最末下标</span>
        nextChar <span class="token operator">=</span> dst<span class="token punctuation">;</span>     <span class="token comment">//字符缓冲区存储读到的字符的起始下标</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实际流程图解：注意根据read()方法先理解变量nChars和nextChar的意义</p><p><img src="`+l+`" alt="img"></p><h3 id="_3、read-char-cbuf-int-off-int-len-将最多length个字符读入数组中-返回实际读入的字符个数-当读取到文件末尾时-返回-1" tabindex="-1"><a class="header-anchor" href="#_3、read-char-cbuf-int-off-int-len-将最多length个字符读入数组中-返回实际读入的字符个数-当读取到文件末尾时-返回-1" aria-hidden="true">#</a> 3、read(char cbuf[], int off, int len)：将最多length个字符读入数组中，返回实际读入的字符个数，当读取到文件末尾时，返回 -1</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 字符读入数组的一部分，
 */</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">char</span> cbuf<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> off<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">{</span>
    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">ensureOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>off <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>off <span class="token operator">&gt;</span> cbuf<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>len <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>off <span class="token operator">+</span> len<span class="token punctuation">)</span> <span class="token operator">&gt;</span> cbuf<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>off <span class="token operator">+</span> len<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token function">read1</span><span class="token punctuation">(</span>cbuf<span class="token punctuation">,</span> off<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用read1(cbuf, off, len)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> n<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">&lt;</span> len<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> in<span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 注意该while循环，多次测试发现并未进入该方法，即使进入，本质还是调用read1(cbuf, off, len)</span>
            <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token function">read1</span><span class="token punctuation">(</span>cbuf<span class="token punctuation">,</span> off <span class="token operator">+</span> n<span class="token punctuation">,</span> len <span class="token operator">-</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span> 
            <span class="token keyword">if</span> <span class="token punctuation">(</span>n1 <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            n <span class="token operator">+=</span> n1<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> n<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">read1</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cbuf<span class="token punctuation">,</span> <span class="token keyword">int</span> off<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>nextChar <span class="token operator">&gt;=</span> nChars<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 若请求的长度与缓冲区长度一样大时，直接会把字符读取到数组中，并未使用该类的字符缓冲区</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&gt;=</span> cb<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> markedChar <span class="token operator">&lt;=</span> <span class="token constant">UNMARKED</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>skipLF<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>cbuf<span class="token punctuation">,</span> off<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>nextChar <span class="token operator">&gt;=</span> nChars<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>skipLF<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//若使用了换行、跳过字节数等才会考虑判断，暂时不用管</span>
        skipLF <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>cb<span class="token punctuation">[</span>nextChar<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            nextChar<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>nextChar <span class="token operator">&gt;=</span> nChars<span class="token punctuation">)</span>
                <span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>nextChar <span class="token operator">&gt;=</span> nChars<span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>len<span class="token punctuation">,</span> nChars <span class="token operator">-</span> nextChar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//取实际读取字符数与目标字符数len的最小数</span>

    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>cb<span class="token punctuation">,</span> nextChar<span class="token punctuation">,</span> cbuf<span class="token punctuation">,</span> off<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//从字符缓冲区中复制字符到目标数组中</span>

    nextChar <span class="token operator">+=</span> n<span class="token punctuation">;</span> <span class="token comment">//字符缓冲区存储下标位置前诺，避免重复取一样数据</span>

    <span class="token keyword">return</span> n<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>实际流程图解：图解read1(cbuf, off, len)方法即可，本质是该方法在起作用</strong></p><p><img src="`+i+`" alt="img"></p><h3 id="_4、读一行文字并返回该行字符-若读到文件末尾-则返回null-即当遇到换行符-n-回车符-r-时会终止读取表示该行文字读取完毕且返回该行文字-不包含换行符和回车符" tabindex="-1"><a class="header-anchor" href="#_4、读一行文字并返回该行字符-若读到文件末尾-则返回null-即当遇到换行符-n-回车符-r-时会终止读取表示该行文字读取完毕且返回该行文字-不包含换行符和回车符" aria-hidden="true">#</a> 4、读一行文字并返回该行字符，若读到文件末尾，则返回null：即当遇到换行符（&#39;\\ n&#39;），回车符（&#39;\\ r&#39;）时会终止读取表示该行文字读取完毕且返回该行文字（不包含换行符和回车符）</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 阅读一行文字，任何一条线都被视为终止，返回包含该行内容的字符串，但是不含换行符等
 */</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">readLine</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">String</span> <span class="token function">readLine</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> ignoreLF<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">{</span>
    <span class="token class-name">StringBuffer</span> s <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> startChar<span class="token punctuation">;</span>

    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">ensureOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">boolean</span> omitLF <span class="token operator">=</span> ignoreLF <span class="token operator">||</span> skipLF<span class="token punctuation">;</span>  

        bufferLoop<span class="token operator">:</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>nextChar <span class="token operator">&gt;=</span> nChars<span class="token punctuation">)</span> <span class="token comment">//判断是否有元素，没有则调用fill()方法取元素</span>
                <span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>nextChar <span class="token operator">&gt;=</span> nChars<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//判断是否已到文件末尾，若到文件末尾，则返回S   </span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
                    <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">else</span>
                    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">boolean</span> eol <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> i<span class="token punctuation">;</span>

           <span class="token comment">//如果遇到过换行符，则跳过该换行符继续读取</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>omitLF <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>cb<span class="token punctuation">[</span>nextChar<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                nextChar<span class="token operator">++</span><span class="token punctuation">;</span>
            skipLF <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            omitLF <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

            charLoop<span class="token operator">:</span> <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> nextChar<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nChars<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                c <span class="token operator">=</span> cb<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">&#39;\\r&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    eol <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span> charLoop<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

            startChar <span class="token operator">=</span> nextChar<span class="token punctuation">;</span>
            nextChar <span class="token operator">=</span> i<span class="token punctuation">;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>eol<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token class-name">String</span> str<span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>cb<span class="token punctuation">,</span> startChar<span class="token punctuation">,</span> i <span class="token operator">-</span> startChar<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span><span class="token punctuation">{</span>
                    s<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>cb<span class="token punctuation">,</span> startChar<span class="token punctuation">,</span> i <span class="token operator">-</span> startChar<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    str <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                nextChar<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">&#39;\\r&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    skipLF <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">return</span> str<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span>defaultExpectedLineLength<span class="token punctuation">)</span><span class="token punctuation">;</span>
            s<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>cb<span class="token punctuation">,</span> startChar<span class="token punctuation">,</span> i <span class="token operator">-</span> startChar<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实际流程图解：</p><p><img src="`+u+`" alt="img"></p><h3 id="_5、close-方法-关闭资源释放链接" tabindex="-1"><a class="header-anchor" href="#_5、close-方法-关闭资源释放链接" aria-hidden="true">#</a> 5、close() 方法：关闭资源释放链接</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">{</span>
    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>in <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        in <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        cb <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6、其它的skip-、make-方法等" tabindex="-1"><a class="header-anchor" href="#_6、其它的skip-、make-方法等" aria-hidden="true">#</a> 6、其它的skip()、make()方法等</h3><p>暂时不了解。</p><h2 id="五、bufferedreader-类与-inputstreamreader-类比较" tabindex="-1"><a class="header-anchor" href="#五、bufferedreader-类与-inputstreamreader-类比较" aria-hidden="true">#</a> 五、BufferedReader 类与 InputStreamReader 类比较</h2><p>InputStreamReader 中的文档说明提到过：<strong>为了获得最高效率，请考虑在BufferedReader中包装InputStreamReader？</strong></p><p>从 <code>read()</code> 方法理解，若使用 InputStreamReader 的 <code>read()</code> 方法，可以发现存在每2次就会调用一次解码器解码，但若是使用 BufferedReader 包装 InputStreamReader 后调用 <code>read()</code> 方法，可以发现只会调用一次解码器解码，其余时候都是直接从 BufferedReader 的缓冲区中取字符即可</p><p>从 <code>read(char cbuf[], int offset, int length)</code> 方法理解，若使用 InputStreamReader 的方法则只会读取 leng 个字符，但是使用 BufferedReader 类则会读取读取8192个字符，会尽量提取比当前操作所需的更多字节</p><p>例如文件中有20个字符，我们先通过 <code>read(cbuf,0,5)</code> 要读取5个字符到数组 cbuf 中，然后再通过 <code>read()</code> 方法读取1个字符。那么使用 InputStreamReader 类的话，则会调用一次解码器解码然后存储5个字符到数组中，然后又调用 <code>read()</code> 方法调用一次解码器读取2个字符，然后返回1个字符；等于是调用了2次解码器，若使用 BufferedReader 类的话则是先调用一次解码器读取20个字符到字符缓冲区中，然后复制5个到数组中，在调用 <code>read()</code> 方法时，则直接从缓冲区中读取字符，等于是调用了一次解码器</p><p>因此可以看出 BufferedReader 类会尽量提取比当前操作所需的更多字节，以应该更多情况下的效率提升，因此在设计到文件字符输入流的时候，我们使用 BufferedReader 中包装 InputStreamReader 类即可</p>`,42);function b(f,h){return e(),p("div",null,[k,t(" more "),d,v,m])}const y=a(r,[["render",b],["__file","Java BufferedReaderliu.html.vue"]]);export{y as default};
