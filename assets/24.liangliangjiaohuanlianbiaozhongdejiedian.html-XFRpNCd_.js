import{_ as n,o as s,c as a,f as e}from"./app-GYMnAgnr.js";const t="/viteblog/assets/24.两两交换链表中的节点1-Enr8WWYE.png",p={},i=e(`<p><strong>难度：中等</strong></p><p>给你一个链表，两两交换其中相邻的节点，并返回交换后链表的头节点。你必须在不修改节点内部的值的情况下完成本题（即，只能进行节点交换）。</p><p><strong>示例 1：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：head = [1,2,3,4]
输出：[2,1,4,3]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：head = []
输出：[]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：head = [1]
输出：[1]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li>链表中节点的数目在范围 <code>[0, 100]</code> 内</li><li><code>0 &lt;= Node.val &lt;= 100</code></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>我的思路：</p><ol><li>设定虚拟头节点 dummy，方便处理边界情况</li><li>设定指针 pre 指向当前处理对的前一个节点</li><li>进入循环，<code>pre.next != null &amp;&amp; pre.next.next != null</code> 确保至少有两个节点可以交换 <ol><li>设定指针 first 指向第一个需要交换的节点，second 指向第二个需要交换的节点</li><li>first 节点的 next 指针原本指向 second 节点，现在令其指向 second 的下一个节点</li><li>令 second 节点的 next 指针指向 first 节点</li><li>pre 节点的 next 指针原来指向 first 节点，现在令其指向 second 节点</li><li>移动 pre 指针到下一对需要交换的节点前，也就是指向 first 节点</li></ol></li></ol><p><img src="`+t+`" alt="24.两两交换链表中的节点1"></p><h2 id="我的代码" tabindex="-1"><a class="header-anchor" href="#我的代码" aria-hidden="true">#</a> 我的代码</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">swapPairs</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 设置一个虚拟头结点，方便处理边界情况</span>
    <span class="token class-name">ListNode</span> dummy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// pre 指向当前处理对的前一个节点</span>
    <span class="token class-name">ListNode</span> pre <span class="token operator">=</span> dummy<span class="token punctuation">;</span>
    <span class="token comment">// 循环条件确保至少有两个节点可以交换</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>pre<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> pre<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ListNode</span> first <span class="token operator">=</span> pre<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token comment">// 第一个需要交换的节点</span>
        <span class="token class-name">ListNode</span> second <span class="token operator">=</span> first<span class="token punctuation">.</span>next<span class="token punctuation">;</span> <span class="token comment">// 第二个需要交换的节点</span>

        <span class="token comment">// 交换操作</span>
        first<span class="token punctuation">.</span>next <span class="token operator">=</span> second<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        second<span class="token punctuation">.</span>next <span class="token operator">=</span> first<span class="token punctuation">;</span>
        pre<span class="token punctuation">.</span>next <span class="token operator">=</span> second<span class="token punctuation">;</span>
        
		<span class="token comment">// 移动 pre 到下一对需要交换的节点前</span>
        pre <span class="token operator">=</span> firstNode<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 返回新链表的头节点</span>
    <span class="token keyword">return</span> dummy<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>时间复杂度：O(n)</p><p>空间复杂度：O(1)</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>如果使用 C，C++ 编程语言的话，不要忘了还要从内存中删除这两个移除的节点。</p><p><strong>当然如果使用 Java ，Python 的话就不用手动管理内存了。</strong></p><p>注意虚拟头节点的引入，可以使代码逻辑更统一。</p>`,22),l=[i];function o(c,d){return s(),a("div",null,l)}const u=n(p,[["render",o],["__file","24.liangliangjiaohuanlianbiaozhongdejiedian.html.vue"]]);export{u as default};
