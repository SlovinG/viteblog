import{_ as e,r as o,o as p,c,a as l,b as t,d as n,e as i,f as s}from"./app-GYMnAgnr.js";const d="/viteblog/assets/518-IMxgJRHj.png",u="/viteblog/assets/image-20210811200833143-HLVXCqG8.png",r="/viteblog/assets/519-o70DOPxM.png",k={},g=s('<p>提起“<strong>单元测试</strong>”这几个字，一般开发者会条件反射般想起：“工作忙，没时间”，这是一个客观上的事实，在急于求成的大环境下，规范的单元测试却需要一些明确的代码产出及覆盖率指标，这的确很让人头疼。早几年的关于单元测试的文章，不停的鼓吹其好处，却对时间成本的问题视而不见。</p><p>而与此相对的，对于开发者而言，其编写的代码是否需要经过测试，经过几轮测试才能让开发者安心？相信大多数开发者会说需要，且测试次数越多越好，毕竟上线时求神拜佛的滋味其实并不好受。</p><p>所以这其实是自相矛盾的，我们身处其中，有时候只能抱测试哥哥的大腿以求生路。但是仅仅靠测试人员把关，有些细节和异常流程不可避免会被漏掉。</p><h2 id="单元测试的缺点" tabindex="-1"><a class="header-anchor" href="#单元测试的缺点" aria-hidden="true">#</a> 单元测试的缺点</h2><p>回到单元测试本身的概念上来，单元测试强调剥离所有外部依赖的影响，对类中的每个方法都写一个测试 case，这里面本身存在一些现实问题：</p><ol><li>为每个方法写测试 case，时间成本太高</li><li>有些方法的操作本身非常简单，只是一些简单的赋值等操作，没有必要写测试</li><li>团队开发能力参差不齐，<strong>解耦做的不好的情况下，单元测试越发困难</strong></li><li>有些依赖非常难以剥离（进行 mock），或者剥离的代价比较大，比如 mvc 中 Controller 需要web容器，数据库访问需要真实数据库（使用内存数据库，初始化的工作量也非常大），Redis 等</li></ol><p>单元测试，仅适合那些逻辑复杂，逻辑分叉较多且较少依赖外部环境的方法，这些方法使用 unit test 再合适不过。除此之外的其他业务场景，建议舍弃 <strong>单元测试</strong>，投入到“<strong>功能测试</strong>”的怀抱。</p><h2 id="功能测试" tabindex="-1"><a class="header-anchor" href="#功能测试" aria-hidden="true">#</a> 功能测试</h2><p>在本文中，我们对功能测试做一下约定：在单个 Java 虚拟机内部的，mock 大部分外部依赖的影响，针对业务功能（通常是 Controller 或对外公开的 Service）的测试，称之为“<strong>功能测试</strong>”，把单个服务内部的业务功能综合在一起，每一个测试 case 都是一个小业务流程。</p><p><img src="'+d+`" alt="测试金字塔"></p><p>测试金字塔中的第二层是我们重点关注的，unit test 虽好，但常规的业务开发中用的不多。</p><p>功能测试不同于集成测试（UI 测试），集成测试原意是强调端到端的完整链路测试，期望环境尽可能是真实的，每一个测试 case 都是一个完整的业务流程，本文不讨论集成测试相关内容。</p><p>用测试代码安安心心的写出一条功能测试 case，确保它能够正确执行，每个核心业务功能一条测试 case。这样仍需做一些 mock 工作，但 mock 工作量变小了很多，再加上 Spring 框架支持，进一步减轻了测试工作量。</p><h2 id="spring-boot-test-简介" tabindex="-1"><a class="header-anchor" href="#spring-boot-test-简介" aria-hidden="true">#</a> Spring Boot Test 简介</h2><p>Spring Test 与 JUnit 等其他测试框架结合起来，提供了便捷高效的测试手段。而 Spring Boot Test 是在 Spring Test 之上的再次封装，增加了 <strong>切片测试</strong>，增强了mock 能力。</p><p>整体上，Spring Boot Test 支持的测试种类，大致可以分为如下三类：</p><table><thead><tr><th style="text-align:left;">类别</th><th style="text-align:left;">描述</th><th style="text-align:left;">涉及的注解</th></tr></thead><tbody><tr><td style="text-align:left;">单元测试</td><td style="text-align:left;">一般面向方法，编写一般业务代码时，测试成本较大（理由见上文）</td><td style="text-align:left;"><code>@Test</code></td></tr><tr><td style="text-align:left;">切片测试</td><td style="text-align:left;">一般面向难于测试的边界功能，介于单元测试和功能测试之间</td><td style="text-align:left;"><code>@RunWith</code>、<code>@WebMvcTest</code> 等</td></tr><tr><td style="text-align:left;">功能测试</td><td style="text-align:left;">一般面向某个完整的业务功能，同时也可以使用切面测试中的mock能力，推荐使用</td><td style="text-align:left;"><code>@RunWith</code>、<code>@SpringBootTest</code> 等</td></tr></tbody></table><p><strong>功能测试</strong> 过程中的几个关键要素及支撑方式如下：</p><table><thead><tr><th style="text-align:left;">要素</th><th style="text-align:left;">实现方式</th></tr></thead><tbody><tr><td style="text-align:left;">测试运行环境</td><td style="text-align:left;">通过 <code>@RunWith</code> 和 <code>@SpringBootTest</code> 启动 spring 容器</td></tr><tr><td style="text-align:left;">mock能力</td><td style="text-align:left;">Mockito 提供了强大 mock 功能</td></tr><tr><td style="text-align:left;">断言能力</td><td style="text-align:left;">AssertJ、Hamcrest、JsonPath 提供了强大的断言能力</td></tr></tbody></table><h2 id="快速开始" tabindex="-1"><a class="header-anchor" href="#快速开始" aria-hidden="true">#</a> 快速开始</h2><p>增加 <code>spring-boot-starter-test</code> 依赖，使用 <code>@RunWith</code>和 <code>@SpringBootTest</code> 注解，即可开始测试。</p><h3 id="添加依赖" tabindex="-1"><a class="header-anchor" href="#添加依赖" aria-hidden="true">#</a> 添加依赖</h3><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一旦依赖了 <code>spring-boot-starter-test</code>，下面这些类库将被一同依赖进去：</p><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">简介</th></tr></thead><tbody><tr><td style="text-align:left;">JUnit</td><td style="text-align:left;">Java 测试事实上的标准，默认依赖版本是4.12（JUnit5 和 JUnit4 差别比较大，集成方式有不同）</td></tr><tr><td style="text-align:left;">Spring Test &amp; Spring Boot Test</td><td style="text-align:left;">Spring 的测试支持</td></tr><tr><td style="text-align:left;">AssertJ</td><td style="text-align:left;">提供了流式的断言方式</td></tr><tr><td style="text-align:left;">Hamcrest</td><td style="text-align:left;">提供了丰富的 matcher</td></tr><tr><td style="text-align:left;">Mockito</td><td style="text-align:left;">mock 框架，可以按类型创建 mock 对象，可以根据方法参数指定特定的响应，也支持对于 mock 调用过程的断言</td></tr><tr><td style="text-align:left;">JSONassert</td><td style="text-align:left;">为 JSON 提供了断言功能</td></tr><tr><td style="text-align:left;">JsonPath</td><td style="text-align:left;">为 JSON 提供了 XPATH 功能</td></tr></tbody></table><h3 id="测试类" tabindex="-1"><a class="header-anchor" href="#测试类" aria-hidden="true">#</a> 测试类</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>learn<span class="token punctuation">.</span>springboottestlearn<span class="token punctuation">.</span>ttt</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>learn<span class="token punctuation">.</span>springboottestlearn<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">User</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>learn<span class="token punctuation">.</span>springboottestlearn<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">UserService</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">RunWith</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span></span><span class="token class-name">SpringRunner</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBootTestLearnApplicationTests</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAddUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;john&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        user<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">&quot;earth&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userService<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>@RunWith</code> 是 Junit4 提供的注解，将 Spring 和 Junit 链接了起来。</p><p>假如使用Junit5，不再需要使用 <code>@ExtendWith</code> 注解，<code>@SpringBootTest</code> 和其它 <code>@*Test</code> 默认已经包含了该注解。</p><p><code>@SpringBootTest</code> 替代了 spring-test 中的 <code>@ContextConfiguration</code> 注解，目的是加载 ApplicationContext，启动 spring 容器。</p><p>使用 <code>@SpringBootTest</code> 时并没有像 <code>@ContextConfiguration</code> 一样显示指定 locations 或 classes 属性，原因在于 <code>@SpringBootTest</code> 注解会自动检索程序的配置文件，检索顺序是从当前包开始，逐级向上查找被 <code>@SpringBootApplication</code> 或 <code>@SpringBootConfiguration</code> 注解的类。</p><p>回忆一下 Spring 整合 JUnit 的步骤：</p><p><img src="`+u+`" alt="image-20210811200833143"></p><h2 id="功能测试-1" tabindex="-1"><a class="header-anchor" href="#功能测试-1" aria-hidden="true">#</a> 功能测试</h2><p>一般情况下，使用 <code>@SpringBootTest</code> 后，Spring 将 <strong>加载所有被管理的 bean</strong>，<strong>基本等同于启动了整个服务</strong>，此时便可以开始功能测试。</p><p>由于 web 服务是最常见的服务，且我们对于 web 服务的测试有一些特殊的期望，所以 <code>@SpringBootTest</code> 注解中，给出了 webEnvironment 参数指定了 web 的environment，该参数的值一共有四个可选值：</p><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">MOCK</td><td style="text-align:left;">此值为默认值，该类型提供一个 mock 环境，可以和 <code>@AutoConfigureMockMvc</code> 或 <code>@AutoConfigureWebTestClient</code> 搭配使用，开启Mock 相关的功能。注意此时内嵌的服务（servlet 容器）并没有真正启动，也不会监听 web 服务端口。</td></tr><tr><td style="text-align:left;">RANDOM_PORT</td><td style="text-align:left;">启动一个真实的 web 服务，监听一个随机端口。</td></tr><tr><td style="text-align:left;">DEFINED_PORT</td><td style="text-align:left;">启动一个真实的 web 服务，监听一个定义好的端口（从 <code>application.properties</code> 读取）。</td></tr><tr><td style="text-align:left;">NONE</td><td style="text-align:left;">启动一个非 web 的 ApplicationContext，既不提供 mock 环境，也不提供真实的 web 服务。</td></tr></tbody></table><blockquote><p>另外，如果当前服务的 classpath 中没有包含web相关的依赖，spring 将启动一个非 web 的 ApplicationContext，此时的 webEnvironment 就没有什么意义了</p></blockquote><h2 id="切片测试" tabindex="-1"><a class="header-anchor" href="#切片测试" aria-hidden="true">#</a> 切片测试</h2><p>所谓切片测试，官网文档称为 <strong>“slice” of your application</strong>，实际上是对一些特定组件的称呼。这里的 slice 并非单独的类（毕竟普通类只需要基于JUnit的单元测试即可），而是介于单元测试和集成测试中间的范围。</p><p>slice 是指一些在特定环境下才能执行的模块，比如 MVC 中的 Controller、JDBC 数据库访问、Redis 客户端等，这些模块大多脱离特定环境后不能独立运行，假如spring 没有为此提供测试支持，开发者只能启动完整服务对这些模块进行测试，这在一些复杂的系统中非常不方便，所以 spring 为这些模块提供了测试支持，使开发者有能力单独对这些模块进行测试。</p><p>通过 <code>@*Test</code> 开启具体模块的测试支持，开启后 spring 仅加载相关的 bean，无关内容不会被加载。</p><p>使用 <code>@WebMvcTest</code> 用来校验 controllers 是否正常工作的示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>mock<span class="token punctuation">.</span>mockito<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>assertj<span class="token punctuation">.</span>core<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>mockito<span class="token punctuation">.</span></span><span class="token class-name">BDDMockito</span><span class="token punctuation">.</span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>request<span class="token punctuation">.</span></span><span class="token class-name">MockMvcRequestBuilders</span><span class="token punctuation">.</span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>result<span class="token punctuation">.</span></span><span class="token class-name">MockMvcResultMatchers</span><span class="token punctuation">.</span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@WebMvcTest</span><span class="token punctuation">(</span><span class="token class-name">UserVehicleController</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyControllerTests</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">MockMvc</span> mvc<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@MockBean</span>
    <span class="token keyword">private</span> <span class="token class-name">UserVehicleService</span> userVehicleService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token function">given</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>userVehicleService<span class="token punctuation">.</span><span class="token function">getVehicleDetails</span><span class="token punctuation">(</span><span class="token string">&quot;sboot&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">willReturn</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">VehicleDetails</span><span class="token punctuation">(</span><span class="token string">&quot;Honda&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Civic&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>mvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/sboot/vehicle&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">TEXT_PLAIN</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token string">&quot;Honda Civic&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>@WebMvcTest</code> 和 <code>MockMvc</code> 搭配使用，可以在不启动 web 容器的情况下，对 Controller 进行测试。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>上文文主要介绍了如下几点内容：</p><ol><li>测试可以分为 <strong>单元测试</strong>、<strong>功能测试</strong>、以及介于两者之间的 <strong>切片测试</strong></li><li>建议放弃不必要的单元测试，拥抱功能测试、切片测试。</li><li>Spring Boot Test 在 spring-test 基础上，增强了mock能力，增加了测试的自动配置、切片测试。</li><li><code>@SpringBootTest</code>、<code>@WebMvcTest</code> 等其他 <code>@*Test</code> 注解， 作为开启测试的注解，都可以启动一个 ApplicationContext。</li></ol><p>Spring 为了避免的繁琐难懂的xml配置，引入大量 annotation 进行系统配置，确实减轻了配置工作量。由此，理解这些 annotation 变得尤为重要，一定程度上讲，对 Spring Boot Test 的使用，就是对其相关 annotation 的使用。</p><p>掌握这些 annotation（及部分关联的类），可以从注解功能分类，相互之间的搭配组合，及相似注解的差异这三方面着手。</p><h2 id="按功能分类" tabindex="-1"><a class="header-anchor" href="#按功能分类" aria-hidden="true">#</a> 按功能分类</h2><blockquote><p>本文仅讨论Spring Boot Test（版本：2.1.1.BUILD-SNAPSHOT）中的注解。</p><p>由于使用这些注解的使用方式大多比较简单，为避免干扰阅读，本文不再罗列代码示例。</p></blockquote><p>从功能上讲，Spring Boot Test 中的注解主要分如下几类：</p><table><thead><tr><th style="text-align:left;">类别</th><th style="text-align:left;">示例</th><th style="text-align:left;">格式</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">配置类型</td><td style="text-align:left;"><code>@TestConfiguration</code>等</td><td style="text-align:left;"></td><td style="text-align:left;">提供一些测试相关的配置入口</td></tr><tr><td style="text-align:left;">mock 类型</td><td style="text-align:left;"><code>@MockBean</code>等</td><td style="text-align:left;"></td><td style="text-align:left;">提供 mock 支持</td></tr><tr><td style="text-align:left;">启动测试类型</td><td style="text-align:left;"><code>@SpringBootTest</code></td><td style="text-align:left;"><code>@\\*Test</code></td><td style="text-align:left;">以 Test 结尾的注解，具有加载 applicationContext 的能力</td></tr><tr><td style="text-align:left;">自动配置类型</td><td style="text-align:left;"><code>@AutoConfigureJdbc</code>等</td><td style="text-align:left;"><code>@AutoConfigure*</code></td><td style="text-align:left;">以 AutoConfigure 开头的注解，具有加载测试支持功能的能力。</td></tr></tbody></table><h3 id="配置类型的注解" tabindex="-1"><a class="header-anchor" href="#配置类型的注解" aria-hidden="true">#</a> 配置类型的注解</h3><table><thead><tr><th style="text-align:left;">注解</th><th style="text-align:left;">作用</th><th style="text-align:left;">实践中的使用</th></tr></thead><tbody><tr><td style="text-align:left;"><code>@TestComponent</code></td><td style="text-align:left;">该注解另一种<code>@Component</code>，在语义上用来指定某个Bean是专门用于测试的。</td><td style="text-align:left;">该注解适用于测试代码和正式混合在一起时，不加载被该注解描述的Bean，使用不多。</td></tr><tr><td style="text-align:left;"><code>@TestConfiguration</code></td><td style="text-align:left;">该注解是另一种<code>@TestComponent</code>，它用于补充额外的Bean或覆盖已存在的Bean</td><td style="text-align:left;">在不修改正式代码的前提下，使配置更加灵活</td></tr><tr><td style="text-align:left;"><code>@TypeExcludeFilters</code></td><td style="text-align:left;">用来排除<code>@TestConfiguration</code>和<code>@TestComponent</code></td><td style="text-align:left;">适用于测试代码和正式代码混合的场景，使用不多</td></tr><tr><td style="text-align:left;"><code>@OverrideAutoConfiguration</code></td><td style="text-align:left;">可用于覆盖<code>@EnableAutoConfiguration</code>，与<code>ImportAutoConfiguration</code>结合使用，以限制所加载的自动配置类</td><td style="text-align:left;">在不修改正式代码的前提下，提供了修改配置自动配置类的能力</td></tr><tr><td style="text-align:left;"><code>@PropertyMapping</code></td><td style="text-align:left;">定义<code>@AutoConfigure*</code>注解中用到的变量名称，例如在<code>@AutoConfigureMockMvc</code>中定义名为spring.test.mockmvc.webclient.enabled的变量</td><td style="text-align:left;">一般不使用</td></tr></tbody></table><blockquote><p>使用<code>@SpringBootApplication</code>启动测试或者生产代码，被<code>@TestComponent</code>描述的Bean会自动被排除掉。如果不是则需要向<code>@SpringBootApplication</code>添加TypeExcludeFilter。</p></blockquote><h3 id="mock-类型的注解" tabindex="-1"><a class="header-anchor" href="#mock-类型的注解" aria-hidden="true">#</a> mock 类型的注解</h3><table><thead><tr><th style="text-align:left;">注解</th><th style="text-align:left;">作用</th></tr></thead><tbody><tr><td style="text-align:left;"><code>@MockBean</code></td><td style="text-align:left;">用于mock指定的class或被注解的属性</td></tr><tr><td style="text-align:left;"><code>@MockBeans</code></td><td style="text-align:left;">使<code>@MockBean</code>支持在同一类型或属性上多次出现</td></tr><tr><td style="text-align:left;"><code>@SpyBean</code></td><td style="text-align:left;">用于spy指定的class或被注解的属性</td></tr><tr><td style="text-align:left;"><code>@SpyBeans</code></td><td style="text-align:left;">使<code>@SpyBeans</code>支持在同一类型或属性上多次出现</td></tr></tbody></table><p><code>@MockBean </code>和 <code>@SpyBean</code> 这两个注解，在 mockito 框架中本来已经存在，且功能基本相同。Spring Boot Test又定义一份重复的注解，目的在于使<code>MockBean</code>和 <code>SpyBean </code>被ApplicationContext管理，从而方便使用。</p><blockquote><p>MockBean和SpyBean功能非常相似，都能模拟方法的各种行为。不同之处在于MockBean是全新的对象，跟正式对象没有关系；而SpyBean与正式对象紧密联系，可以模拟正式对象的部分方法，没有被模拟的方法仍然可以运行正式代码。</p></blockquote><h3 id="自动配置类型的注解-autoconfigure" tabindex="-1"><a class="header-anchor" href="#自动配置类型的注解-autoconfigure" aria-hidden="true">#</a> 自动配置类型的注解（@AutoConfigure*）</h3><table><thead><tr><th style="text-align:left;">注解</th><th style="text-align:left;">作用</th></tr></thead><tbody><tr><td style="text-align:left;"><code>@AutoConfigureJdbc</code></td><td style="text-align:left;">自动配置JDBC</td></tr><tr><td style="text-align:left;"><code>@AutoConfigureCache</code></td><td style="text-align:left;">自动配置缓存</td></tr><tr><td style="text-align:left;"><code>@AutoConfigureDataLdap</code></td><td style="text-align:left;">自动配置LDAP</td></tr><tr><td style="text-align:left;"><code>@AutoConfigureJson</code></td><td style="text-align:left;">自动配置JSON</td></tr><tr><td style="text-align:left;"><code>@AutoConfigureJsonTesters</code></td><td style="text-align:left;">自动配置JsonTester</td></tr><tr><td style="text-align:left;"><code>@AutoConfigureDataJpa</code></td><td style="text-align:left;">自动配置JPA</td></tr><tr><td style="text-align:left;"><code>@AutoConfigureTestEntityManager</code></td><td style="text-align:left;">自动配置TestEntityManager</td></tr><tr><td style="text-align:left;"><code>@AutoConfigureRestDocs</code></td><td style="text-align:left;">自动配置Rest Docs</td></tr><tr><td style="text-align:left;"><code>@AutoConfigureMockRestServiceServer</code></td><td style="text-align:left;">自动配置 MockRestServiceServer</td></tr><tr><td style="text-align:left;"><code>@AutoConfigureWebClient</code></td><td style="text-align:left;">自动配置 WebClient</td></tr><tr><td style="text-align:left;"><code>@AutoConfigureWebFlux</code></td><td style="text-align:left;">自动配置 WebFlux</td></tr><tr><td style="text-align:left;"><code>@AutoConfigureWebTestClient</code></td><td style="text-align:left;">自动配置 WebTestClient</td></tr><tr><td style="text-align:left;"><code>@AutoConfigureMockMvc</code></td><td style="text-align:left;">自动配置 MockMvc</td></tr><tr><td style="text-align:left;"><code>@AutoConfigureWebMvc</code></td><td style="text-align:left;">自动配置WebMvc</td></tr><tr><td style="text-align:left;"><code>@AutoConfigureDataNeo4j</code></td><td style="text-align:left;">自动配置 Neo4j</td></tr><tr><td style="text-align:left;"><code>@AutoConfigureDataRedis</code></td><td style="text-align:left;">自动配置 Redis</td></tr><tr><td style="text-align:left;"><code>@AutoConfigureJooq</code></td><td style="text-align:left;">自动配置 Jooq</td></tr><tr><td style="text-align:left;"><code>@AutoConfigureTestDatabase</code></td><td style="text-align:left;">自动配置Test Database，可以使用内存数据库</td></tr></tbody></table><p>这些注解可以搭配 <code>@\\*Test</code> 使用，用于开启在 <code>@\\*Test </code>中未自动配置的功能。例如 <code>@SpringBootTest </code>和 <code>@AutoConfigureMockMvc </code>组合后，就可以注入<code>org.springframework.test.web.servlet.MockMvc</code>。</p><blockquote><p><strong>“自动配置类型”有两种使用方式：</strong></p><ol><li>在功能测试（即使用<code>@SpringBootTest</code>）时显示添加。</li><li>一般在切片测试中被隐式使用，例如<code>@WebMvcTest</code>注解时，隐式添加了<code>@AutoConfigureCache</code>、<code>@AutoConfigureWebMvc</code>、<code>@AutoConfigureMockMvc</code>。</li></ol></blockquote><blockquote><p><strong>实现原理</strong> 与<code>spring-boot-autoconfigure</code>中的<code>@\\*AutoConfiguration</code>实现略有不同，Test包中的 <code>@AutoConfigure\\*</code> 通过 <code>DeterminableImports</code> 接口作为指定代码的识别入口，通过 <code>ImportAutoConfiguration</code>注解作为配置入口，从Test包下的 <code>spring.factories</code> 读取配置文件，每个 <code>@AutoConfigure\\*</code>中都可以包含多个 Spring Boot 的 <code>@\\*AutoConfiguration</code>，例如：</p><p><img src="`+r+'" alt="AutoConfigureWebMvc"></p></blockquote><h3 id="启动测试类型的注解-test" tabindex="-1"><a class="header-anchor" href="#启动测试类型的注解-test" aria-hidden="true">#</a> 启动测试类型的注解（@*Test）</h3><p>所有的 <code>@\\*Test</code> 注解都被 <code>@BootstrapWith</code> 注解，它们可以启动 ApplicationContext，是测试的入口，所有的测试类必须声明一个 <code>@\\*Test</code> 注解。</p><table><thead><tr><th style="text-align:left;">注解</th><th style="text-align:left;">作用</th><th></th></tr></thead><tbody><tr><td style="text-align:left;"><code>@SpringBootTest</code></td><td style="text-align:left;">自动侦测并加载@SpringBootApplication或@SpringBootConfiguration中的配置，默认web环境为MOCK，不监听任务端口</td><td></td></tr><tr><td style="text-align:left;"><code>@DataRedisTest</code></td><td style="text-align:left;">测试对Redis操作，自动扫描被@RedisHash描述的类，并配置Spring Data Redis的库</td><td></td></tr><tr><td style="text-align:left;"><code>@DataJpaTest</code></td><td style="text-align:left;">测试基于JPA的数据库操作，同时提供了TestEntityManager替代JPA的EntityManager</td><td></td></tr><tr><td style="text-align:left;"><code>@DataJdbcTest</code></td><td style="text-align:left;">测试基于Spring Data JDBC的数据库操作</td><td></td></tr><tr><td style="text-align:left;"><code>@JsonTest</code></td><td style="text-align:left;">测试JSON的序列化和反序列化</td><td></td></tr><tr><td style="text-align:left;"><code>@WebMvcTest</code></td><td style="text-align:left;">测试Spring MVC中的controllers</td><td></td></tr><tr><td style="text-align:left;"><code>@WebFluxTest</code></td><td style="text-align:left;">测试Spring WebFlux中的controllers</td><td></td></tr><tr><td style="text-align:left;"><code>@RestClientTest</code></td><td style="text-align:left;">测试对REST客户端的操作</td><td></td></tr><tr><td style="text-align:left;"><code>@DataLdapTest</code></td><td style="text-align:left;">测试对LDAP的操作</td><td></td></tr><tr><td style="text-align:left;"><code>@DataMongoTest</code></td><td style="text-align:left;">测试对MongoDB的操作</td><td></td></tr><tr><td style="text-align:left;"><code>@DataNeo4jTest</code></td><td style="text-align:left;">测试对Neo4j的操作</td><td></td></tr></tbody></table>',69),m=t("code",null,"@SpringBootTest",-1),v={href:"https://docs.spring.io/spring-boot/docs/2.1.0.RELEASE/reference/htmlsingle/#test-auto-configuration",target:"_blank",rel:"noopener noreferrer"},f=s(`<p>一般情况下，推荐使用<code>@SpringBootTest</code>而非其它切片测试的注解，简单有效。若某次改动仅涉及特定切片，可以考虑使用切片测试。</p><p><code>@SpringBootTest</code>是这些注解中最常用的一个，其中包含的配置项如下：</p><table><thead><tr><th style="text-align:left;">配置名称</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>value</code></td><td style="text-align:left;">指定配置属性</td></tr><tr><td style="text-align:left;"><code>properties</code></td><td style="text-align:left;">指定配置属性，和value意义相同</td></tr><tr><td style="text-align:left;"><code>classes</code></td><td style="text-align:left;">指定配置类，等同于<code>@ContextConfiguration</code>中的class，若没有显示指定，将查找嵌套的<code>@Configuration</code>类，然后返回到<code>SpringBootConfiguration</code>搜索配置</td></tr><tr><td style="text-align:left;"><code>webEnvironment</code></td><td style="text-align:left;">指定web环境，可选值有：<code>MOCK</code>、<code>RANDOM_PORT</code>、<code>DEFINED_PORT</code>、<code>NONE</code></td></tr></tbody></table><p><code>webEnvironment</code>详细说明：</p><table><thead><tr><th style="text-align:left;">可选值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>MOCK</code></td><td style="text-align:left;">此值为默认值，该类型提供一个mock环境，此时内嵌的服务（servlet容器）并没有真正启动，也不会监听web端口。</td></tr><tr><td style="text-align:left;"><code>RANDOM_PORT</code></td><td style="text-align:left;">启动一个真实的web服务，监听一个随机端口。</td></tr><tr><td style="text-align:left;"><code>DEFINED_PORT</code></td><td style="text-align:left;">启动一个真实的web服务，监听一个定义好的端口（从配置中读取）。</td></tr><tr><td style="text-align:left;"><code>NONE</code></td><td style="text-align:left;">启动一个非web的 ApplicationContext，既不提供mock环境，也不提供真是的web服务。</td></tr></tbody></table><h2 id="相互之间的搭配组合" tabindex="-1"><a class="header-anchor" href="#相互之间的搭配组合" aria-hidden="true">#</a> 相互之间的搭配组合</h2><p>典型的搭配如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">sample<span class="token punctuation">.</span>test</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Before</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">RunWith</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">sample<span class="token punctuation">.</span>test<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">VehicleIdentificationNumber</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">sample<span class="token punctuation">.</span>test<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">VehicleDetails</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">sample<span class="token punctuation">.</span>test<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">VehicleDetailsService</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span></span><span class="token class-name">AutoConfigureTestDatabase</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span><span class="token punctuation">.</span><span class="token class-name">WebEnvironment</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>mock<span class="token punctuation">.</span>mockito<span class="token punctuation">.</span></span><span class="token class-name">MockBean</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">TestRestTemplate</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span></span><span class="token class-name">SpringRunner</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>mockito<span class="token punctuation">.</span></span><span class="token class-name">BDDMockito</span><span class="token punctuation">.</span><span class="token static">given</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token annotation punctuation">@SpringBootTest</span></span></span><span class="token punctuation">}</span> with a random port for <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">SampleTestApplication</span></span><span class="token punctuation">}</span>.
 *
 * <span class="token keyword">@author</span> Phillip Webb
 */</span>
<span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>webEnvironment <span class="token operator">=</span> <span class="token class-name">WebEnvironment</span><span class="token punctuation">.</span><span class="token constant">RANDOM_PORT</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@AutoConfigureTestDatabase</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SampleTestApplicationWebIntegrationTests</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">VehicleIdentificationNumber</span> <span class="token constant">VIN</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VehicleIdentificationNumber</span><span class="token punctuation">(</span>
            <span class="token string">&quot;01234567890123456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">TestRestTemplate</span> restTemplate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@MockBean</span>
    <span class="token keyword">private</span> <span class="token class-name">VehicleDetailsService</span> vehicleDetailsService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Before</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">given</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>vehicleDetailsService<span class="token punctuation">.</span><span class="token function">getVehicleDetails</span><span class="token punctuation">(</span><span class="token constant">VIN</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">willReturn</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">VehicleDetails</span><span class="token punctuation">(</span><span class="token string">&quot;Honda&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Civic&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>restTemplate<span class="token punctuation">.</span><span class="token function">getForEntity</span><span class="token punctuation">(</span><span class="token string">&quot;/{username}/vehicle&quot;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">&quot;sframework&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>@RunWith(SpringRunner.class)</code> 是JUnit的注解，作用是关联 Spring Boot Test，使运行JUnit时同时启动Spring</li><li><code>@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)</code> 作用是启动 Spring 的 ApplicationContext，参数 webEnvironment 指定了运行的web环境</li><li><code>@AutoConfigureTestDatabase</code> 作用是启动一个内存数据库，不使用真实的数据库</li></ul><p>其中 <code>@RunWith</code> 和 <code>@\\*Test</code> 必须存在，<code>@AutoConfigure</code> 可以同时配置任意多个，而配置类型的注解可以在需要时添加。</p><h2 id="相似注解的区别和联系" tabindex="-1"><a class="header-anchor" href="#相似注解的区别和联系" aria-hidden="true">#</a> 相似注解的区别和联系</h2><h3 id="testcomment-vs-comment" tabindex="-1"><a class="header-anchor" href="#testcomment-vs-comment" aria-hidden="true">#</a> @TestComment vs @Comment</h3><ul><li><code>@TestComponent </code> 是另一种 <code>@Component</code>，在语义上用来指定某个Bean是专门用于测试的</li><li>使用 <code>@SpringBootApplication</code>服务时，<code>@TestComponent</code> 会被自动排除</li></ul><h3 id="testconfiguration-vs-configuration" tabindex="-1"><a class="header-anchor" href="#testconfiguration-vs-configuration" aria-hidden="true">#</a> @TestConfiguration vs @Configuration</h3><ul><li><code>@TestConfiguration </code>是Spring Boot Boot Test提供的，<code>@Configuration </code>是Spring Framework提供的。</li><li><code>@TestConfiguration</code> 实际上是也是一种 <code>@TestComponent</code>，只是这个 <code>@TestComponent</code>专门用来做配置用。</li><li><code>@TestConfiguration</code> 和 <code>@Configuration</code> 不同，它不会阻止 <code>@SpringBootTest</code> 的查找机制，相当于是对既有配置的补充或覆盖。</li></ul><h3 id="springboottest-vs-webmvctest-或-test" tabindex="-1"><a class="header-anchor" href="#springboottest-vs-webmvctest-或-test" aria-hidden="true">#</a> @SpringBootTest vs @WebMvcTest(或@*Test)</h3><ul><li>都可以启动Spring的 ApplicationContext</li><li><code>@SpringBootTest </code> 自动侦测并加载 <code>@SpringBootApplication</code> 或 <code>@SpringBootConfiguration </code>中的配置，<code>@WebMvcTest</code> 不侦测配置，只是默认加载一些自动配置。</li><li><code>@SpringBootTest </code> 测试范围一般比 <code>@WebMvcTest </code> 大。</li></ul><h3 id="mockbean-vs-spybean" tabindex="-1"><a class="header-anchor" href="#mockbean-vs-spybean" aria-hidden="true">#</a> @MockBean vs @SpyBean</h3><p>详见上文 [mock类型的注解]</p><h2 id="小结-1" tabindex="-1"><a class="header-anchor" href="#小结-1" aria-hidden="true">#</a> 小结</h2><p>本文主要介绍了 Spring Boot Tes t中新增的注解，笔者将这些注解分为这几个类型：配置类型、mock类型、启动测试类型、自动配置类型。</p><ol><li>“配置类型”中的 <code>@TestComponent</code>、<code>@TestConfiguration</code>、<code>@OverrideAutoConfiguration </code>使配置更加灵活。</li><li>封装了 <code>mockito </code>的 <code>@MockBean</code> 和 <code>@SpyBean</code>，使其可以自然的注入到Spring容器中。</li><li>每个测试类必须包含一个“启动测试类型”的注解（<code>@\\*Test</code>），同时可以根据需要添加”自动配置类型”的注解（<code>@AutoConfigure*</code>）。</li><li><code>@SpringBootTest</code> 是最常用的“启动测试类型”注解</li></ol>`,22);function b(y,h){const a=o("ExternalLinkIcon");return p(),c("div",null,[l(" more "),g,t("blockquote",null,[t("p",null,[n("除了"),m,n("之外的注解都是用来进行切面测试的，他们会默认导入一些自动配置，点击 "),t("a",v,[n("官方docs"),i(a)]),n(" 查看详情。")])]),f])}const T=e(k,[["render",b],["__file","SpringBootTestxiangjie.html.vue"]]);export{T as default};
