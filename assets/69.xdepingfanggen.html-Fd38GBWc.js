import{_ as n,o as s,c as a,a as e,f as t}from"./app-GYMnAgnr.js";const p={},o=t(`<p><strong>难度：简单</strong></p><p>给你一个非负整数 <code>x</code> ，计算并返回 <code>x</code> 的 <strong>算术平方根</strong> 。</p><p>由于返回类型是整数，结果只保留 <strong>整数部分</strong> ，小数部分将被 <strong>舍去 。</strong></p><p><strong>注意</strong>：不允许使用任何内置指数函数和算符，例如 <code>pow(x, 0.5)</code> 或者 <code>x ** 0.5</code> 。</p><p><strong>示例 1：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：x = 4
输出：2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：x = 8
输出：2
解释：8 的算术平方根是 2.82842..., 由于返回类型是整数，小数部分将被舍去。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>0 &lt;= x &lt;= 2^(31) - 1</code></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>求 x 的平方根的整数部分，所以平方根一定是 1，2，3 ... x 中的一个数。</p><p>从一个 <strong>有序的、无重复的</strong> 序列中寻找目标值，很适合使用二分查找法。</p><p>我的思路：</p><ol><li><p>先取中点 middle，然后判断 middle * middle 是否等于 x</p></li><li><p>middle * middle = x 的时候，middle 就是目标值，直接返回</p></li><li><p>middle * middle &lt; x 的时候，则从 middle 右边继续寻找；</p><p>注意在这一步中，要往 result 中暂存一下 middle 的值，因为题干中说 <strong>“8 的算术平方根是 2.82842..., 由于返回类型是整数，小数部分将被舍去”</strong>；</p><p>则当 2 * 2 = 4 &lt; 8 的时候，2 其实已经是目标值了，如果抛弃 2，那么由于 3 * 3 = 9 &gt; 8，此时目标值就找不到了，所以需要暂存 middle</p></li><li><p>middle * middle &gt; x 的时候，则从 middle 左边继续寻找</p><p>在这一步中如果延续第 3 步的思路，那么是不是应该往 result 中暂存 middle - 1 的值呢？</p><p>答案是：<strong>可以，但没必要</strong>。</p><p>因为在我们的代码中，只要目标值存在，那么在 <strong>倒数第二次循环</strong> 的时候，肯定会进入 middle * middle == x 或者 middle * middle &lt; x，此时就已经保存了 middle 的值，所以没必要在 <strong>最后一次循环</strong> 的时候，也就是触发 middle * middle &gt; x 的时候再保存一次了。</p><p>综上，第 3 步和第 4 步暂存 result 的操作，只需要保留任何一个就可以满足我们的需求。</p></li><li><p>当 right &gt; left 的时候退出循环，此时 result 里存的就是目标值</p></li></ol><h2 id="我的代码" tabindex="-1"><a class="header-anchor" href="#我的代码" aria-hidden="true">#</a> 我的代码</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">mySqrt</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> x<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> middle <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>middle <span class="token operator">*</span> middle <span class="token operator">==</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> middle<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>middle <span class="token operator">*</span> middle <span class="token operator">&lt;</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> middle<span class="token punctuation">;</span>
            left <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>middle <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>middle <span class="token operator">*</span> middle <span class="token operator">&gt;</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// result = (int) middle - 1;</span>
            right <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>middle <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>时间复杂度：O(log n)</p><p>空间复杂度：O(1)</p><h2 id="避坑" tabindex="-1"><a class="header-anchor" href="#避坑" aria-hidden="true">#</a> 避坑</h2><p>注意，题目中写到输入值的规模为：<code>0 &lt;= x &lt;= 2^(31) - 1</code>。</p><p>而在 Java 中 int 的存储范围为：<code>-2^(31) ~ 2^(31) - 1</code>， long 的存储范围为：<code>-2^(63) ~ 2^(63) - 1</code></p><p>那么上述代码中，如果不使用 long 型变量来声明 middle，那么当 x 的值过大的时候（例如 x = Integer.MAX_VALUE 时），尽管 middle 不会超过 int 的存储范围，但在 <strong>middle * middle</strong> 的时候，还是会发生 <strong>数值溢出</strong>，运算的结果将会被截断，只保留低 32 位的值，那么此时的 middle * middle 将不会是我们期望的值。</p><p>事实上，我们这里写 middle = left + (right - left) / 2，已经是在防止数据溢出了，当然它的运算结果和 (left + right)/2 是相同的。</p><h2 id="更优雅的写法" tabindex="-1"><a class="header-anchor" href="#更优雅的写法" aria-hidden="true">#</a> 更优雅的写法</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">mySqrt</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> x<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> middle <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">/</span> middle <span class="token operator">==</span> middle<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            result <span class="token operator">=</span> middle<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">/</span> middle <span class="token operator">&gt;</span> middle<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            result <span class="token operator">=</span> middle<span class="token punctuation">;</span>
            left <span class="token operator">=</span> middle <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">/</span> middle <span class="token operator">&lt;</span> middle<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            right <span class="token operator">=</span> middle <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述写法中，使用 target / middle == middle 这样的除法来规避了 middle * middle 可能会引发的数值溢出的问题。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>题干中对数据大小的提示，需要多留意。</p>`,29);function l(i,c){return s(),a("div",null,[e(" more "),o])}const r=n(p,[["render",l],["__file","69.xdepingfanggen.html.vue"]]);export{r as default};
