import{_ as i,o,c as d,a as r,b as e,d as a,f as c}from"./app-GYMnAgnr.js";const n="/viteblog/assets/033-QQ1xn59b.png",t="/viteblog/assets/034-SZB5Z6OY.png",l={},s=e("div",{class:"custom-container tip"},[e("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[e("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[e("circle",{cx:"12",cy:"12",r:"9"}),e("path",{d:"M12 8h.01"}),e("path",{d:"M11 12h1v4h1"})])]),e("p",{class:"custom-container-title"},"TIP"),e("p",null,[a("J2EE开发中大量的专业缩略语时常让人迷惑， 特别是对于还没毕业的新人来说更是摸不清头脑。与行业大牛谈技术时，人家出口就是"),e("code",null,"PO"),a("，"),e("code",null,"VO"),a("，"),e("code",null,"BO"),a("，"),e("code",null,"DTO"),a("，"),e("code",null,"POJO"),a("，"),e("code",null,"DAO"),a(" 等，逼格满满。为了熟悉业务（装逼），下面来一起学习下Java项目开发中这些专属名词的概念及其作用吧")])],-1),h=c('<h2 id="po-bean、entity等命名" tabindex="-1"><a class="header-anchor" href="#po-bean、entity等命名" aria-hidden="true">#</a> PO(bean、entity等命名)</h2><ul><li><code>Persistant Object</code> 持久对象：数据库表中的记录在 Java 对象中的显示状态</li><li>最形象的理解就是一个 <code>PO</code> 就是数据库中的一条记录</li><li>好处是可以把一条记录作为一个对象处理，可以方便的转为其它对象</li></ul><h2 id="bo-service、manager、business等命名" tabindex="-1"><a class="header-anchor" href="#bo-service、manager、business等命名" aria-hidden="true">#</a> BO(service、manager、business等命名)</h2><ul><li><code>Business Object</code>业务对象：主要作用是把业务逻辑封装为一个对象。这个对象可以包括一个或多个其它的对象</li><li>形象描述为一个对象的行为和动作，当然也有涉及到其它对象的一些行为和动作</li><li>比如处理一个人的业务逻辑，有睡觉、吃饭、上班、加班等行为，还有可能有和别人交谈、合作的行为</li><li>这样处理业务逻辑时，我们就可以针对BO去处理</li></ul><h2 id="vo-from也有此写法" tabindex="-1"><a class="header-anchor" href="#vo-from也有此写法" aria-hidden="true">#</a> VO(from也有此写法)</h2><ul><li><code>Value Object</code> 值对象：主要体现在视图的对象，对于一个 <code>WEB</code> 页面将整个页面的属性封装成一个对象，然后用一个 VO 对象在控制层与视图层进行传输交换</li></ul><h2 id="domain-领域对象" tabindex="-1"><a class="header-anchor" href="#domain-领域对象" aria-hidden="true">#</a> Domain(领域对象)</h2><p>领域是一个大范围，如简历域包括工作经验表、项目经验表、简历基本信息表。在 domain 包就可以定义一个大的简历对象，将三个表的内容整合在一个对象中，作为整体操作。</p><h2 id="dto-经过处理后的po-可能增加或者减少po的属性" tabindex="-1"><a class="header-anchor" href="#dto-经过处理后的po-可能增加或者减少po的属性" aria-hidden="true">#</a> DTO(经过处理后的PO，可能增加或者减少PO的属性)</h2><ul><li><code>Data Transfer Object</code>数据传输对象：主要用于远程调用等需要大量传输对象的地方</li><li>比如我们一张表有100个字段，那么对应的PO就有100个属性，但是我们界面上只要显示10个字段，客户端用<code>WEB service</code>来获取数据，没有必要把整个PO对象传递到客户端，这时我们就可以用只有这10个属性的DTO来传递结果到客户端，这样也不会暴露服务端表结构。到达客户端以后，如果用这个对象来对应界面显示，那此时它的身份就转为VO</li></ul><h2 id="pojo-pojo是一种概念或者接口-身份及作用随环境变化而变化" tabindex="-1"><a class="header-anchor" href="#pojo-pojo是一种概念或者接口-身份及作用随环境变化而变化" aria-hidden="true">#</a> POJO(POJO是一种概念或者接口，身份及作用随环境变化而变化)</h2><ul><li><code>Plain Ordinary Java Object</code> 简单 Java 对象：即 POJO 是一个简单的、普通的 Java 对象，它不包含业务逻辑或持久逻辑等，但不是 JavaBean、EntityBean 等，不具有任何特殊角色且不继承或不实现任何其它 Java 框架的类或接口</li><li>POJO 有一些 Private 的参数作为对象的属性。然后针对每个参数定义了 get 和 set 方法作为访问的接口，POJO 对象有时也被称为 Data 对象，大量应用于表现现实中的对象</li><li>一个 POJO 持久化以后就是 PO，直接用它传递、传递过程中就是 DTO，直接用来对应表示层就是 VO</li></ul><p><img src="'+n+'" alt="033"></p><h2 id="dao-data-access-object数据访问对象" tabindex="-1"><a class="header-anchor" href="#dao-data-access-object数据访问对象" aria-hidden="true">#</a> DAO(Data Access Object数据访问对象)</h2><ul><li>这个大家最熟悉，和上面几个O区别最大，基本没有互相转化的可能性和必要。主要用来封装对数据库的访问，通过它可以把POJO持久化为PO，用PO组装出来VO、DTO</li></ul><h2 id="controller-控制层" tabindex="-1"><a class="header-anchor" href="#controller-控制层" aria-hidden="true">#</a> Controller(控制层)</h2><ul><li>控制层主要由<code>Action / Servlet</code>等构成（目前Spring MVC则是通过@Controller标签使用），这一层是业务层与视图层打交道的中间层，负责传输VO对象和调用BO层的业务方法，负责视图层请求的数据处理后响应给视图层</li></ul><h2 id="view-视图层" tabindex="-1"><a class="header-anchor" href="#view-视图层" aria-hidden="true">#</a> View(视图层)</h2><ul><li>主要是指由JSP、HTML等文件形成的显示层</li></ul><h2 id="上述名词在实际项目的应用举例" tabindex="-1"><a class="header-anchor" href="#上述名词在实际项目的应用举例" aria-hidden="true">#</a> 上述名词在实际项目的应用举例</h2><p><code>控制层</code>( controller-action )，<code>业务层/服务层</code>( bo-manager )，<code>实体层</code>( po-entity )，<code>数据访问</code>( dao )，<code>视图对象</code>( Vo-本项目省略 )，<code>视图层</code>( view-jsp/html )</p><p><img src="'+t+'" alt="034"></p><h2 id="总结一下" tabindex="-1"><a class="header-anchor" href="#总结一下" aria-hidden="true">#</a> 总结一下</h2><p>使用具体的 XO 需要看具体的环境以及项目的架构，在不同的层、不同的应用场合，对象的身份也不一样，而且对象身份的转化也是很自然的。就像家庭里丈夫对于妻子来说就是老公，对孩子来说就是父亲。</p><p>设计这些概念的初衷不是为了唬人，而是为了更好的理解和处理各种逻辑，让大家能更好地使用面向对象的方式来处理问题</p><p>在平时开发项目中应当尽量避免过度设计各层，因为这样会带来大量的工作和不必要的重复工作。如果不是大型系统需要，则应该简化一些层，因为技术始终是要为应用服务的</p>',26);function O(u,p){return o(),d("div",null,[s,r(" more "),h])}const _=i(l,[["render",O],["__file","J2EEkaifakaifazhongPO_BO_VO_DTO_POJO_DAOdegainianjiqizuoyong.html.vue"]]);export{_ as default};
