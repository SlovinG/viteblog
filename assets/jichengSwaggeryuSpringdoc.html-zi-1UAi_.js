import{_ as n,o as s,c as a,a as t,f as p}from"./app-GYMnAgnr.js";const e="/viteblog/assets/QQ截图20230825201448-Pwbd_ppg.png",o="/viteblog/assets/a58bf8cea4104a8283d83f3d65ebae28-DWbcZnJO.png",c="/viteblog/assets/QQ截图20230825204802-3nLuYgsD.png",i="/viteblog/assets/QQ截图20230825210401-5rVZMl5r.png",l={},u=p(`<h2 id="swagger-简介" tabindex="-1"><a class="header-anchor" href="#swagger-简介" aria-hidden="true">#</a> Swagger 简介</h2><p>Spring boot是目前非常流行的微服务框架，我们很多情况下使用它来提供 Rest API。而对于 Rest API 来说很重要的一部分内容就是 API 文档，Swagger 为我们提供了一套通过代码和注解自动生成我文档的方法，这一点对于保证 API 文档的及时性将有很大的帮助。</p><p>Swagger是一套基于 OpenAPI 规范构建的开源工具，可以帮助我们设计、构建、记录以及使用 Rest API。</p><h2 id="为什么要使用-swagger" tabindex="-1"><a class="header-anchor" href="#为什么要使用-swagger" aria-hidden="true">#</a> 为什么要使用 Swagger</h2><p>当下很多公司都采用前后端分离的开发模式，前端和后端的工作由不同的工程师完成。在这种开发模式下，维持一份及时更新且完整的 Rest API 文档将会极大的提高我们的工作效率。传统意义上的文档都是由后端开发人员手动编写的，但是这种方式很难保证文档的及时性和完整性，这种文档久而久之也就会失去其参考意义，反而还会加大我们沟通的成本。而 Swagger 给我们提供了一个全新的维护 API 文档的方式，下面我们来了解一下它的优点：</p><ul><li>代码变，文档变。只需要少量注解，Swagger 就会根据代码自动生成 API 文档，很好的保证了文档的时效性。</li><li>跨语言性，支持四十多种语言。</li><li>Swagger UI 呈现出来的是一份可交互是的API文档，我们可以直接在API页面尝试API的调用，省去了准备复杂调用参数的过程。</li><li>还可以将文档规范导入相关的工具(例如SoapUI)，这些工具将会为我们自动的创建自动化测试。</li></ul><h2 id="概念补充" tabindex="-1"><a class="header-anchor" href="#概念补充" aria-hidden="true">#</a> 概念补充</h2><ul><li><strong>OpenAPI</strong>：是一个组织（OpenAPI Initiative），他们制定了一个如何描述 HTTP API 的规范（OpenAPI Specification）。既然是规范，那么谁想实现都可以，只要符合规范即可。</li><li><strong>Swagger</strong>：是 SmartBear 公司的一个开源项目，里面提供了一系列工具，包括著名的 swagger-ui。swagger 是早于 OpenApi 的，某一天 swagger 将自己的 API 设计贡献给了 OpenApi，然后由其标准化了。</li><li><strong>Springfox</strong>：是Spring生态的一个开源库，是 Swagger 与 OpenApi 规范的具体实现。我们使用它就可以在 Spring 中生成 API 文档。以前基本上是行业标准，目前最新版本可以支持 Swagger2、Swagger3 以及 OpenAPI3 三种格式。但是其从 2020 年 7 月 14 号就不再更新了，不支持 Springboot3，所以业界开始转向我们今天要谈论的另一个库 Springdoc。</li><li><strong>Springdoc</strong>：后起之秀，带着继任 Springfox 的使命而来。其支持OpenApi规范，支持 Springboot3，新项目都应该使用这个。</li></ul><h2 id="springboot-集成-springdoc" tabindex="-1"><a class="header-anchor" href="#springboot-集成-springdoc" aria-hidden="true">#</a> SpringBoot 集成 Springdoc</h2><h3 id="准备一个-web-项目" tabindex="-1"><a class="header-anchor" href="#准备一个-web-项目" aria-hidden="true">#</a> 准备一个 web 项目</h3><ol><li><p>添加 web 依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>编写 api 接口</p><ul><li><p>首先我们创建三个包 controller、testController、model</p></li><li><p>在 controller 包中创建 UserController 类，在 testControoler 包中创建 TestController 类，在 model 包下创建 User 类</p></li><li><p>UserController 提供了用户的增、删、改、查四个接口，TestController 提供了一个测试接口</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/user&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/add&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/find/{id}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">findById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@PutMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/update&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/delete/{id}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/test&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/test&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ol><h3 id="添加-springdoc-依赖" tabindex="-1"><a class="header-anchor" href="#添加-springdoc-依赖" aria-hidden="true">#</a> 添加 Springdoc 依赖</h3><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springdoc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>springdoc-openapi-starter-webmvc-ui<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行项目后访问下面的链接即可：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>http://server:port/context-path/swagger-ui.html 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例如：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>http://localhost:8080/swagger-ui.html 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>效果：</p><p><img src="`+e+`" alt=""></p><p>可以看到已经有了基本的接口展示列表，但是对于接口的信息描述还不是特别清楚，接下来我们通过一些高级配置，让这份文档变得更加易读。</p><h3 id="配置文档信息" tabindex="-1"><a class="header-anchor" href="#配置文档信息" aria-hidden="true">#</a> 配置文档信息</h3><p>Springdoc 提供了一个OpenAPI对象，我们可以通过这个对象来灵活地配置 Swagger 的各项属性，比如配置文档名称等，下面我们在 config 包下新建一个 SpringDocConfig 配置类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringDocConfig</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">OpenAPI</span> <span class="token function">myOpenAPI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">OpenAPI</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Info</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">&quot;程序员API&quot;</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">&quot;程序员的大本营&quot;</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token string">&quot;v1.0.0&quot;</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">license</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">License</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                                <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">&quot;许可协议&quot;</span><span class="token punctuation">)</span>
                                <span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">&quot;https://shusheng007.top&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">contact</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Contact</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                                <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">&quot;书生007&quot;</span><span class="token punctuation">)</span>
                                <span class="token punctuation">.</span><span class="token function">email</span><span class="token punctuation">(</span><span class="token string">&quot;wangben850115@gmail.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">externalDocs</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ExternalDocumentation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">&quot;ShuSheng007博客&quot;</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">&quot;https://shusheng007.top&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="配置文档分组和扫描接口" tabindex="-1"><a class="header-anchor" href="#配置文档分组和扫描接口" aria-hidden="true">#</a> 配置文档分组和扫描接口</h3><p>假如你有两类 controller，一类以 <code>/api</code> 为前缀，一类以 <code>/admin</code> 为前缀，就可以将其配置为两个分组</p><p>很多时候我们只有一个分组，如果没有配置分组，默认是 default</p><p><strong>分组是因为，工作中不同的模块往往对应着不同的开发小组</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringDocConfig</span> <span class="token punctuation">{</span>
   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">GroupedOpenApi</span> <span class="token function">publicApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">return</span> <span class="token class-name">GroupedOpenApi</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
           <span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token string">&quot;api&quot;</span><span class="token punctuation">)</span>
           <span class="token punctuation">.</span><span class="token function">displayName</span><span class="token punctuation">(</span><span class="token string">&quot;api&quot;</span><span class="token punctuation">)</span>
           <span class="token punctuation">.</span><span class="token function">packagesToScan</span><span class="token punctuation">(</span><span class="token string">&quot;com.ujcms.cms.core.web.api&quot;</span><span class="token punctuation">)</span>
           <span class="token punctuation">.</span><span class="token function">pathsToMatch</span><span class="token punctuation">(</span><span class="token string">&quot;/api/**&quot;</span><span class="token punctuation">)</span>
           <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">GroupedOpenApi</span> <span class="token function">adminApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">GroupedOpenApi</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">displayName</span><span class="token punctuation">(</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">packagesToScan</span><span class="token punctuation">(</span><span class="token string">&quot;com.ujcms.cms.core.web.admin&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">pathsToMatch</span><span class="token punctuation">(</span><span class="token string">&quot;/admin/**&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可在配置文件中设置分组：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">springdoc.group-configs</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">group</span><span class="token punctuation">:</span> api
    <span class="token key atrule">displayName</span><span class="token punctuation">:</span> api
    <span class="token key atrule">packagesToScan</span><span class="token punctuation">:</span> com.ujcms.cms.core.web.api
    <span class="token key atrule">pathsToMatch</span><span class="token punctuation">:</span> /api/<span class="token important">**</span>
  <span class="token punctuation">-</span> <span class="token key atrule">group</span><span class="token punctuation">:</span> admin
    <span class="token key atrule">displayName</span><span class="token punctuation">:</span> admin
    <span class="token key atrule">packagesToScan</span><span class="token punctuation">:</span> com.ujcms.cms.core.web.admin
    <span class="token key atrule">pathsToMatch</span><span class="token punctuation">:</span> /admin/<span class="token important">**</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以通过右上角的下拉框选择要展示的 group，效果：</p><p><img src="`+o+`" alt=""></p><h3 id="常用注解" tabindex="-1"><a class="header-anchor" href="#常用注解" aria-hidden="true">#</a> 常用注解</h3><p>OpenApi 规范提供了很多注解，下面是一些常用的：</p><table><thead><tr><th>注解</th><th>含义</th></tr></thead><tbody><tr><td>@Tag</td><td>用在控制器类上，描述此控制器的信息</td></tr><tr><td>@Operation</td><td>用在控制器类的方法里，描述此 api 的信息</td></tr><tr><td>@Parameter</td><td>用在控制器类的方法里的参数上，描述参数信息</td></tr><tr><td>@Parameters</td><td>用在控制器类的方法里的参数上</td></tr><tr><td>@Schema</td><td>用于实体类，以及实体类的属性上</td></tr><tr><td>@ApiResponse</td><td>用在控制器类的方法的返回值上</td></tr><tr><td>@ApiResponses</td><td>用在控制器类的方法的返回值上</td></tr><tr><td>@Hidden</td><td>用在各种地方，用于隐藏该 api</td></tr></tbody></table><p>通过在 <strong>控制器类</strong> 上添加 <code>@Tag</code> 注解，可以给控制器增加 <strong>标签</strong> 和 <strong>描述信息</strong>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Tag</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;用户相关接口&quot;</span><span class="token punctuation">,</span> description <span class="token operator">=</span> <span class="token string">&quot;提供用户相关的 Rest API&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span><span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过在 <strong>接口方法</strong> 上添加 <code>@Operation</code> 注解来展开对接口的描述，当然这个注解还可以指定很多内容。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Operation</span><span class="token punctuation">(</span><span class="token string">&quot;新增用户接口&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/add&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>注解属性</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>summary</td><td>String</td><td>接口的简要说明</td></tr><tr><td>description</td><td>String</td><td>接口的详细描述</td></tr><tr><td>tags</td><td>String[]</td><td>标签列表，可用于按资源或任何其他限定符对接口进行逻辑分组</td></tr><tr><td>responses</td><td>Class&lt;?&gt;</td><td>接口的返回类型</td></tr><tr><td>method</td><td>String</td><td>接口的请求方式</td></tr></tbody></table><p>通过在 <strong>实体类及其属性</strong> 上添加 <code>@Schema</code> 注解来对我们的 API 所涉及到的对象做描述。</p><p>同时，Springdoc 还支持 Java Bean Validation API 的注解，例如 <code>@NotNull</code> 等：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Schema</span><span class="token punctuation">(</span><span class="token string">&quot;用户实体&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Schema</span><span class="token punctuation">(</span><span class="token string">&quot;用户 id&quot;</span><span class="token punctuation">,</span> example <span class="token operator">=</span> <span class="token string">&quot;10001&quot;</span><span class="token punctuation">)</span>  
    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>
    
    <span class="token annotation punctuation">@NotNull</span>
    <span class="token annotation punctuation">@Schema</span><span class="token punctuation">(</span>description <span class="token operator">=</span> <span class="token string">&quot;名称&quot;</span><span class="token punctuation">,</span> example <span class="token operator">=</span> <span class="token string">&quot;王二狗&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    
    <span class="token annotation punctuation">@NotNull</span>
    <span class="token annotation punctuation">@Min</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Max</span><span class="token punctuation">(</span><span class="token number">35</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Schema</span><span class="token punctuation">(</span>description <span class="token operator">=</span> <span class="token string">&quot;年龄&quot;</span><span class="token punctuation">,</span> example <span class="token operator">=</span> <span class="token string">&quot;35&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>
    
    <span class="token annotation punctuation">@Schema</span><span class="token punctuation">(</span>description <span class="token operator">=</span> <span class="token string">&quot;掌握的编程语言&quot;</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token string">&quot;List&quot;</span><span class="token punctuation">,</span> example <span class="token operator">=</span> <span class="token string">&quot;[\\&quot;Java\\&quot;,\\&quot;Sql\\&quot;]&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> programmingLang<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>效果：</p><p><img src="`+c+`" alt=""></p><p>注意红框中的内容，name 和 age 右上角都有出现了一个红色的星星，表示是必填的，age也被限制了范围。</p><p>通过在 <strong>接口方法的参数列表里</strong> 添加 <code>@Parameter</code> 注解来描述接口的参数信息：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/{id}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Parameter</span><span class="token punctuation">(</span>description <span class="token operator">=</span> <span class="token string">&quot;用户id&quot;</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>@Parameters</code>与<code>@Parameter</code>作用一样，但是可以批量添加，不用一个一个的写在参数前面：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Parameters</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Parameter</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> description <span class="token operator">=</span> <span class="token string">&quot;姓名&quot;</span><span class="token punctuation">,</span> in <span class="token operator">=</span> <span class="token class-name">ParameterIn</span><span class="token punctuation">.</span><span class="token constant">PATH</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token annotation punctuation">@Parameter</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> description <span class="token operator">=</span> <span class="token string">&quot;年龄&quot;</span><span class="token punctuation">,</span> in <span class="token operator">=</span> <span class="token class-name">ParameterIn</span><span class="token punctuation">.</span><span class="token constant">QUERY</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/{name}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">getUsers</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>@parameters</code> 里的 <code>@parameter</code> 使用 name 来找到方法中的入参，这块要对应上。</p><p><code>@ApiResponses</code> 和 <code>@ApiResponse</code> 则用来描述返回值的注解：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@ApiResponses</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@ApiResponse</span><span class="token punctuation">(</span>responseCode <span class="token operator">=</span> <span class="token string">&quot;200&quot;</span><span class="token punctuation">,</span> 
                 description <span class="token operator">=</span> <span class="token string">&quot;成功&quot;</span><span class="token punctuation">,</span>
                 content <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Content</span><span class="token punctuation">(</span>mediaType <span class="token operator">=</span> <span class="token string">&quot;application/json&quot;</span><span class="token punctuation">,</span>schema <span class="token operator">=</span> <span class="token annotation punctuation">@Schema</span><span class="token punctuation">(</span>implementation <span class="token operator">=</span> <span class="token class-name">Programmer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token annotation punctuation">@ApiResponse</span><span class="token punctuation">(</span>responseCode <span class="token operator">=</span> <span class="token string">&quot;405&quot;</span><span class="token punctuation">,</span>
                 description <span class="token operator">=</span> <span class="token string">&quot;非法输入&quot;</span><span class="token punctuation">,</span>
                 content <span class="token operator">=</span> <span class="token annotation punctuation">@Content</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">createUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">CreateUserRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们成功配置了两种情况的返回值。但是我们一般不会手动给每个 API 写上一堆 <code> @ApiResponse</code>，那得多烦啊。</p><p>所以一般我们的项目里面都会有一个 <strong>统一的返回类型</strong> 和 <strong>全局的异常处理类</strong>。</p><p>因此，只要我们使用 <code>@ResponseStatus</code> 来标记对应的异常处理方法，而不用在接口上标注 <code>@ApiResponses</code> 和 <code>@ApiResponse</code> 注解，Springdoc 会自动生成相应的文档：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestControllerAdvice</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionHandler</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@ResponseStatus</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">INTERNAL_SERVER_ERROR</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">handleException</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> httpServletRequest<span class="token punctuation">,</span> <span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token class-name">StatusCode</span><span class="token punctuation">.</span><span class="token constant">FAILED</span><span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">StatusCode</span><span class="token punctuation">.</span><span class="token constant">FAILED</span><span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">ApiException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@ResponseStatus</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">BAD_REQUEST</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">handleBusinessException</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> httpServletRequest<span class="token punctuation">,</span> <span class="token class-name">ApiException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>效果：</p><p><img src="`+i+'" alt=""></p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>相较于传统的 Postman 或 Curl 方式测试接口，使用 swagger 简直就是傻瓜式操作，不需要额外说明文档（写得好本身就是文档）而且更不容易出错，只需要录入数据然后点击 Execute，如果再配合自动化框架，可以说基本就不需要人为操作了。</p><p>Swagger 是个优秀的工具，现在国内已经有很多的中小型互联网公司都在使用它，相较于传统的要先出 Word 接口文档再测试的方式，显然这样也更符合现在的快速迭代开发行情。</p><p>当然了，提醒下大家在正式环境要记得关闭 Swagger，一来出于安全考虑，二来也可以节省运行时的内存。</p>',63);function r(d,k){return s(),a("div",null,[t(" more "),u])}const m=n(l,[["render",r],["__file","jichengSwaggeryuSpringdoc.html.vue"]]);export{m as default};
