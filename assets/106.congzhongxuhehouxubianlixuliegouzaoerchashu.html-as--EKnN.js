import{_ as n,o as s,c as a,f as e}from"./app-GYMnAgnr.js";const o="/viteblog/assets/leftsum-tree-fyF8JGi9.jpg",t={},p=e('<p><strong>难度：中等</strong></p><p>给定两个整数数组 <code>inorder</code> 和 <code>postorder</code> ，其中 <code>inorder</code> 是二叉树的中序遍历， <code>postorder</code> 是同一棵树的后序遍历，请你构造并返回这颗 <em>二叉树</em> 。</p><p><strong>示例 1:</strong></p><p><img src="'+o+`" alt="img"></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：inorder = [9,3,15,20,7], postorder = [9,15,7,20,3]
输出：[3,9,20,null,null,15,7]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2:</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：inorder = [-1], postorder = [-1]
输出：[-1]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示:</strong></p><ul><li><code>1 &lt;= inorder.length &lt;= 3000</code></li><li><code>postorder.length == inorder.length</code></li><li><code>-3000 &lt;= inorder[i], postorder[i] &lt;= 3000</code></li><li><code>inorder</code> 和 <code>postorder</code> 都由 <strong>不同</strong> 的值组成</li><li><code>postorder</code> 中每一个值都在 <code>inorder</code> 中</li><li><code>inorder</code> <strong>保证</strong>是树的中序遍历</li><li><code>postorder</code> <strong>保证</strong>是树的后序遍历</li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>根据两种遍历序列，可以确定一棵二叉树。</p><p><strong>这里需要注意的是，两个序列中必须有一个中序序列才可以。</strong> 前序和后序组合无法确定一棵二叉树。</p><p>根据三种遍历方式的特性，可以知道：<strong>后序遍历中最后一个节点是树的根节点。而在中序序列中找到此节点可知：该节点左边则是根节点的左子树，右边是右子树。</strong></p><p>我们基于此理论，就可以很轻松想出本题的解题思路，但是本题的难点在于边界条件的把握。</p><p>思路概括：</p><ol><li>获取后序遍历序列的最后一个元素 A，就是当前的中间节点</li><li>从中序遍历序列中找到 A 元素，并将中序遍历序列从这里切割为 <strong>中序左序列 B</strong> 和 <strong>中序右序列 C</strong>，B 中可以获取到元素 A 的左子树，C 中可以获取到元素 A 的右子树</li><li>从后序遍历序列中从前往后，获取长度和 B 相同的序列 D，再获取长度和 C 相同的序列 E</li><li>B 和 D 配对，C 和 E 配对，递归处理。</li></ol><p>代码步骤：</p><ol><li><strong>基本情况</strong>：如果当前中序遍历的范围无效（<code>inorderEnd &lt; inorderBegin</code>），则说明子树为空，返回 <code>null</code>。</li><li><strong>根节点确定</strong>：后序遍历的最后一个元素总是当前子树的根节点。该函数首先创建根节点。</li><li><strong>寻找根节点在中序遍历中的位置</strong>：通过线性搜索中序遍历数组来找到根节点的值，确定左右子树的范围。这一步是确定左右子树的关键。</li><li><strong>计算左子树的大小</strong>：左子树的大小等于根节点在中序遍历中的位置减去中序遍历开始位置的差值。</li><li><strong>构建左子树</strong>：递归地调用 <code>build</code> 函数，使用中序遍历和后序遍历的左子树范围，构建左子树。</li><li><strong>构建右子树</strong>：同样，递归地调用 <code>build</code> 函数，使用中序遍历和后序遍历的右子树范围，构建右子树。</li></ol><h2 id="代码展示" tabindex="-1"><a class="header-anchor" href="#代码展示" aria-hidden="true">#</a> 代码展示</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">buildTree</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> inorder<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> postorder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">TreeNode</span> root <span class="token operator">=</span> <span class="token function">build</span><span class="token punctuation">(</span>inorder<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> inorder<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> postorder<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> postorder<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> root<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> inorder<span class="token punctuation">,</span> <span class="token keyword">int</span> inorderBegin<span class="token punctuation">,</span> <span class="token keyword">int</span> inorderEnd<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> postorder<span class="token punctuation">,</span> <span class="token keyword">int</span> postorderBegin<span class="token punctuation">,</span> <span class="token keyword">int</span> postorderEnd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 当前树为空</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>inorderEnd <span class="token operator">&lt;</span> inorderBegin<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 根节点总是后序遍历的最后一个元素</span>
    <span class="token keyword">int</span> rootValue <span class="token operator">=</span> postorder<span class="token punctuation">[</span>postorderEnd<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// 创建根节点</span>
    <span class="token class-name">TreeNode</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>rootValue<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 在中序遍历中找到根节点的位置，确定左右子树的范围</span>
    <span class="token keyword">int</span> rootIndexInOrder <span class="token operator">=</span> inorderBegin<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>inorder<span class="token punctuation">[</span>rootIndexInOrder<span class="token punctuation">]</span> <span class="token operator">!=</span> rootValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        rootIndexInOrder<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 计算左子树的大小</span>
    <span class="token keyword">int</span> leftTreeSize <span class="token operator">=</span> rootIndexInOrder <span class="token operator">-</span> inorderBegin<span class="token punctuation">;</span>

    <span class="token comment">// 递归构建左子树和右子树</span>
    <span class="token comment">// 左子树的后序遍历结束位置可以通过左子树大小加上后序遍历的开始位置计算得到</span>
    root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">build</span><span class="token punctuation">(</span>inorder<span class="token punctuation">,</span> inorderBegin<span class="token punctuation">,</span> rootIndexInOrder <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> postorder<span class="token punctuation">,</span> postorderBegin<span class="token punctuation">,</span> postorderBegin <span class="token operator">+</span> leftTreeSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 右子树的后序遍历开始位置同理</span>
    root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">build</span><span class="token punctuation">(</span>inorder<span class="token punctuation">,</span> rootIndexInOrder <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> inorderEnd<span class="token punctuation">,</span> postorder<span class="token punctuation">,</span> postorderBegin <span class="token operator">+</span> leftTreeSize<span class="token punctuation">,</span> postorderEnd <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> root<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>时间复杂度：O(n^2)，最坏情况下，对于每个节点，都需要在中序遍历数组中进行一次线性搜索来找到根节点，这导致了 O(n) 的搜索时间复杂度。由于这个搜索过程对于树中的每个节点都要执行一次，总的时间复杂度为 O(n^2)。</p><p>空间复杂度：O(n)，主要消耗在递归调用栈上。在最坏的情况下，这个栈的深度与树的高度相同。对于平衡二叉树，高度大约为logn，因此空间复杂度为O(logn)。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>递归的边界条件需要细心处理。</p><p>为了优化时间复杂度，可以先将中序遍历的数组值和索引映射关系存储在一个哈希表中，这样在查找根节点在中序遍历中的位置时，可以将时间复杂度从 O(n) 降低到 O(1)。这样总的时间复杂度就可以降低到 O(n)，其中 N 是树中的节点数。</p>`,25),c=[p];function i(l,r){return s(),a("div",null,c)}const u=n(t,[["render",i],["__file","106.congzhongxuhehouxubianlixuliegouzaoerchashu.html.vue"]]);export{u as default};
