import{_ as n,o as s,c as a,a as e,f as p}from"./app-GYMnAgnr.js";const t={},o=p(`<p><strong>难度：简单</strong></p><p>编写一个算法来判断一个数 <code>n</code> 是不是快乐数。</p><p><strong>「快乐数」</strong> 定义为：</p><ul><li>对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和。</li><li>然后重复这个过程直到这个数变为 1，也可能是 <strong>无限循环</strong> 但始终变不到 1。</li><li>如果这个过程 <strong>结果为</strong> 1，那么这个数就是快乐数。</li></ul><p>如果 <code>n</code> 是 <em>快乐数</em> 就返回 <code>true</code> ；不是，则返回 <code>false</code> 。</p><p><strong>示例 1：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：n = 19
输出：true
解释：
1^(2) + 9^(2) = 82
8^(2) + 2^(2) = 68
6^(2) + 8^(2) = 100
1^(2) + 0^(2) + 0^(2) = 1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：n = 2
输出：false
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 2^(31) - 1</code></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>使用哈希集合，来判断这个 <strong>求和的结果</strong> 是否重复出现，如果重复了就是返回 false， 否则就一直找，直到求和的结果为 1</p><p><strong>还有一个难点就是求和的过程，需要熟悉取一个数各个位上的值的操作</strong></p><h2 id="我的代码-哈希集合" tabindex="-1"><a class="header-anchor" href="#我的代码-哈希集合" aria-hidden="true">#</a> 我的代码（哈希集合）</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isHappy</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 使用HashSet来记录所有出现过的数字</span>
    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> record <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 当n不为1且n没有在之前出现过</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>record<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        record<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token comment">// 计算n的每一位数字的平方和</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> temp <span class="token operator">=</span> n <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">// 获取n的最后一位数字</span>
            res <span class="token operator">+=</span> temp <span class="token operator">*</span> temp<span class="token punctuation">;</span><span class="token comment">// 计算这个数字的平方并加到res中</span>
            n <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">// 移除n的最后一位数字</span>
        <span class="token punctuation">}</span>
        n <span class="token operator">=</span> res<span class="token punctuation">;</span><span class="token comment">// 更新n为其每位数的平方和</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 如果循环结束时n为1，则是快乐数，否则不是</span>
    <span class="token keyword">return</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>时间复杂度: O(logn)</p><p>空间复杂度: O(logn)</p><h2 id="快慢指针法" tabindex="-1"><a class="header-anchor" href="#快慢指针法" aria-hidden="true">#</a> 快慢指针法</h2><h3 id="思路概述" tabindex="-1"><a class="header-anchor" href="#思路概述" aria-hidden="true">#</a> 思路概述</h3><p>上述算法中，通过反复对 res 进行求值，我们得到了 record 哈希集合，如果令此集合有序的话，不难看出此集合是一个隐式的链表。</p><p>隐式意味着我们虽然没有实际的链表节点和指针，但数据仍然形成了链表结构。</p><p>那么这个问题就转换为了：<strong>检测一个链表是否有环</strong>。</p><p>因此我们在这里可以使用 <strong>快慢指针法</strong>。</p><p>仿照 142 题的做法，我们使用两个指针，慢指针每步走一个节点，快指针每步走两个节点。</p><p>如果 n 是一个快乐数，说明链表无环，那么两个指针只存在一种相遇的情况：两个指针最后都指向数字 1，且一直停留在 1。</p><p>如果 n 不是一个快乐数，说明链表有环，那么当两个指针无论何时相遇，两个指针都不会指向 1。</p><h3 id="代码展示" tabindex="-1"><a class="header-anchor" href="#代码展示" aria-hidden="true">#</a> 代码展示</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isHappy</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 使用快慢指针检测数字序列中的循环</span>
    <span class="token keyword">int</span> slow <span class="token operator">=</span> n<span class="token punctuation">;</span>
    <span class="token keyword">int</span> fast <span class="token operator">=</span> <span class="token function">getNext</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>slow <span class="token operator">!=</span> fast<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        slow <span class="token operator">=</span> <span class="token function">getNext</span><span class="token punctuation">(</span>slow<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 慢指针每次移动一步</span>
        fast <span class="token operator">=</span> <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token function">getNext</span><span class="token punctuation">(</span>fast<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 快指针每次移动两步</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 如果快指针到达1，则为快乐数</span>
    <span class="token keyword">return</span> fast <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> temp <span class="token operator">=</span> n <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>
        res <span class="token operator">+=</span> temp <span class="token operator">*</span> temp<span class="token punctuation">;</span> <span class="token comment">// 计算每位数字的平方和</span>
        n <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>时间复杂度: O(logn)</p><p>空间复杂度: O(1)</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>遇到环形链表问题就使用快慢指针法，要形成一种条件反射。</p>`,33);function c(l,i){return s(),a("div",null,[e(" more "),o])}const u=n(t,[["render",c],["__file","202.kuaileshu.html.vue"]]);export{u as default};
