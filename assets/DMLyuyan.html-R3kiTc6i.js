import{_ as a,o as e,c as p,a as t,b as n,d as s,f as o}from"./app-GYMnAgnr.js";const c="/viteblog/assets/201-9EjnHssO.png",l="/viteblog/assets/233-9eXIx-dY.png",i={},u=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[s("数据操作语言（"),n("strong",null,"DML：Data Manipulation Language"),s("）：其语句包括动词INSERT、UPDATE和DELETE。它们分别用于添加、修改和删除")])],-1),d=o('<h2 id="一、外键" tabindex="-1"><a class="header-anchor" href="#一、外键" aria-hidden="true">#</a> 一、外键</h2><h3 id="_1、外键概念" tabindex="-1"><a class="header-anchor" href="#_1、外键概念" aria-hidden="true">#</a> 1、外键概念</h3><p>如果公共关键字在一个关系中是主关键字，那么这个公共关键字被称为另一个关系的外键。由此可见，外键表示了两个关系之间的相关联系。以另一个关系的外键作主关键字的表被称为<strong>主表</strong>，具有此外键的表被称为主表的<strong>从表</strong></p><p>在实际操作中，将一个表的值放入第二个表来表示关联，所使用的值是第一个表的主键值(在必要时可包括复合主键值)。此时，第二个表中保存这些值的属性称为外键(<strong>foreign key</strong>)。</p><h3 id="_2、外键作用" tabindex="-1"><a class="header-anchor" href="#_2、外键作用" aria-hidden="true">#</a> 2、外键作用</h3><p>保持数据<strong>一致性</strong>，<strong>完整性</strong>，主要目的是控制存储在外键表中的数据,<strong>约束</strong>。使两张表形成关联，外键只能引用外表中的列的值或使用空值。</p><h3 id="_3、创建外键" tabindex="-1"><a class="header-anchor" href="#_3、创建外键" aria-hidden="true">#</a> 3、创建外键</h3><p>建表时指定外键约束</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 创建外键的方式一 : 创建子表同时创建外键</span>\n\n<span class="token comment">-- 年级表 (id\\年级名称)</span>\n<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>grade<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>\n<span class="token identifier"><span class="token punctuation">`</span>gradeid<span class="token punctuation">`</span></span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;年级ID&#39;</span><span class="token punctuation">,</span>\n<span class="token identifier"><span class="token punctuation">`</span>gradename<span class="token punctuation">`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;年级名称&#39;</span><span class="token punctuation">,</span>\n<span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>gradeid<span class="token punctuation">`</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8\n\n<span class="token comment">-- 学生信息表 (学号,姓名,性别,年级,手机,地址,出生日期,邮箱,身份证号)</span>\n<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>student<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>\n<span class="token identifier"><span class="token punctuation">`</span>studentno<span class="token punctuation">`</span></span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;学号&#39;</span><span class="token punctuation">,</span>\n<span class="token identifier"><span class="token punctuation">`</span>studentname<span class="token punctuation">`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;匿名&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;姓名&#39;</span><span class="token punctuation">,</span>\n<span class="token identifier"><span class="token punctuation">`</span>sex<span class="token punctuation">`</span></span> <span class="token keyword">TINYINT</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;1&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;性别&#39;</span><span class="token punctuation">,</span>\n<span class="token identifier"><span class="token punctuation">`</span>gradeid<span class="token punctuation">`</span></span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;年级&#39;</span><span class="token punctuation">,</span>\n<span class="token identifier"><span class="token punctuation">`</span>phoneNum<span class="token punctuation">`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;手机&#39;</span><span class="token punctuation">,</span>\n<span class="token identifier"><span class="token punctuation">`</span>address<span class="token punctuation">`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;地址&#39;</span><span class="token punctuation">,</span>\n<span class="token identifier"><span class="token punctuation">`</span>borndate<span class="token punctuation">`</span></span> <span class="token keyword">DATETIME</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;生日&#39;</span><span class="token punctuation">,</span>\n<span class="token identifier"><span class="token punctuation">`</span>email<span class="token punctuation">`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;邮箱&#39;</span><span class="token punctuation">,</span>\n<span class="token identifier"><span class="token punctuation">`</span>idCard<span class="token punctuation">`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;身份证号&#39;</span><span class="token punctuation">,</span>\n<span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>studentno<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>FK_gradeid<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>gradeid<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token keyword">CONSTRAINT</span> <span class="token identifier"><span class="token punctuation">`</span>FK_gradeid<span class="token punctuation">`</span></span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>gradeid<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> <span class="token identifier"><span class="token punctuation">`</span>grade<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>gradeid<span class="token punctuation">`</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>建表后修改</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 创建外键方式二 : 创建子表完毕后,修改子表添加外键</span>\n<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>student<span class="token punctuation">`</span></span>\n<span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> <span class="token identifier"><span class="token punctuation">`</span>FK_gradeid<span class="token punctuation">`</span></span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>gradeid<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> <span class="token identifier"><span class="token punctuation">`</span>grade<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>gradeid<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4、删除外键" tabindex="-1"><a class="header-anchor" href="#_4、删除外键" aria-hidden="true">#</a> 4、删除外键</h3><p>操作：删除 grade 表，发现报错</p><img src="'+c+`" style="zoom:50%;"><p><strong>注意</strong>：删除具有主外键关系的表时，要先删子表，后删主表</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 删除外键</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> student <span class="token keyword">DROP</span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> FK_gradeid<span class="token punctuation">;</span>
<span class="token comment">-- 发现执行完上面的,索引还在,所以还要删除索引</span>
<span class="token comment">-- 注:这个索引是建立外键的时候默认生成的</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> student <span class="token keyword">DROP</span> <span class="token keyword">INDEX</span> FK_gradeid<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、dml语言" tabindex="-1"><a class="header-anchor" href="#二、dml语言" aria-hidden="true">#</a> 二、DML语言</h2><p><strong>数据库意义</strong> ： 数据存储、数据管理</p><p><strong>管理数据库数据的方法：</strong></p><ul><li>通过 SQLyog 等管理工具管理数据库数据</li><li>通过<strong>DML语句</strong>管理数据库数据</li></ul><p><strong>DML语言</strong> ：数据操作语言</p><ul><li><p>用于操作数据库对象中所包含的数据</p></li><li><p>包括 :</p><ul><li><p>INSERT (添加数据语句)</p></li><li><p>UPDATE (更新数据语句)</p></li><li><p>DELETE (删除数据语句)</p></li></ul></li></ul><h2 id="三、添加数据" tabindex="-1"><a class="header-anchor" href="#三、添加数据" aria-hidden="true">#</a> 三、添加数据</h2><h3 id="_1、insert命令" tabindex="-1"><a class="header-anchor" href="#_1、insert命令" aria-hidden="true">#</a> 1、INSERT命令</h3><p><strong>语法：</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> 表名<span class="token punctuation">[</span><span class="token punctuation">(</span>字段<span class="token number">1</span><span class="token punctuation">,</span>字段<span class="token number">2</span><span class="token punctuation">,</span>字段<span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;值1&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;值2&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;值3&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>注意 :</strong></p><ul><li>字段或值之间用英文逗号隔开</li><li><strong>&#39; 字段1,字段2...&#39;</strong> 该部分可省略 , 但添加的值务必与表结构，数据列，顺序相对应，且数量一致</li><li>可同时插入多条数据 , values 后用英文逗号隔开</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 使用语句如何增加语句?</span>
<span class="token comment">-- 语法 : INSERT INTO 表名[(字段1,字段2,字段3,...)] VALUES(&#39;值1&#39;,&#39;值2&#39;,&#39;值3&#39;)</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> grade<span class="token punctuation">(</span>gradename<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;大一&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 主键自增,那能否省略呢?</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> grade <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;大二&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 查询:INSERT INTO grade VALUE (&#39;大二&#39;)错误代码：1136</span>
<span class="token keyword">Column</span> count doesn<span class="token punctuation">\`</span>t <span class="token keyword">match</span> <span class="token keyword">value</span> count at <span class="token keyword">row</span> <span class="token number">1</span>

<span class="token comment">-- 结论:&#39;字段1,字段2...&#39;该部分可省略,但添加的值务必与表结构,数据列,顺序相对应,且数量一致.</span>

<span class="token comment">-- 一次插入多条数据</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> grade<span class="token punctuation">(</span>gradename<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;大三&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">&#39;大四&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四、修改数据" tabindex="-1"><a class="header-anchor" href="#四、修改数据" aria-hidden="true">#</a> 四、修改数据</h2><h3 id="_1、update命令" tabindex="-1"><a class="header-anchor" href="#_1、update命令" aria-hidden="true">#</a> 1、update命令</h3><p>语法：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">UPDATE</span> 表名 <span class="token keyword">SET</span> column_name<span class="token operator">=</span><span class="token keyword">value</span> <span class="token punctuation">[</span><span class="token punctuation">,</span>column_name2<span class="token operator">=</span>value2<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">WHERE</span> condition<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>注意 :</strong></p><ul><li>column_name 为要更改的数据列</li><li>value 为修改后的数据，可以为变量、具体值、表达式或者嵌套的 SELECT 结果</li><li>condition 为筛选条件，如不指定则修改该表的 <strong>所有列数据</strong></li></ul><h3 id="_2、where条件子句" tabindex="-1"><a class="header-anchor" href="#_2、where条件子句" aria-hidden="true">#</a> 2、where条件子句</h3><p>可以简单的理解为：有条件地从表中筛选数据</p><p><img src="`+l+`" alt=""></p><p>测试：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 修改年级信息</span>
<span class="token keyword">UPDATE</span> grade <span class="token keyword">SET</span> gradename <span class="token operator">=</span> <span class="token string">&#39;高中&#39;</span> <span class="token keyword">WHERE</span> gradeid <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="五、删除数据" tabindex="-1"><a class="header-anchor" href="#五、删除数据" aria-hidden="true">#</a> 五、删除数据</h2><h3 id="_1、delete命令" tabindex="-1"><a class="header-anchor" href="#_1、delete命令" aria-hidden="true">#</a> 1、DELETE命令</h3><p>语法：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> 表名 <span class="token punctuation">[</span><span class="token keyword">WHERE</span> condition<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意：condition为筛选条件 , 如不指定则删除该表的所有列数据</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 删除最后一个数据</span>
<span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> grade <span class="token keyword">WHERE</span> gradeid <span class="token operator">=</span> <span class="token number">5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、truncate命令" tabindex="-1"><a class="header-anchor" href="#_2、truncate命令" aria-hidden="true">#</a> 2、TRUNCATE命令</h3><p>作用：用于完全清空表数据 , 但表结构、索引 、约束等不变 ;</p><p>语法：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">TRUNCATE</span> <span class="token punctuation">[</span><span class="token keyword">TABLE</span><span class="token punctuation">]</span> table_name<span class="token punctuation">;</span>

<span class="token comment">-- 清空年级表</span>
<span class="token keyword">TRUNCATE</span> grade
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意：区别于DELETE命令</strong></p><ul><li><p>相同：都能删除数据，不删除表结构，但TRUNCATE速度更快</p></li><li><p>不同：</p><ul><li><p>使用 <code>TRUNCATE TABLE</code> 会重新设置 <code>AUTO_INCREMENT</code> 计数器</p></li><li><p>使用 <code>TRUNCATE TABLE</code> 不会对事务有影响</p></li></ul></li></ul><p>测试：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 创建一个测试表</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>test<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span>
<span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>
<span class="token identifier"><span class="token punctuation">\`</span>coll<span class="token punctuation">\`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
<span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8

<span class="token comment">-- 插入几个测试数据</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test<span class="token punctuation">(</span>coll<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;row1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">&#39;row2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">&#39;row3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 删除表数据(不带where条件的delete)</span>
<span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> test<span class="token punctuation">;</span>
<span class="token comment">-- 结论:如不指定Where则删除该表的所有列数据,自增当前值依然从原来基础上进行,会记录日志.</span>

<span class="token comment">-- 删除表数据(truncate)</span>
<span class="token keyword">TRUNCATE</span> <span class="token keyword">TABLE</span> test<span class="token punctuation">;</span>
<span class="token comment">-- 结论:truncate删除数据,自增当前值会恢复到初始值重新开始;不会记录日志.</span>

<span class="token comment">-- 同样使用DELETE清空不同引擎的数据库表数据.重启数据库服务后</span>
<span class="token comment">-- InnoDB : 自增列从初始值重新开始 (因为是存储在内存中,断电即失)</span>
<span class="token comment">-- MyISAM : 自增列依然从上一个自增数据基础上开始 (存在文件中,不会丢失)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,54);function r(k,m){return e(),p("div",null,[u,t(" more "),d])}const b=a(i,[["render",r],["__file","DMLyuyan.html.vue"]]);export{b as default};
