import{_ as l,r as o,o as i,c as s,a,b as e,d as t,e as n,f as d}from"./app-GYMnAgnr.js";const p="/viteblog/assets/image-20210713202807818-jLln14r6.png",u="/viteblog/assets/image-20210713203124797-tNruy25T.png",c="/viteblog/assets/image-20210713203753373-HudF2SVa.png",g="/viteblog/assets/image-20231124135437072-c_G_FWtM.png",h="/viteblog/assets/image-20210713204155887--JbZENGz.png",_={},m=d('<h2 id="单体架构" tabindex="-1"><a class="header-anchor" href="#单体架构" aria-hidden="true">#</a> 单体架构</h2><p><strong>单体架构</strong> 就是将业务的所有功能都集中在一个项目中进行开发，并且最终打成一个包进行部署。</p><img src="'+p+'" alt="image-20210713202807818"><p><strong>优点：</strong></p><ul><li>架构简单</li><li>部署成本低</li><li>适合小型项目</li></ul><p><strong>缺点：</strong></p><ul><li>耦合度高（维护困难、升级困难）</li></ul><h2 id="分布式架构" tabindex="-1"><a class="header-anchor" href="#分布式架构" aria-hidden="true">#</a> 分布式架构</h2><p><strong>分布式架构</strong> 是根据业务功能对系统进行拆分，每个业务功能模块都作为独立的项目进行开发，称为一个服务。</p><img src="'+u+'" alt="image-20210713203124797" style="zoom:67%;"><p><strong>优点：</strong></p><ul><li>降低服务耦合</li><li>有利于服务升级和拓展</li></ul><p><strong>缺点：</strong></p><ul><li>服务调用关系错综复杂</li></ul><h2 id="服务治理" tabindex="-1"><a class="header-anchor" href="#服务治理" aria-hidden="true">#</a> 服务治理</h2><p>分布式架构虽然相对于单体架构来说，降低了服务间的耦合度，但是服务拆分时有了很多新的问题需要思考：</p><ul><li>服务拆分的细粒度该如何界定？</li><li>服务之间以何种方式进行远程调用？</li><li>服务的调用关系如何进行统一管理？</li><li>服务的健康状态该如何感知？</li></ul><p>显然，人们需要制定一套行之有效的标准来约束分布式架构，而近几年最火爆的分布式架构方案就是 <strong>微服务</strong>。</p><h2 id="微服务" tabindex="-1"><a class="header-anchor" href="#微服务" aria-hidden="true">#</a> 微服务</h2><p>微服务是一种经过良好架构设计的 <strong>分布式架构</strong> 方案，其架构特征有：</p><ul><li>单一职责：微服务拆分粒度更小，每一个服务都对应唯一的业务能力，做到单一职责，避免重复的业务开发</li><li>面向服务：微服务对外暴露统一标准的业务接口，与语言和技术无关</li><li>自治：团队独立、技术独立、数据独立，部署独立</li><li>隔离性强：服务调用做好隔离、容错、降级，避免出现级联问题</li></ul><img src="'+c+'" alt="image-20210713203753373" style="zoom:80%;"><h2 id="微服务结构" tabindex="-1"><a class="header-anchor" href="#微服务结构" aria-hidden="true">#</a> 微服务结构</h2><p>微服务的上述特性其实是在给分布式架构制定一个标准，进一步降低服务之间的耦合度，提供服务的独立性和灵活性，做到高内聚，低耦合。</p><p>因此， <strong>微服务</strong> 是一种经过良好架构设计的 <strong>分布式架构方案</strong> 。</p><p>但方案该怎么落地？选用什么样的技术栈？全球的互联网公司都在积极尝试自己的微服务方案，在国内最知名的就是 SpringCloud 和阿里巴巴的 Dubbo。</p><p><img src="'+g+'" alt="image-20231124135437072"></p><h2 id="springcloud" tabindex="-1"><a class="header-anchor" href="#springcloud" aria-hidden="true">#</a> SpringCloud</h2>',28),b={href:"https://spring.io/projects/spring-cloud",target:"_blank",rel:"noopener noreferrer"},f=e("p",null,"SpringCloud 集成了各种微服务功能组件，并基于 SpringBoot 实现了这些组件的自动装配，从而提供了良好的开箱即用体验。",-1),x=e("p",null,"其中常见的组件包括：",-1),k=e("p",null,[e("img",{src:h,alt:"image-20210713204155887"})],-1),S=e("p",null,"另外，SpringCloud 底层是依赖于 SpringBoot 的，并且有版本的兼容关系，如下：",-1),w=e("thead",null,[e("tr",null,[e("th",null,"Release Train"),e("th",null,"Release Train")])],-1),C={href:"https://github.com/spring-cloud/spring-cloud-release/wiki/Spring-Cloud-2022.0-Release-Notes",target:"_blank",rel:"noopener noreferrer"},N=e("td",null,"3.0.x, 3.1.x (Starting with 2022.0.3)",-1),R={href:"https://github.com/spring-cloud/spring-cloud-release/wiki/Spring-Cloud-2021.0-Release-Notes",target:"_blank",rel:"noopener noreferrer"},v=e("td",null,"2.6.x, 2.7.x (Starting with 2021.0.3)",-1),j={href:"https://github.com/spring-cloud/spring-cloud-release/wiki/Spring-Cloud-2020.0-Release-Notes",target:"_blank",rel:"noopener noreferrer"},y=e("td",null,"2.4.x, 2.5.x (Starting with 2020.0.3)",-1),E={href:"https://github.com/spring-cloud/spring-cloud-release/wiki/Spring-Cloud-Hoxton-Release-Notes",target:"_blank",rel:"noopener noreferrer"},V=e("td",null,"2.2.x, 2.3.x (Starting with SR5)",-1),B={href:"https://github.com/spring-projects/spring-cloud/wiki/Spring-Cloud-Greenwich-Release-Notes",target:"_blank",rel:"noopener noreferrer"},F=e("td",null,"2.1.x",-1),G={href:"https://github.com/spring-projects/spring-cloud/wiki/Spring-Cloud-Finchley-Release-Notes",target:"_blank",rel:"noopener noreferrer"},T=e("td",null,"2.0.x",-1),z={href:"https://github.com/spring-projects/spring-cloud/wiki/Spring-Cloud-Edgware-Release-Notes",target:"_blank",rel:"noopener noreferrer"},D=e("td",null,"1.5.x",-1),H={href:"https://github.com/spring-projects/spring-cloud/wiki/Spring-Cloud-Dalston-Release-Notes",target:"_blank",rel:"noopener noreferrer"},I=e("td",null,"1.5.x",-1);function L(J,K){const r=o("ExternalLinkIcon");return i(),s("div",null,[a(" more "),m,e("p",null,[t("SpringCloud 是目前国内使用最广泛的微服务框架。官网地址："),e("a",b,[t("https://spring.io/projects/spring-cloud"),n(r)])]),f,x,k,S,e("table",null,[w,e("tbody",null,[e("tr",null,[e("td",null,[e("a",C,[t("2022.0.x"),n(r)]),t(" aka Kilburn")]),N]),e("tr",null,[e("td",null,[e("a",R,[t("2021.0.x"),n(r)]),t(" aka Jubilee")]),v]),e("tr",null,[e("td",null,[e("a",j,[t("2020.0.x"),n(r)]),t(" aka Ilford")]),y]),e("tr",null,[e("td",null,[e("a",E,[t("Hoxton"),n(r)])]),V]),e("tr",null,[e("td",null,[e("a",B,[t("Greenwich"),n(r)])]),F]),e("tr",null,[e("td",null,[e("a",G,[t("Finchley"),n(r)])]),T]),e("tr",null,[e("td",null,[e("a",z,[t("Edgware"),n(r)])]),D]),e("tr",null,[e("td",null,[e("a",H,[t("Dalston"),n(r)])]),I])])])])}const W=l(_,[["render",L],["__file","chushiweifuwu.html.vue"]]);export{W as default};
