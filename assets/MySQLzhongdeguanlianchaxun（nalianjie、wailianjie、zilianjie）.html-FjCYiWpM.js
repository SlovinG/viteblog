import{_ as t,r as p,o,c as l,a as c,b as s,d as n,e as r,w as i,f as a}from"./app-GYMnAgnr.js";const d="/viteblog/assets/035-d4fQfEEl.jpg",u="/viteblog/assets/036-P9xK0fjm.jpg",k="/viteblog/assets/037-xD5F47UR.jpg",g="/viteblog/assets/038-mjhtJLoP.jpg",m="/viteblog/assets/039-k1dV3qOM.jpg",h="/viteblog/assets/040-pSLTOuVK.jpg",_="/viteblog/assets/041-3YjjpiXR.jpg",y="/viteblog/assets/042-yWmhL-IX.jpg",v={},w=s("div",{class:"custom-container tip"},[s("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[s("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[s("circle",{cx:"12",cy:"12",r:"9"}),s("path",{d:"M12 8h.01"}),s("path",{d:"M11 12h1v4h1"})])]),s("p",{class:"custom-container-title"},"为什么要使用关联查询"),s("p",null,"在使用数据库查询语句时，单表的查询有时候不能满足项目的业务需求，在项目开发过程中，有很多需求都是要涉及到多表的联合查询，因此，这里总结一下MySQL中的多表关联查询")],-1),b=a('<h2 id="一、关联查询sql的基本思路" tabindex="-1"><a class="header-anchor" href="#一、关联查询sql的基本思路" aria-hidden="true">#</a> 一、关联查询sql的基本思路</h2><p><strong>1、先确定所连接的表</strong></p><p><strong>2、再确定所要查询的字段</strong></p><p><strong>3、确定连接条件以及连接方式</strong></p><h2 id="二、内连接查询" tabindex="-1"><a class="header-anchor" href="#二、内连接查询" aria-hidden="true">#</a> 二、内连接查询</h2><p><strong>内连接查询是指所有查询出的结果都是能够在连接的表中有对应记录的</strong></p><p>以t_employee（员工表）和t_dept（部门表）为例。dept代表该员工所在的部门，bossId表示该员工的上司，则t_employee表中的记录如下：</p><p><img src="'+d+'" alt=""></p><p>t_dept表中的记录如下：</p><p><img src="'+u+`" alt=""></p><p>可以发现，其中人力资源部里没有员工，而赵七没有对应的部门，现在假如我们想要查询出员工姓名以及其对应的部门名称，此时，就要使用<strong>内连接查询</strong>，关键字为 <strong>inner join</strong></p><p>演示代码：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> e<span class="token punctuation">.</span>empName<span class="token punctuation">,</span>d<span class="token punctuation">.</span>deptName <span class="token keyword">from</span> t_employee e <span class="token keyword">inner</span> <span class="token keyword">join</span> t_dept d <span class="token keyword">on</span> e<span class="token punctuation">.</span>dept <span class="token operator">=</span> d<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查询结果：</p><p><img src="`+k+'" alt=""></p>',15),f=s("strong",null,"没有部门的人员",-1),j=s("strong",null,"没有员工的部门",-1),x=s("strong",null,[n("内连接的特点：只查询在连接的表中能够有对应的记录，其中 "),s("code",null,"e.dept = d.id"),n(" 是连接条件")],-1),q=a(`<h2 id="三、左外连接查询" tabindex="-1"><a class="header-anchor" href="#三、左外连接查询" aria-hidden="true">#</a> 三、左外连接查询</h2><p><strong>左外连接查询就是以左边的表的数据为基准，去匹配右边的表的数据，如果匹配到就显示，匹配不到就显示为null</strong></p><p>在关联查询中，做外连接查询就是左连接查询，两者是一个概念</p><p>在上一步内连接查询中，我们得到了部分员工的姓名以及他所在的部门名称，其中赵七没有被查出来，因为他没有对应的部门，现在如果我们想要把赵七也查出来，就要使用<strong>左外连接查询</strong>，关键字为 <strong>left outer join</strong>，等效于 <strong>left join</strong></p><p>演示代码：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> e<span class="token punctuation">.</span>empName<span class="token punctuation">,</span>d<span class="token punctuation">.</span>deptName <span class="token keyword">from</span> t_employee e <span class="token keyword">left</span> <span class="token keyword">outer</span> <span class="token keyword">join</span> t_dept d <span class="token keyword">on</span> d<span class="token punctuation">.</span>id <span class="token operator">=</span> e<span class="token punctuation">.</span>dept<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查询结果：</p><p><img src="`+g+`" alt=""></p><p>注意，此处t_employee就是左表，也就是<strong>基准表</strong>，用基准表的数据去匹配右表的数据，所以左表的记录是全部会查询出来的，如果右表没有记录对应的话就显示null</p><h2 id="四、右外连接查询" tabindex="-1"><a class="header-anchor" href="#四、右外连接查询" aria-hidden="true">#</a> 四、右外连接查询</h2><p><strong>右外连接查询和左外连接同理，只是基准表从左边改成了右边</strong></p><p>例如，查询所有的部门和对应的员工时，可以试用<strong>右外连接查询</strong>，关键字为 <strong>right outer join</strong>，等效于 <strong>right join</strong></p><p>演示代码：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> e<span class="token punctuation">.</span>empName<span class="token punctuation">,</span>d<span class="token punctuation">.</span>deptName <span class="token keyword">from</span> t_employee e <span class="token keyword">right</span> <span class="token keyword">outer</span> <span class="token keyword">join</span> t_dept d <span class="token keyword">on</span> d<span class="token punctuation">.</span>id<span class="token operator">=</span>e<span class="token punctuation">.</span>dept<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查询结果：</p><p><img src="`+m+`" alt=""></p><p>注意，这里只是把left修改成了right，但是基准表变化了，是以右表的数据去匹配左表，所以左外连接能做到的查询，右外连接也能做到</p><h2 id="五、全外连接查询" tabindex="-1"><a class="header-anchor" href="#五、全外连接查询" aria-hidden="true">#</a> 五、全外连接查询</h2><p><strong>顾名思义，全外连接查询就是把两张表的字段都查出来，没有对应的值就显示null</strong></p><p>但是MySQL是没有全外连接的，MySQL中也没有 <code>full outer join</code> 关键字，想要达到全外连接的效果，可以使用 <strong>union</strong> 关键字连接左外连接和右外连接</p><p>演示代码：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> e<span class="token punctuation">.</span>empName<span class="token punctuation">,</span>d<span class="token punctuation">.</span>deptName <span class="token keyword">from</span> t_employee e <span class="token keyword">left</span> <span class="token keyword">join</span> t_dept d <span class="token keyword">on</span> d<span class="token punctuation">.</span>id<span class="token operator">=</span>e<span class="token punctuation">.</span>dept
<span class="token keyword">union</span>
<span class="token keyword">select</span> e<span class="token punctuation">.</span>empName<span class="token punctuation">,</span>d<span class="token punctuation">.</span>deptName <span class="token keyword">from</span> t_employee e <span class="token keyword">right</span> <span class="token keyword">join</span> t_dept d <span class="token keyword">on</span> d<span class="token punctuation">.</span>id<span class="token operator">=</span>e<span class="token punctuation">.</span>dept
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查询结果：</p><p><img src="`+h+`" alt=""></p><p>注意，如果在Oracle数据库中，直接使用 <strong>full outer join</strong> 关键字连接两表就行了</p><h2 id="六、自连接查询" tabindex="-1"><a class="header-anchor" href="#六、自连接查询" aria-hidden="true">#</a> 六、自连接查询</h2><p><strong>自连接查询就是当前表与自身的连接查询，关键点在于虚拟化出一张表给一个别名</strong></p><p>例如，假如我们要查询员工以及他的上司的名称，由于上司也是员工，所以这里会虚拟化出一张上司表</p><p>演示代码：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> e<span class="token punctuation">.</span>empName<span class="token punctuation">,</span>b<span class="token punctuation">.</span>empName <span class="token keyword">from</span> t_employee e <span class="token keyword">left</span> <span class="token keyword">join</span> t_employee b <span class="token keyword">on</span> e<span class="token punctuation">.</span>boddId<span class="token operator">=</span>b<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查询结果：</p><p><img src="`+_+`" alt=""></p><p>注意，这里的b表是<strong>虚拟化出的表</strong>，我们可以通过查询了解b表的记录：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> e<span class="token punctuation">.</span>empName<span class="token punctuation">,</span>b<span class="token punctuation">.</span>empName<span class="token punctuation">,</span>b<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span> t_employee e <span class="token keyword">left</span> <span class="token keyword">join</span> t_employee b <span class="token keyword">on</span> e<span class="token punctuation">.</span>bossId<span class="token operator">=</span>b<span class="token punctuation">.</span>id<span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查询结果</p><p><img src="`+y+'" alt=""></p><p>后面的四个字段就是虚拟化出的b表的所有记录，但这四个字段其实就是记录的所有<strong>本身是上司的员工</strong>的信息</p><p>所以，自连接查询一般用作表中的某个字段的值是引用另一个字段的值，比如权限表中，父权限也属于权限</p>',38);function N(L,M){const e=p("font");return o(),l("div",null,[w,c(" more "),b,s("p",null,[n("注意，输出结果中"),f,n("和"),j,n("都没有被查询出来，这就是"),r(e,{color:"red"},{default:i(()=>[x]),_:1})]),q])}const V=t(v,[["render",N],["__file","MySQLzhongdeguanlianchaxun（nalianjie、wailianjie、zilianjie）.html.vue"]]);export{V as default};
