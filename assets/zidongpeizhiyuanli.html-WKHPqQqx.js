import{_ as t,r as p,o as e,c as o,a as i,b as n,d as s,e as c,f as l}from"./app-GYMnAgnr.js";const r="/viteblog/assets/156-OwOrnfyg.png",u="/viteblog/assets/158-rplEzUZd.png",d="/viteblog/assets/157-BC6prfTK.jpg",k="/viteblog/assets/159-Rgjvcenc.png",m={},v=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"约定优于配置，但配置不能为0")],-1),g=n("p",null,"配置文件到底能写什么？怎么写？",-1),b={href:"https://docs.spring.io/spring-boot/docs/2.3.0.RELEASE/reference/html/appendix-application-properties.html#common-application-properties",target:"_blank",rel:"noopener noreferrer"},h=l('<p><img src="'+r+`" alt=""></p><h2 id="分析自动配置原理" tabindex="-1"><a class="header-anchor" href="#分析自动配置原理" aria-hidden="true">#</a> 分析自动配置原理</h2><p>我们以 <strong>HttpEncodingAutoConfiguration（Http编码自动配置）</strong> 为例解释自动配置原理</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//表示这是一个配置类，和以前编写的配置文件一样，也可以给容器中添加组件；</span>
<span class="token annotation punctuation">@Configuration</span> 

<span class="token comment">//启动指定类的ConfigurationProperties功能；</span>
  <span class="token comment">//进入这个HttpProperties查看，将配置文件中对应的值和HttpProperties绑定起来；</span>
  <span class="token comment">//并把HttpProperties加入到ioc容器中</span>
<span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">HttpProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span> 

<span class="token comment">//Spring底层@Conditional注解</span>
  <span class="token comment">//根据不同的条件判断，如果满足指定的条件，整个配置类里面的配置就会生效；</span>
  <span class="token comment">//这里的意思就是判断当前应用是否是web应用，如果是，当前配置类生效</span>
<span class="token annotation punctuation">@ConditionalOnWebApplication</span><span class="token punctuation">(</span>
    type <span class="token operator">=</span> <span class="token class-name">Type</span><span class="token punctuation">.</span><span class="token constant">SERVLET</span>
<span class="token punctuation">)</span>

<span class="token comment">//判断当前项目有没有这个类CharacterEncodingFilter；SpringMVC中进行乱码解决的过滤器；</span>
<span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">CharacterEncodingFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">//判断配置文件中是否存在某个配置：spring.http.encoding.enabled；</span>
  <span class="token comment">//如果不存在，判断也是成立的</span>
  <span class="token comment">//即使我们配置文件中不配置pring.http.encoding.enabled=true，也是默认生效的；</span>
<span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>
    prefix <span class="token operator">=</span> <span class="token string">&quot;spring.http.encoding&quot;</span><span class="token punctuation">,</span>
    value <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;enabled&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    matchIfMissing <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token punctuation">)</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpEncodingAutoConfiguration</span> <span class="token punctuation">{</span>
    <span class="token comment">//他已经和SpringBoot的配置文件映射了</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Encoding</span> properties<span class="token punctuation">;</span>
    <span class="token comment">//只有一个有参构造器的情况下，参数的值就会从容器中拿</span>
    <span class="token keyword">public</span> <span class="token class-name">HttpEncodingAutoConfiguration</span><span class="token punctuation">(</span><span class="token class-name">HttpProperties</span> properties<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>properties <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getEncoding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">//给容器中添加一个组件，这个组件的某些值需要从properties中获取</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@ConditionalOnMissingBean</span> <span class="token comment">//判断容器没有这个组件？</span>
    <span class="token keyword">public</span> <span class="token class-name">CharacterEncodingFilter</span> <span class="token function">characterEncodingFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">CharacterEncodingFilter</span> filter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderedCharacterEncodingFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        filter<span class="token punctuation">.</span><span class="token function">setEncoding</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">getCharset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        filter<span class="token punctuation">.</span><span class="token function">setForceRequestEncoding</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">shouldForce</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span>HttpProperties<span class="token punctuation">.</span>Encoding<span class="token punctuation">.</span>Type</span><span class="token punctuation">.</span><span class="token constant">REQUEST</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        filter<span class="token punctuation">.</span><span class="token function">setForceResponseEncoding</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">shouldForce</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span>HttpProperties<span class="token punctuation">.</span>Encoding<span class="token punctuation">.</span>Type</span><span class="token punctuation">.</span><span class="token constant">RESPONSE</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> filter<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//。。。。。。。</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>一句话总结：根据当前不同的条件判断，决定这个配置类是否生效！</strong></p><ul><li>一但这个配置类生效；这个配置类就会给容器中添加各种组件；</li><li>这些组件的属性是从对应的properties类中获取的，这些类里面的每一个属性又是和配置文件绑定的；</li><li>所有在配置文件中能配置的属性都是在xxxxProperties类中封装着；</li><li>配置文件能配置什么就可以参照某个功能对应的这个属性类</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//从配置文件中获取指定的值和bean的属性进行绑定</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;spring.http&quot;</span><span class="token punctuation">)</span> 
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpProperties</span> <span class="token punctuation">{</span>
   <span class="token comment">// .....</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们去配置文件里面试试前缀，看提示：</p><p><img src="`+u+'" alt=""></p><p><strong>这就是自动装配的原理！</strong></p><h2 id="精髓" tabindex="-1"><a class="header-anchor" href="#精髓" aria-hidden="true">#</a> 精髓</h2><p>1、SpringBoot启动会加载大量的自动配置类</p><p>2、我们看我们需要的功能有没有在SpringBoot默认写好的自动配置类当中</p><p>3、我们再来看这个自动配置类中到底配置了哪些组件；（只要我们要用的组件存在在其中，我们就不需要再手动配置了）</p><p>4、给容器中自动配置类添加组件的时候，会从properties类中获取某些属性。我们只需要在配置文件中指定这些属性的值即可</p><p><strong>xxxxAutoConfigurartion：自动配置类</strong>；给容器中添加组件</p><p><strong>xxxxProperties：封装配置文件中相关属性；</strong></p><h2 id="了解-conditional" tabindex="-1"><a class="header-anchor" href="#了解-conditional" aria-hidden="true">#</a> 了解：@Conditional</h2><p>了解完自动装配的原理后，我们来关注一个细节问题，<strong>自动配置类必须在一定的条件下才能生效；</strong></p><p><strong>@Conditional派生注解（Spring注解版原生的@Conditional作用）</strong></p><p>作用：必须是@Conditional指定的条件成立，才给容器中添加组件，配置配里面的所有内容才生效；</p><p><img src="'+d+`" alt=""></p><p><strong>那么多的自动配置类，必须在一定的条件下才能生效；也就是说，我们加载了这么多的配置类，但不是所有的都生效了。</strong></p><p>我们怎么知道哪些自动配置类生效？</p><p><strong>我们可以通过启用 debug=true属性；来让控制台打印自动配置报告，这样我们就可以很方便的知道哪些自动配置类生效：</strong></p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment">#开启springboot的调试类</span>
<span class="token key attr-name">debug</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Positive matches:（自动配置类启用的：正匹配）</strong></p><p><strong>Negative matches:（没有启动，没有匹配成功的自动配置类：负匹配）</strong></p><p><strong>Unconditional classes: （没有条件的类）</strong></p><p>演示，查看输出的日志：</p><p><img src="`+k+'" alt=""></p><p><strong>掌握吸收理解原理，即可以以不变应万变！</strong></p>',32);function f(x,w){const a=p("ExternalLinkIcon");return e(),o("div",null,[v,i(" more "),g,n("p",null,[n("a",b,[s("SpringBoot官方文档中介绍了大量的配置属性"),c(a)]),s("，我们无法全部记住")]),h])}const E=t(m,[["render",f],["__file","zidongpeizhiyuanli.html.vue"]]);export{E as default};
