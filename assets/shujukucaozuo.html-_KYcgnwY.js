import{_ as l,r as o,o as i,c,a as d,e as a,w as e,d as t,f as p,b as n}from"./app-GYMnAgnr.js";const r="/viteblog/assets/197-NTySI-PA.png",u="/viteblog/assets/198-1XGkFrBA.png",k="/viteblog/assets/018-yR1XTYIf.png",h="/viteblog/assets/020-pouIQgUD.png",m="/viteblog/assets/019-MyukIfYf.png",v="/viteblog/assets/200-eP-dHi0f.png",b={},y=p('<h2 id="一、结构化查询语句分类" tabindex="-1"><a class="header-anchor" href="#一、结构化查询语句分类" aria-hidden="true">#</a> 一、结构化查询语句分类</h2><p><img src="'+r+'" alt=""></p><h2 id="二、数据库操作" tabindex="-1"><a class="header-anchor" href="#二、数据库操作" aria-hidden="true">#</a> 二、数据库操作</h2><h3 id="_1、命令行操作数据库" tabindex="-1"><a class="header-anchor" href="#_1、命令行操作数据库" aria-hidden="true">#</a> 1、命令行操作数据库</h3><p>创建数据库：create database [if not exists] 数据库名;</p><p>删除数据库：drop database [if exists] 数据库名;</p><p>查看数据库：show databases;</p><p>查看当前使用的数据库：select database();</p><p>使用数据库：use 数据库名;</p><h3 id="_2、对比工具操作数据库" tabindex="-1"><a class="header-anchor" href="#_2、对比工具操作数据库" aria-hidden="true">#</a> 2、对比工具操作数据库</h3><p><strong>学习方法：</strong></p><ul><li>对照 SQLyog 工具自动生成的语句学习</li><li>固定语法中的单词需要记忆</li></ul><p><img src="'+u+'" alt=""></p><h2 id="三、创建数据表" tabindex="-1"><a class="header-anchor" href="#三、创建数据表" aria-hidden="true">#</a> 三、创建数据表</h2><p>属于 DDL（<strong>数据库模式定义语言 Data Definition Language</strong>）的一种，语法：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token punctuation">[</span><span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span><span class="token punctuation">]</span> <span class="token identifier"><span class="token punctuation">`</span>表名<span class="token punctuation">`</span></span><span class="token punctuation">(</span>\n   <span class="token identifier"><span class="token punctuation">`</span>字段名1<span class="token punctuation">`</span></span> 列类型 <span class="token punctuation">[</span>属性<span class="token punctuation">]</span><span class="token punctuation">[</span>索引<span class="token punctuation">]</span><span class="token punctuation">[</span>注释<span class="token punctuation">]</span><span class="token punctuation">,</span>\n   <span class="token identifier"><span class="token punctuation">`</span>字段名2<span class="token punctuation">`</span></span> 列类型 <span class="token punctuation">[</span>属性<span class="token punctuation">]</span><span class="token punctuation">[</span>索引<span class="token punctuation">]</span><span class="token punctuation">[</span>注释<span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token comment">#...</span>\n   <span class="token identifier"><span class="token punctuation">`</span>字段名n<span class="token punctuation">`</span></span> 列类型 <span class="token punctuation">[</span>属性<span class="token punctuation">]</span><span class="token punctuation">[</span>索引<span class="token punctuation">]</span><span class="token punctuation">[</span>注释<span class="token punctuation">]</span>\n<span class="token punctuation">)</span><span class="token punctuation">[</span>表类型<span class="token punctuation">]</span><span class="token punctuation">[</span>表字符集<span class="token punctuation">]</span><span class="token punctuation">[</span>注释<span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>说明 :</strong> 反引号用于区别 MySQL 保留字与普通字符而引入的（键盘esc下面的键）</p><h2 id="四、数据值和列类型" tabindex="-1"><a class="header-anchor" href="#四、数据值和列类型" aria-hidden="true">#</a> 四、数据值和列类型</h2><p>列类型：规定数据库中该列存放的数据类型</p><h3 id="_1、数值型与浮点型" tabindex="-1"><a class="header-anchor" href="#_1、数值型与浮点型" aria-hidden="true">#</a> 1、数值型与浮点型</h3><p><img src="'+k+'" alt=""></p><p>double 的使用格式：<strong>字段名 double(总长度,小数点后保留的位数)</strong></p><h3 id="_2、字符串型" tabindex="-1"><a class="header-anchor" href="#_2、字符串型" aria-hidden="true">#</a> 2、字符串型</h3><p><img src="'+h+'" alt=""></p><p>char 是定长字符串：</p><ul><li>优点：存储性能高</li><li>缺点：浪费空间</li><li>eg ： name char(10) 如果存储的数据字符个数不足10个，也会占10个的空间</li></ul><p>varchar 是 变长字符串：</p><ul><li>优点：节约空间</li><li>缺点：存储性能低（因为要先处理长度，而不是直接存储）</li><li>eg ： name varchar(10) 如果存储的数据字符个数不足10个，那就数据字符个数是几就占几个的空间</li></ul><h3 id="_3、日期和时间型" tabindex="-1"><a class="header-anchor" href="#_3、日期和时间型" aria-hidden="true">#</a> 3、日期和时间型</h3><p><img src="'+m+'" alt=""></p><h3 id="_4、null值" tabindex="-1"><a class="header-anchor" href="#_4、null值" aria-hidden="true">#</a> 4、NULL值</h3><ul><li>理解为 &quot;没有值&quot; 或 &quot;未知值&quot;</li><li>不要用NULL进行算术运算，因为结果仍会为NULL</li></ul><h2 id="五、数据字段的属性" tabindex="-1"><a class="header-anchor" href="#五、数据字段的属性" aria-hidden="true">#</a> 五、数据字段的属性</h2>',33),g=n("ul",null,[n("li",null,"无符号的"),n("li",null,"声明该数据列不允许负数")],-1),E=n("ul",null,[n("li",null,"0 填充的"),n("li",null,"不足位数的用0来填充 , 如int(3),5则为005")],-1),_=p("<ul><li><p>自动增长的，每添加一条数据，自动在上一个记录数上加 1（默认）</p></li><li><p>通常用于设置<strong>主键</strong> ，且为整数类型</p></li><li><p>可定义起始值和步长</p><ul><li><p>当前表设置步长(AUTO_INCREMENT=100)：只影响当前表</p></li><li><p>SET @@auto_increment_increment=5 ; 影响所有使用自增的表(全局)</p></li></ul></li></ul>",1),w=n("ul",null,[n("li",null,"默认为NULL，即没有插入该列的数值"),n("li",null,"如果设置为NOT NULL , 则该列必须有值")],-1),T=p(`<ul><li>默认的</li><li>用于设置默认值</li><li>例如，性别字段，默认为&quot;男&quot;，否则为 &quot;女&quot;；若无指定该列的值，则默认值为&quot;男&quot;的值</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 目标 : 创建一个school数据库</span>
<span class="token comment">-- 创建学生表(列,字段)</span>
<span class="token comment">-- 学号int 登录密码varchar(20) 姓名,性别varchar(2),出生日期(datatime),家庭住址,email</span>
<span class="token comment">-- 创建表之前 , 一定要先选择数据库</span>

<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">\`</span>student<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span>
<span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;学号&#39;</span><span class="token punctuation">,</span>
<span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;匿名&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;姓名&#39;</span><span class="token punctuation">,</span>
<span class="token identifier"><span class="token punctuation">\`</span>pwd<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;123456&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;密码&#39;</span><span class="token punctuation">,</span>
<span class="token identifier"><span class="token punctuation">\`</span>sex<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;男&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;性别&#39;</span><span class="token punctuation">,</span>
<span class="token identifier"><span class="token punctuation">\`</span>birthday<span class="token punctuation">\`</span></span> <span class="token keyword">datetime</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;生日&#39;</span><span class="token punctuation">,</span>
<span class="token identifier"><span class="token punctuation">\`</span>address<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;地址&#39;</span><span class="token punctuation">,</span>
<span class="token identifier"><span class="token punctuation">\`</span>email<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;邮箱&#39;</span><span class="token punctuation">,</span>
<span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8

<span class="token comment">-- 显示CREATE DATABASE创建命名数据库的语句</span>
<span class="token keyword">SHOW</span> <span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> school<span class="token punctuation">;</span>
<span class="token comment">-- 显示CREATE TABLE创建命名数据表的语句。</span>
<span class="token keyword">SHOW</span> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> student<span class="token punctuation">;</span>
<span class="token comment">-- 显示表结构</span>
<span class="token keyword">DESC</span> student<span class="token punctuation">;</span>  <span class="token comment">-- 设置严格检查模式(不能容错了)SET sql_mode=&#39;STRICT_TRANS_TABLES&#39;;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="六、数据表的类型" tabindex="-1"><a class="header-anchor" href="#六、数据表的类型" aria-hidden="true">#</a> 六、数据表的类型</h2><h3 id="_1、设置数据表的类型" tabindex="-1"><a class="header-anchor" href="#_1、设置数据表的类型" aria-hidden="true">#</a> 1、设置数据表的类型</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> 表名<span class="token punctuation">(</span>
   <span class="token comment">-- 省略一些代码</span>
   <span class="token comment">-- Mysql注释</span>
   <span class="token comment">-- 1. # 单行注释</span>
   <span class="token comment">-- 2. /*...*/ 多行注释</span>
<span class="token punctuation">)</span><span class="token keyword">ENGINE</span> <span class="token operator">=</span> MyISAM <span class="token punctuation">(</span><span class="token operator">or</span> <span class="token keyword">InnoDB</span><span class="token punctuation">)</span>

<span class="token comment">-- 查看mysql所支持的引擎类型 (表类型)</span>
<span class="token keyword">SHOW</span> ENGINES<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>MySQL的数据表的类型 : <strong>MyISAM</strong> , <strong>InnoDB</strong> , HEAP , BOB , CSV 等...</p><p>常用的 MyISAM 与 InnoDB 类型：</p><table><thead><tr><th>名称</th><th>MyISAM</th><th>InnoDB</th></tr></thead><tbody><tr><td>事务处理</td><td>不支持</td><td>支持</td></tr><tr><td>数据行锁定</td><td>不支持</td><td>支持</td></tr><tr><td>外键约束</td><td>不支持</td><td>支持</td></tr><tr><td>全文索引</td><td>支持</td><td>不支持</td></tr><tr><td>表空间大小</td><td>较小</td><td>较大，约 2 倍！</td></tr></tbody></table><p>经验 ( 适用场合 ) ：</p><ul><li>适用 MyISAM：节约空间及相应速度</li><li>适用 InnoDB：安全性 , 事务处理及多用户操作数据表</li></ul><h3 id="_2、数据表的存储位置" tabindex="-1"><a class="header-anchor" href="#_2、数据表的存储位置" aria-hidden="true">#</a> 2、数据表的存储位置</h3><ul><li><p>MySQL数据表以文件方式存放在磁盘中</p><ul><li><p>包括表文件，数据文件，以及数据库的选项文件</p></li><li><p>位置：Mysql安装目录 \\data\\ 下存放数据表。目录名对应数据库名，该目录下文件名对应数据表</p></li></ul></li><li><p>注意 :</p><ul><li><p>* . frm -- 表结构定义文件</p></li><li><p>* . MYD -- 数据文件 ( data )</p></li><li><p>* . MYI -- 索引文件 ( index )</p></li><li><p>InnoDB类型数据表只有一个 *.frm文件，以及上一级目录的 ibdata1 文件</p></li><li><p>MyISAM类型数据表对应三个文件：</p></li></ul></li></ul><p><img src="`+v+`" alt=""></p><h3 id="_3、设置数据表字符集" tabindex="-1"><a class="header-anchor" href="#_3、设置数据表字符集" aria-hidden="true">#</a> 3、设置数据表字符集</h3><p>我们可为数据库、数据表、数据列设定不同的字符集，设定方法：</p><ul><li>创建时通过命令来设置，如：CREATE TABLE 表名() CHARSET = utf8;</li><li>如无设定，则根据 MySQL 数据库配置文件 my.ini 中的参数设定</li></ul><h2 id="七、修改数据库" tabindex="-1"><a class="header-anchor" href="#七、修改数据库" aria-hidden="true">#</a> 七、修改数据库</h2><h3 id="_1、修改表结构-alter-table" tabindex="-1"><a class="header-anchor" href="#_1、修改表结构-alter-table" aria-hidden="true">#</a> 1、修改表结构 ( ALTER TABLE )</h3><p>修改表名：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 旧表名 <span class="token keyword">RENAME</span> <span class="token keyword">AS</span> 新表名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>添加字段：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">ADD</span> 字段名 列属性 <span class="token punctuation">[</span>属性<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>修改字段类型：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">MODIFY</span> 字段名 列类型 <span class="token punctuation">[</span>属性<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>修改字段名和字段类型（字段类型为必要参数）：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 CHANGE 旧字段名 新字段名 列属性 <span class="token punctuation">[</span>属性<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>删除字段：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">DROP</span> 字段名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2、删除数据表" tabindex="-1"><a class="header-anchor" href="#_2、删除数据表" aria-hidden="true">#</a> 2、删除数据表</h3><p>语法：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token punctuation">[</span><span class="token keyword">IF</span> <span class="token keyword">EXISTS</span><span class="token punctuation">]</span> 表名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>IF EXISTS 为可选，判断是否存在该数据表</li><li>不加 IF EXISTS 的情况下，如果删除不存在的数据表会抛出错误</li></ul><h3 id="_3、其他" tabindex="-1"><a class="header-anchor" href="#_3、其他" aria-hidden="true">#</a> 3、其他</h3><ol><li>可用反引号（\`）为标识符（库名、表名、字段名、索引、别名）包裹，以避免与关键字重名！中文也可以作为标识符！</li><li>每个库目录存在一个保存当前数据库的选项文件db.opt。</li><li>注释： <ul><li>单行注释 # 注释内容</li><li>多行注释 /* 注释内容 */</li><li>单行注释 -- 注释内容 （标准SQL注释风格，要求双破折号后加一空格符（空格、TAB、换行等））</li></ul></li><li>模式通配符： <ul><li>_ 任意单个字符</li><li>% 任意多个字符，甚至包括零字符</li><li>单引号需要进行转义 &#39;</li></ul></li><li>CMD命令行内的语句结束符可以为 &quot;;&quot;, &quot;\\G&quot;, &quot;\\g&quot;，仅影响显示结果。其他地方还是用分号结束。delimiter 可修改当前对话的语句结束符。</li><li>SQL对大小写不敏感 （关键字）</li><li>清除已有语句：\\c</li></ol>`,34);function L(A,f){const s=o("font");return i(),c("div",null,[d(" more "),y,a(s,{color:"red"},{default:e(()=>[t("**UnSigned**")]),_:1}),g,a(s,{color:"red"},{default:e(()=>[t("**ZEROFILL**")]),_:1}),E,a(s,{color:"red"},{default:e(()=>[t("**Auto_InCrement**")]),_:1}),_,a(s,{color:"red"},{default:e(()=>[t("**NULL 和 NOT NULL**")]),_:1}),w,a(s,{color:"red"},{default:e(()=>[t("**DEFAULT**")]),_:1}),T])}const N=l(b,[["render",L],["__file","shujukucaozuo.html.vue"]]);export{N as default};
