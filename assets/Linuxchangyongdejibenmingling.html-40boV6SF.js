import{_ as e,o as i,c as l,a as t,f as a,b as n,d as s}from"./app-GYMnAgnr.js";const c="/viteblog/assets/322-zwy1pq_b.png",o="/viteblog/assets/323-8PMu2VUB.jpg",p={},d=a(`<h2 id="一、目录管理" tabindex="-1"><a class="header-anchor" href="#一、目录管理" aria-hidden="true">#</a> 一、目录管理</h2><h3 id="_1、绝对路径和相对路径" tabindex="-1"><a class="header-anchor" href="#_1、绝对路径和相对路径" aria-hidden="true">#</a> 1、绝对路径和相对路径</h3><p>我们知道 Linux 的目录结构为树状结构，最顶级的目录为根目录 <code>/</code></p><p>其他目录通过挂载可以将它们添加到树中，通过解除挂载可以移除它们</p><p>在开始本教程前我们需要先知道什么是绝对路径与相对路径</p><p><strong>绝对路径：</strong></p><ul><li>绝对路径的写法，由根目录 <code>/</code> 写起，例如：<code>/usr/share/doc</code> 目录</li></ul><p><strong>相对路径：</strong></p><ul><li>相对路径的写法，不是由 <code>/</code> 写起，例如想从 <code>/usr/share/doc</code> 进入 <code>/usr/share/man</code> 里面时，可以写成：<code>cd ../man</code></li></ul><h3 id="_2、常用命令" tabindex="-1"><a class="header-anchor" href="#_2、常用命令" aria-hidden="true">#</a> 2、常用命令</h3><ul><li><p>可以使用 <code>man [命令]</code> 来查看各个命令的使用文档，如 ：<code>man cp</code></p></li><li><p>执行 Linux 命令时，提示信息如果显示为乱码，这是由于编码问题导致，只需要修改Linux的编码即可，命令如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>- <span class="token builtin class-name">echo</span> <span class="token string">&#39;LANG=&quot;en_US.UTF-8&quot;&#39;</span> <span class="token operator">&gt;&gt;</span> /etc/profile

<span class="token builtin class-name">source</span> /etc/profile
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在我们使用Linux系统命令时，可以使用以下几个技巧：</p><ul><li><p>Tab 键自动补全</p></li><li><p>连续两次 Tab 键，给出操作提示</p></li><li><p>使用上下箭头快速调出曾经使用过的命令</p></li><li><p>使用 <code>clear</code> 命令或者 Ctrl+l 快捷键实现清屏</p></li></ul></li><li><p>Linux 命令格式</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">command</span> <span class="token punctuation">[</span>-options<span class="token punctuation">]</span> <span class="token punctuation">[</span>parameter<span class="token punctuation">]</span>
	
<span class="token comment">#说明: </span>
<span class="token comment">#	command: 	 命令名</span>
<span class="token comment">#	[-options]:  选项，可用来对命令进行控制，也可以省略</span>
<span class="token comment">#	[parameter]: 传给命令的参数，可以是零个、一个或者多个</span>
	
<span class="token comment">#注意: </span>
<span class="token comment">#	[] 	 代表可选</span>
<span class="token comment">#	命令名、选项、参数之间用空格进行分隔</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="_1-ls-查看指定目录下的内容" tabindex="-1"><a class="header-anchor" href="#_1-ls-查看指定目录下的内容" aria-hidden="true">#</a> 1）ls （查看指定目录下的内容）</h4><p>在 Linux 系统当中， <code>ls</code> 命令可能是最常被运行的。</p><p>语法：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ls</span> <span class="token punctuation">[</span>-al<span class="token punctuation">]</span> <span class="token punctuation">[</span>目录名称<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>选项与参数：</p><p><strong><code>-a</code></strong>：全部的文件，连同隐藏文件（开头为 <code>.</code> 的文件） 一起列出来；</p><p><strong><code>-l</code></strong>：列出长数据串，包含文件的属性与权限等详细信息，但无法显示隐藏文件；</p><p>由于我们使用 <code>ls</code> 命令时经常需要加入 <code>-l</code> 选项，所以 Linux 为 <code>ls -l</code> 命令提供了一种简写方式，即 <code>ll</code></p><p><strong><code>-al</code></strong>：将目录下的所有文件详细列出来（包含文件属性与隐藏文件）</p><h4 id="_2-cd-切换当前工作目录-即进入指定目录" tabindex="-1"><a class="header-anchor" href="#_2-cd-切换当前工作目录-即进入指定目录" aria-hidden="true">#</a> 2）cd （切换当前工作目录，即进入指定目录）</h4><p>cd是 <strong>Change Directory</strong> 的缩写，这是用来变换工作目录的命令。</p><p>语法：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> <span class="token punctuation">[</span>相对路径或绝对路径<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>测试：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 切换到用户目录下</span>
<span class="token builtin class-name">cd</span> home  

<span class="token comment"># 使用 mkdir 命令创建 study 目录</span>
<span class="token function">mkdir</span> study

<span class="token comment"># 进入 study 目录</span>
<span class="token builtin class-name">cd</span> study

<span class="token comment"># 回到上一级</span>
<span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>

<span class="token comment"># 回到根目录</span>
<span class="token builtin class-name">cd</span> /

<span class="token comment"># 表示回到自己的家目录，也就是 /root 这个目录</span>
<span class="token builtin class-name">cd</span> ~
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>特殊说明：</p><ul><li><strong>~</strong> 表示用户的home目录</li><li><strong>.</strong> 表示目前所在的目录</li><li><strong>..</strong> 表示目前目录位置的上级目录</li></ul><h4 id="_3-pwd-显示当前所在的目录" tabindex="-1"><a class="header-anchor" href="#_3-pwd-显示当前所在的目录" aria-hidden="true">#</a> 3）pwd ( 显示当前所在的目录 )</h4><p>pwd 是 <strong>Print Working Directory</strong> 的缩写，也就是显示目前所在目录的命令。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">pwd</span> <span class="token punctuation">[</span>-LP<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>选项与参数：</p><p><strong><code>-L</code></strong>：logical，显示当前的路径，有连接文件时，直接显示连接文件的路径，(不加参数时默认此方式)。</p><p><strong><code>-P</code></strong>：physical，显示当前的路径，有连接文件时，不使用连接路径，直接显示连接文件所指向的文件。 当包含多层连接文件时，显示连接文件最终指向的文件。</p><p>测试：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 单纯显示出目前的工作目录</span>
<span class="token builtin class-name">pwd</span>
/root

<span class="token comment"># 如果是链接，要显示真实地址，可以使用 -P参数</span>
<span class="token builtin class-name">cd</span> bin
<span class="token builtin class-name">pwd</span> <span class="token parameter variable">-P</span>
/usr/bin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-mkdir-创建新目录" tabindex="-1"><a class="header-anchor" href="#_4-mkdir-创建新目录" aria-hidden="true">#</a> 4）mkdir（创建新目录）</h4><p>如果想要创建新的目录的话，那么就使用mkdir (make directory)吧。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> <span class="token punctuation">[</span>-mp<span class="token punctuation">]</span> 目录名称
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>选项与参数：</p><p><strong><code>-m</code></strong>：配置文件的权限。直接配置，不需要看默认权限 (umask) 的脸色～</p><p><strong><code>-p</code></strong>：帮助你直接将所需要的目录（包含上一级目录）递归创建起来！</p><p>测试：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 进入我们用户目录下</span>
<span class="token builtin class-name">cd</span> /home

<span class="token comment"># 创建一个 test 文件夹</span>
<span class="token function">mkdir</span> <span class="token builtin class-name">test</span>

<span class="token comment"># 创建多层级目录的错误示范</span>
<span class="token function">mkdir</span> test1/test2/test3/test4
mkdir: cannot create directory ‘test1/test2/test3/test4’:No such <span class="token function">file</span> or directory  <span class="token comment"># &lt;== 没办法直接创建此目录啊！</span>

<span class="token comment"># 加了这个 -p 的选项，可以自行帮你创建多层目录</span>
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> test1/test2/test3/test4

<span class="token comment"># 创建权限为 rwx--x--x 的目录。</span>
<span class="token function">mkdir</span> <span class="token parameter variable">-m</span> <span class="token number">711</span> test2
<span class="token function">ls</span> <span class="token parameter variable">-l</span>
drwxr-xr-x <span class="token number">2</span> root root  <span class="token number">4096</span> Mar <span class="token number">12</span> <span class="token number">21</span>:55 <span class="token builtin class-name">test</span>
drwxr-xr-x <span class="token number">3</span> root root  <span class="token number">4096</span> Mar <span class="token number">12</span> <span class="token number">21</span>:56 test1
drwx--x--x <span class="token number">2</span> root root  <span class="token number">4096</span> Mar <span class="token number">12</span> <span class="token number">21</span>:58 test2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-rmdir-删除空的目录" tabindex="-1"><a class="header-anchor" href="#_5-rmdir-删除空的目录" aria-hidden="true">#</a> 5）rmdir ( 删除空的目录 )</h4><p>语法：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">rmdir</span> <span class="token punctuation">[</span>-p<span class="token punctuation">]</span> 目录名称
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>选项与参数：</p><p><strong><code>-p</code></strong>：连同上一级 <strong>为空的</strong> 目录也一起删除</p><p>测试：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 看看有多少目录存在？</span>
<span class="token function">ls</span> <span class="token parameter variable">-l</span>
drwxr-xr-x <span class="token number">2</span> root root  <span class="token number">4096</span> Mar <span class="token number">12</span> <span class="token number">21</span>:55 <span class="token builtin class-name">test</span>
drwxr-xr-x <span class="token number">3</span> root root  <span class="token number">4096</span> Mar <span class="token number">12</span> <span class="token number">21</span>:56 test1
drwx--x--x <span class="token number">2</span> root root  <span class="token number">4096</span> Mar <span class="token number">12</span> <span class="token number">21</span>:58 test2

<span class="token comment"># 可直接删除掉，没问题</span>
<span class="token function">rmdir</span> <span class="token builtin class-name">test</span>

<span class="token comment"># 因为该文件夹不为空，所以无法删除</span>
<span class="token function">rmdir</span> test1
rmdir: failed to remove ‘test1’: Directory not empty

<span class="token comment"># 利用 -p 这个选项，立刻就可以将 test1/test2/test3/test4 依次删除。</span>
<span class="token function">rmdir</span> <span class="token parameter variable">-p</span> test1/test2/test3/test4

<span class="token comment"># 使用*通配符，删除名称以 itcast 开始的空目录</span>
<span class="token function">rmdir</span> itcast*   
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,51),r=n("div",{class:"custom-container warning"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8v4"}),n("path",{d:"M12 16h.01"})])]),n("p",{class:"custom-container-title"},"注意"),n("p",null,[s("这个 "),n("code",null,"rmdir"),s(" 命令仅能删除空的目录，阅读下文你将学会可以使用 "),n("code",null,"rm"),s(" 命令来删除非空目录。")])],-1),u=a(`<h4 id="_6-touch-创建文件" tabindex="-1"><a class="header-anchor" href="#_6-touch-创建文件" aria-hidden="true">#</a> 6）touch （创建文件）</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 创建文件 1.txt</span>
<span class="token function">touch</span>  <span class="token number">1</span>.txt    

<span class="token comment"># 一次性创建文件 2.txt,3.txt,3.txt</span>
<span class="token function">touch</span>  <span class="token number">2</span>.txt <span class="token number">3</span>.txt <span class="token number">4</span>.txt   
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-cp-复制文件或目录" tabindex="-1"><a class="header-anchor" href="#_7-cp-复制文件或目录" aria-hidden="true">#</a> 7）cp ( 复制文件或目录 )</h4><p>语法：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">cp</span> <span class="token punctuation">[</span>-adfilprsu<span class="token punctuation">]</span> 来源档<span class="token punctuation">(</span>source<span class="token punctuation">)</span> 目标档<span class="token punctuation">(</span>destination<span class="token punctuation">)</span>
<span class="token function">cp</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span> source1 source2 source3 <span class="token punctuation">..</span><span class="token punctuation">..</span> directory
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>选项与参数：</p><p><strong><code>-a</code></strong>：相当于 <code>-pdr</code> 的意思，至于 <code>pdr</code> 请参考下列说明(常用)</p><p><strong><code>-p</code></strong>：连同文件的属性一起复制过去，而非使用默认属性(备份常用)</p><p><strong><code>-d</code></strong>：若来源档为连结档的属性（link file），则复制连结档属性而非文件本身</p><p><strong><code>-r</code></strong>：递归持续复制，用于目录的复制行为（常用）</p><p><strong><code>-f</code></strong>：为强制（force）的意思，若目标文件已经存在且无法开启，则移除后再尝试一次</p><p><strong><code>-i</code></strong>：若目标档（destination）已经存在时，在覆盖时会先询问动作的进行(常用)</p><p><strong><code>-l</code></strong>：进行硬式连结（hard link）的连结档创建，而非复制文件本身</p><p><strong><code>-s</code></strong>：复制成为符号连结档（symbolic link），亦即『捷径』文件</p><p><strong><code>-u</code></strong>：若 destination 比 source 旧才更新 destination</p><p>测试：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 找一个有文件的目录，我这里找到 root目录</span>
<span class="token builtin class-name">cd</span> /root
<span class="token function">ls</span>
install.sh
<span class="token builtin class-name">cd</span> /home

<span class="token comment"># 复制 root目录下的install.sh 到 home目录下</span>
<span class="token function">cp</span> /root/install.sh /home
<span class="token function">ls</span>
install.sh

<span class="token comment"># 再次复制，加上-i参数，增加覆盖询问？</span>
<span class="token function">cp</span> <span class="token parameter variable">-i</span> /root/install.sh /home
cp: overwrite ‘/home/install.sh’? y <span class="token comment"># n不覆盖，y为覆盖</span>

<span class="token comment"># 将 itcast 目录下所有文件复制到 itheima 目录下</span>
<span class="token function">cp</span> <span class="token parameter variable">-r</span> itcast/* ./itheima/ 	 	
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_8-rm-移除文件或目录" tabindex="-1"><a class="header-anchor" href="#_8-rm-移除文件或目录" aria-hidden="true">#</a> 8）rm ( 移除文件或目录 )</h4><p>语法：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">rm</span> <span class="token punctuation">[</span>-fir<span class="token punctuation">]</span> 文件或目录
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>选项与参数：</p><p><strong><code>-f</code></strong>：就是 force 的意思，忽略不存在的文件，不会出现警告信息</p><p><strong><code>-i</code></strong>：互动模式，在删除前会询问使用者是否动作</p><p><strong><code>-r</code></strong>：递归删除，最常用在目录的删除了，但这是非常危险的选项！！！</p><p>测试：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 将刚刚在 cp 的实例中创建的 install.sh删除掉！</span>
<span class="token function">rm</span> <span class="token parameter variable">-i</span> install.sh
rm: remove regular <span class="token function">file</span> ‘install.sh’? y
<span class="token comment"># 如果加上 -i 的选项就会主动询问，避免你删除到错误的档名！</span>

<span class="token comment"># 尽量不要在服务器上使用 rm -rf /</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_9-mv-移动文件与目录-或修改名称" tabindex="-1"><a class="header-anchor" href="#_9-mv-移动文件与目录-或修改名称" aria-hidden="true">#</a> 9）mv ( 移动文件与目录，或修改名称 )</h4><p>语法：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mv</span> <span class="token punctuation">[</span>-fiu<span class="token punctuation">]</span> <span class="token builtin class-name">source</span> destination
<span class="token function">mv</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span> source1 source2 source3 <span class="token punctuation">..</span><span class="token punctuation">..</span> directory
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>选项与参数：</p><p><strong><code>-f</code></strong>：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖</p><p><strong><code>-i</code></strong>：若目标文件（destination）已经存在时，就会询问是否覆盖</p><p><strong><code>-u</code></strong>：若目标文件已经存在，且 source 比较新，才会更新（update）</p><p>测试：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 复制一个文件到当前目录</span>
<span class="token function">cp</span> /root/install.sh /home

<span class="token comment"># 创建一个文件夹 test</span>
<span class="token function">mkdir</span> <span class="token builtin class-name">test</span>

<span class="token comment"># 将复制过来的文件移动到我们创建的目录，并查看</span>
<span class="token function">mv</span> install.sh <span class="token builtin class-name">test</span>
<span class="token function">ls</span>
<span class="token builtin class-name">test</span>
<span class="token builtin class-name">cd</span> <span class="token builtin class-name">test</span>
<span class="token function">ls</span>
install.sh

<span class="token comment"># 将文件夹重命名，然后再次查看！</span>
<span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>
<span class="token function">mv</span> <span class="token builtin class-name">test</span> mvtest
<span class="token function">ls</span>
mvtest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_10-tar-对文件进行打包、解包、压缩、解压" tabindex="-1"><a class="header-anchor" href="#_10-tar-对文件进行打包、解包、压缩、解压" aria-hidden="true">#</a> 10）tar 对文件进行打包、解包、压缩、解压</h4><p><strong>打包</strong></p><ul><li>打包，也称为归档，指的是一个文件或目录的集合，而这个集合被存储在一个文件中。归档文件没有经过压缩，因此，它占用的空间是其中所有文件和目录的总和。通常，归档总是会和系统备份联系在一起。</li></ul><p><strong>压缩</strong></p><ul><li>压缩是指利用算法将文件进行处理，已达到保留最大文件信息，而让文件体积变小的目的。其基本原理为，通过查找文件内的重复字节，建立一个相同字节的词典文件，并用一个代码表示。</li><li>压缩和归档文件类似，压缩文件也是一个文件和目录的集合，且这个集合也被存储在一个文件中，但它们的不同之处在于，压缩文件采用了不同的存储方式，使其所占用的磁盘空间比集合中所有文件大小的总和要小。</li><li>由于计算机处理的信息是以二进制的形式表示的，因此，压缩软件就是把二进制信息中相同的字符串以特殊字符标记，只要通过合理的数学计算，文件的体积就能够被大大压缩。把一个或者多个文件用压缩软件进行压缩，形成一个文件压缩包，既可以节省存储空间，又方便在网络上传送。</li><li>对文件进行压缩，很可能损坏文件中的内容，因此，压缩又可以分为有损压缩和无损压缩。</li></ul><p>语法：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">tar</span> <span class="token punctuation">[</span>-zcxvf<span class="token punctuation">]</span> <span class="token operator">&lt;</span>fileName.extension<span class="token operator">&gt;</span> <span class="token punctuation">[</span>files<span class="token punctuation">]</span>

<span class="token comment"># 包文件后缀为 .tar 表示只是完成了打包，并没有压缩</span>
<span class="token comment"># 包文件后缀为 .tar.gz 表示打包的同时还进行了压缩</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>选项与参数：</p><p><strong><code>-z</code></strong>：gzip，通过 gzip 命令处理文件，gzip 可以对文件压缩或者解压</p><p><strong><code>-c</code></strong>：create，即创建新的包文件</p><p><strong><code>-x</code></strong>：extract，实现从包文件中还原文件</p><p><strong><code>-v</code></strong>：verbose，显示命令的执行过程</p><p><strong><code>-f</code></strong>：file，用于指定包文件的名称</p><p>测试：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 打包</span>

<span class="token comment"># 将当前目录下所有文件打包，打包后的文件名为 hello.tar</span>
<span class="token function">tar</span> <span class="token parameter variable">-cvf</span> hello.tar ./*
<span class="token comment"># 将当前目录下所有文件打包并压缩，打包后的文件名为 hello.tar.gz</span>
<span class="token function">tar</span> <span class="token parameter variable">-zcvf</span> hello.tar.gz ./*

<span class="token comment"># 解包</span>

<span class="token comment"># 将hello.tar文件进行解包，并将解包后的文件放在当前目录</span>
<span class="token function">tar</span> <span class="token parameter variable">-xvf</span> hello.tar		  			
<span class="token comment"># 将hello.tar.gz文件进行解压，并将解压后的文件放在当前目录</span>
<span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> hello.tar.gz		  		
<span class="token comment"># 将hello.tar.gz文件进行解压，并将解压后的文件放在/usr/local目录</span>
<span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> hello.tar.gz <span class="token parameter variable">-C</span> /usr/local     
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、基本属性" tabindex="-1"><a class="header-anchor" href="#二、基本属性" aria-hidden="true">#</a> 二、基本属性</h2><h3 id="_1、看懂文件属性" tabindex="-1"><a class="header-anchor" href="#_1、看懂文件属性" aria-hidden="true">#</a> 1、看懂文件属性</h3><p>Linux 系统是一种典型的多用户系统，不同的用户处于不同的地位，拥有不同的权限。</p><p>为了保护系统的安全性，Linux系统对不同的用户访问同一文件（包括目录文件）的权限做了不同的规定。</p><p>在 Linux 中我们可以使用 <code>ll</code> 或者 <code>ls –l</code> 命令来显示一个文件的属性以及文件所属的用户和组，如：</p><img src="`+c+'" alt="img" style="zoom:80%;"><p>实例中，<code>boot</code> 文件的第一个属性用 <strong>d</strong> 表示。<strong>d</strong> 在 Linux 中代表该文件是一个目录文件。</p><p>在Linux中第一个字符代表这个文件是目录、文件或链接文件等等：</p><ul><li>当为[ <strong>d</strong> ]则是目录</li><li>当为[ <strong>-</strong> ]则是文件</li><li>若是[ <strong>l</strong> ]则表示为链接文档 ( link file )</li><li>若是[ <strong>b</strong> ]则表示为装置文件里面的可供储存的接口设备 ( 可随机存取装置 )</li><li>若是[ <strong>c</strong> ]则表示为装置文件里面的串行端口设备，例如键盘、鼠标 ( 一次性读取装置 )</li></ul><p>接下来的字符中，以三个为一组，且均为『rwx』 的三个参数的组合。</p><p>其中，[ <strong>r</strong> ]代表可读(read)、[ <strong>w</strong> ]代表可写(write)、[ <strong>x</strong> ]代表可执行(execute)。</p><p>要注意的是，这三个权限的位置不会改变，如果没有权限，就会出现减号[ <strong>-</strong> ]进行替代。</p><p>每个文件的属性由左边第一部分的10个字符来确定（如下图）：</p><p><img src="'+o+`" alt="img"></p><p>从左至右用0-9这些数字来表示。</p><p>第0位确定文件类型，第1-3位确定属主（该文件的所有者）拥有该文件的权限。第4-6位确定属组（所有者的同组用户）拥有该文件的权限，第7-9位确定其他用户拥有该文件的权限。</p><p>其中：</p><p>第1、4、7位表示读权限，如果用&quot;r&quot;字符表示，则有读权限，如果用&quot;-&quot;字符表示，则没有读权限；</p><p>第2、5、8位表示写权限，如果用&quot;w&quot;字符表示，则有写权限，如果用&quot;-&quot;字符表示没有写权限；</p><p>第3、6、9位表示可执行权限，如果用&quot;x&quot;字符表示，则有执行权限，如果用&quot;-&quot;字符表示，则没有执行权限。</p><p>对于文件来说，它都有一个特定的所有者，也就是对该文件具有所有权的用户。</p><p>同时，在Linux系统中，用户是按组分类的，一个用户属于一个或多个组。</p><p>文件所有者以外的用户又可以分为文件所有者的同组用户和其他用户。</p><p>因此，Linux系统按文件所有者、文件所有者同组用户和其他用户来规定了不同的文件访问权限。</p><p>在以上实例中，boot 文件是一个目录文件，属主和属组都为 root。</p><h3 id="_1、修改文件属性" tabindex="-1"><a class="header-anchor" href="#_1、修改文件属性" aria-hidden="true">#</a> 1、修改文件属性</h3><h4 id="_1-chgrp-更改文件属组" tabindex="-1"><a class="header-anchor" href="#_1-chgrp-更改文件属组" aria-hidden="true">#</a> 1）chgrp：更改文件属组</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">chgrp</span> <span class="token punctuation">[</span>-R<span class="token punctuation">]</span> 属组名 文件名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong><code>-R</code></strong>：递归更改文件属组，就是在更改某个目录文件的属组时，如果加上-R的参数，那么该目录下的所有文件的属组都会更改。</p><h4 id="_2-chown-更改文件属主-也可以同时更改文件属组" tabindex="-1"><a class="header-anchor" href="#_2-chown-更改文件属主-也可以同时更改文件属组" aria-hidden="true">#</a> 2）chown：更改文件属主，也可以同时更改文件属组</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">chown</span> <span class="token punctuation">[</span>–R<span class="token punctuation">]</span> 属主名 文件名
<span class="token function">chown</span> <span class="token punctuation">[</span>-R<span class="token punctuation">]</span> 属主名：属组名 文件名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-chmod-更改文件9个属性-最常用的命令之一" tabindex="-1"><a class="header-anchor" href="#_3-chmod-更改文件9个属性-最常用的命令之一" aria-hidden="true">#</a> 3）chmod：更改文件9个属性（最常用的命令之一）</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">chmod</span> <span class="token punctuation">[</span>-R<span class="token punctuation">]</span> xyz 文件或目录
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Linux文件属性有两种设置方法，一种是数字，一种是符号。</p><p>Linux文件的基本权限就有九个，分别是 <code>owner/group/others</code> 三种身份各有自己的 <code>read/write/execute</code> 权限。</p><p>先复习一下刚刚上面提到的数据：文件的权限字符为：『-rwxrwxrwx』， 这九个权限是三个三个一组的！其中，我们可以使用数字来代表各个权限，各权限的分数对照表如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>r:4     w:2     x:1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>每种身份(owner/group/others)各自的三个权限(r/w/x)分数是需要累加的，例如当权限为：[-rwxrwx---] 分数则是：</p><ul><li>owner = rwx = 4+2+1 = 7</li><li>group = rwx = 4+2+1 = 7</li><li>others= --- = 0+0+0 = 0</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">chmod</span> <span class="token number">770</span> filename
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="三、文件内容查看" tabindex="-1"><a class="header-anchor" href="#三、文件内容查看" aria-hidden="true">#</a> 三、文件内容查看</h2><h3 id="_1、概述" tabindex="-1"><a class="header-anchor" href="#_1、概述" aria-hidden="true">#</a> 1、概述</h3><p><strong>你可以使用 <code>man [命令]</code> 来查看各个命令的使用文档，如 ：<code>man cp</code>。</strong></p><p>Linux系统中使用以下命令来查看文件的内容：</p><h4 id="_1-cat-由第一行开始显示文件内容" tabindex="-1"><a class="header-anchor" href="#_1-cat-由第一行开始显示文件内容" aria-hidden="true">#</a> 1）cat 由第一行开始显示文件内容</h4><p>语法：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">cat</span> <span class="token punctuation">[</span>-AbEnTv<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>选项与参数：</p><p><strong><code>-A</code></strong>：相当於 -vET 的整合选项，可列出一些特殊字符而不是空白而已；</p><p><strong><code>-b</code></strong>：列出行号，仅针对非空白行做行号显示，空白行不标行号！</p><p><strong><code>-E</code></strong>：将结尾的断行字节 $ 显示出来；</p><p><strong><code>-n</code></strong>：列印出行号，连同空白行也会有行号，与 -b 的选项不同；</p><p><strong><code>-T</code></strong>：将 [tab] 按键以 ^I 显示出来；</p><p><strong><code>-v</code></strong>：列出一些看不出来的特殊字符</p><p>测试：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查看网络配置: 文件地址 /etc/sysconfig/network-scripts/</span>
<span class="token function">cat</span> /etc/sysconfig/network-scripts/ifcfg-eth0
<span class="token assign-left variable">DEVICE</span><span class="token operator">=</span>eth0
<span class="token assign-left variable">BOOTPROTO</span><span class="token operator">=</span>dhcp
<span class="token assign-left variable">ONBOOT</span><span class="token operator">=</span>yes
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-tac-由最后一行开始显示文件内容" tabindex="-1"><a class="header-anchor" href="#_2-tac-由最后一行开始显示文件内容" aria-hidden="true">#</a> 2）tac 由最后一行开始显示文件内容</h4><p>tac 与 cat 命令刚好相反，文件内容从最后一行开始显示，可以看出 tac 是 cat 的倒着写！如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">tac</span> /etc/sysconfig/network-scripts/ifcfg-eth0
<span class="token assign-left variable">ONBOOT</span><span class="token operator">=</span>yes
<span class="token assign-left variable">BOOTPROTO</span><span class="token operator">=</span>dhcp
<span class="token assign-left variable">DEVICE</span><span class="token operator">=</span>eth0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-nl-显示内容的同时显示行号" tabindex="-1"><a class="header-anchor" href="#_3-nl-显示内容的同时显示行号" aria-hidden="true">#</a> 3）nl 显示内容的同时显示行号</h4><p>语法：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">nl</span> <span class="token punctuation">[</span>-bnw<span class="token punctuation">]</span> 文件
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>选项与参数：</p><p><strong><code>-b</code></strong>：指定行号指定的方式，主要有两种：-b a ：表示不论是否为空行，也同样列出行号(类似 cat -n)；-b t ：如果有空行，空的那一行不要列出行号(默认值)；</p><p><strong><code>-n</code></strong>：列出行号表示的方法，主要有三种：-n ln ：行号在荧幕的最左方显示；-n rn ：行号在自己栏位的最右方显示，且不加 0 ；-n rz ：行号在自己栏位的最右方显示，且加 0 ；</p><p><strong><code>-w</code></strong>：行号栏位的占用的位数。</p><p>测试：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">nl</span> /etc/sysconfig/network-scripts/ifcfg-eth0
<span class="token assign-left variable">1DEVICE</span><span class="token operator">=</span>eth0
<span class="token assign-left variable">2BOOTPROTO</span><span class="token operator">=</span>dhcp
<span class="token assign-left variable">3ONBOOT</span><span class="token operator">=</span>yes
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-more-一页一页翻动" tabindex="-1"><a class="header-anchor" href="#_4-more-一页一页翻动" aria-hidden="true">#</a> 4）more 一页一页翻动</h4><p>cat 指令会一次性查看文件的所有内容，如果文件内容比较多，这个时候查看起来就不是很方便了，这个时候我们可以通过一个新的指令more。</p><p>在 more 这个程序的运行过程中，你有几个按键可以按的：</p><ul><li>空白键 (space)：代表向下翻一页。</li><li>Enter ：代表向下翻『一行』。</li><li>/字串 ：代表在这个显示的内容当中，向下搜寻『字串』这个关键字。</li><li>:f ：立刻显示出档名以及目前显示的行数。</li><li>q ：代表立刻离开 more ，不再显示该文件内容。</li><li>b 或 [ctrl]-b ：代表往回翻页，不过这动作只对文件有用，对管线无用。</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@kuangshen etc<span class="token punctuation">]</span><span class="token comment"># more /etc/csh.login</span>
<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">(</span>中间省略<span class="token punctuation">)</span><span class="token punctuation">..</span><span class="token punctuation">..</span>
--More--<span class="token punctuation">(</span><span class="token number">28</span>%<span class="token punctuation">)</span> <span class="token comment"># 重点在这一行喔！你的光标也会在这里等待你的命令</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-less-一页一页翻动-且能向前翻" tabindex="-1"><a class="header-anchor" href="#_5-less-一页一页翻动-且能向前翻" aria-hidden="true">#</a> 5）less 一页一页翻动，且能向前翻</h4><p>less运行时可以输入的命令有：</p><ul><li>空白键 ：向下翻动一页；</li><li>[pagedown]：向下翻动一页；</li><li>[pageup] ：向上翻动一页；</li><li>/字串 ：向下搜寻『字串』的功能；</li><li>?字串 ：向上搜寻『字串』的功能；</li><li>n ：重复前一个搜寻 (与 / 或 ? 有关！)</li><li>N ：反向的重复前一个搜寻 (与 / 或 ? 有关！)</li><li>q ：离开 less 这个程序；</li></ul><p>以下实例输出/etc/man.config文件的内容：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@kuangshen etc<span class="token punctuation">]</span><span class="token comment"># more /etc/csh.login</span>
<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">(</span>中间省略<span class="token punctuation">)</span><span class="token punctuation">..</span><span class="token punctuation">..</span>
<span class="token builtin class-name">:</span>   <span class="token comment"># 这里可以等待你输入命令！</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-head-取出文件前面几行" tabindex="-1"><a class="header-anchor" href="#_6-head-取出文件前面几行" aria-hidden="true">#</a> 6）head 取出文件前面几行</h4><p>语法：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>head [-n number] 文件
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>选项与参数：</p><p><strong><code>-n</code></strong>：后面接数字，代表显示几行的意思！</p><p>默认的情况中，显示前面 10 行！若要显示前 20 行，就得要这样：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">head</span> <span class="token parameter variable">-n</span> <span class="token number">20</span> /etc/csh.login
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_7-tail-取出文件后面几行" tabindex="-1"><a class="header-anchor" href="#_7-tail-取出文件后面几行" aria-hidden="true">#</a> 7）tail 取出文件后面几行</h4><p>语法：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">tail</span> <span class="token punctuation">[</span>-n number<span class="token punctuation">]</span> 文件
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>选项与参数：</p><p><strong><code>-n</code></strong>：后面接数字，代表显示几行的意思</p><p>默认的情况中，显示最后 10 行！若要显示最后 20 行，就得要这样：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">tail</span> <span class="token parameter variable">-n</span> <span class="token number">20</span> /etc/csh.login
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2、拓展-linux-链接概念" tabindex="-1"><a class="header-anchor" href="#_2、拓展-linux-链接概念" aria-hidden="true">#</a> 2、拓展：Linux 链接概念</h3><p>Linux 链接分两种，一种被称为硬链接（Hard Link），另一种被称为符号链接（Symbolic Link）。</p><p>情况下，<strong>ln</strong> 命令产生硬链接。</p><p><strong>硬连接</strong></p><p>硬连接指通过索引节点来进行连接。</p><p>在 Linux 的文件系统中，保存在磁盘分区中的文件不管是什么类型都给它分配一个编号，称为索引节点号（Inode Index）。</p><p>在 Linux 中，多个文件名指向同一索引节点是存在的。</p><p>比如：A 是 B 的硬链接（A 和 B 都是文件名），则 A 的目录项中的 inode 节点号与 B 的目录项中的 inode 节点号相同，即一个 inode 节点对应两个不同的文件名，两个文件名指向同一个文件，A 和 B 对文件系统来说是完全平等的。删除其中任何一个都不会影响另外一个的访问。</p><p>硬连接的作用是允许一个文件拥有多个有效路径名，这样用户就可以建立硬连接到重要文件，以防止“误删”的功能。</p><p>其原因如上所述，因为对应该目录的索引节点有一个以上的连接。只删除一个连接并不影响索引节点本身和其它的连接，只有当最后一个连接被删除后，文件的数据块及目录的连接才会被释放。也就是说，文件真正删除的条件是与之相关的所有硬连接文件均被删除。</p><p><strong>软连接</strong></p><p>另外一种连接称之为符号连接（Symbolic Link），也叫软连接。</p><p>软链接文件有类似于 Windows 的快捷方式。它实际上是一个特殊的文件。</p><p>在符号连接中，文件实际上是一个文本文件，其中包含的有另一文件的位置信息。</p><p>比如：A 是 B 的软链接（A 和 B 都是文件名），A 的目录项中的 inode 节点号与 B 的目录项中的 inode 节点号不相同，A 和 B 指向的是两个不同的 inode，继而指向两块不同的数据块。但是 A 的数据块中存放的只是 B 的路径名（可以根据这个找到 B 的目录项）。</p><p>A 和 B 之间是“主从”关系，如果 B 被删除了，A 仍然存在（因为两个是不同的文件），但指向的是一个无效的链接。</p><p><strong>测试：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /home
<span class="token function">touch</span> f1 <span class="token comment"># 创建一个测试文件f1</span>
<span class="token function">ls</span>
f1
<span class="token function">ln</span> f1 f2     <span class="token comment"># 创建f1的一个硬连接文件f2</span>
<span class="token function">ln</span> <span class="token parameter variable">-s</span> f1 f3   <span class="token comment"># 创建f1的一个符号连接文件f3</span>
<span class="token function">ls</span> <span class="token parameter variable">-li</span>       <span class="token comment"># -i参数显示文件的inode节点信息</span>
<span class="token number">397247</span> -rw-r--r-- <span class="token number">2</span> root root     <span class="token number">0</span> Mar <span class="token number">13</span> 00:50 f1
<span class="token number">397247</span> -rw-r--r-- <span class="token number">2</span> root root     <span class="token number">0</span> Mar <span class="token number">13</span> 00:50 f2
<span class="token number">397248</span> lrwxrwxrwx <span class="token number">1</span> root root     <span class="token number">2</span> Mar <span class="token number">13</span> 00:50 f3 -<span class="token operator">&gt;</span> f1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面的结果中可以看出，硬连接文件 f2 与原文件 f1 的 inode 节点相同，均为 397247，然而符号连接文件的 inode 节点不同。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># echo 字符串输出 &gt;&gt; f1 输出到 f1文件</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;I am f1 file&quot;</span> <span class="token operator">&gt;&gt;</span>f1
<span class="token function">cat</span> f1
I am f1 <span class="token function">file</span>
<span class="token function">cat</span> f2
I am f1 <span class="token function">file</span>
<span class="token function">cat</span> f3
I am f1 <span class="token function">file</span>
<span class="token function">rm</span> <span class="token parameter variable">-f</span> f1
<span class="token function">cat</span> f2
I am f1 <span class="token function">file</span>
<span class="token function">cat</span> f3
cat: f3: No such <span class="token function">file</span> or directory
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过上面的测试可以看出：当删除原始文件 f1 后，硬连接 f2 不受影响，但是符号连接 f1 文件无效；</p><p>依此您可以做一些相关的测试，可以得到以下全部结论：</p><ul><li>删除符号连接 f3，对 f1、f2 无影响；</li><li>删除硬连接 f2，对 f1、f3 也无影响；</li><li>删除原文件 f1，对硬连接 f2 没有影响，导致符号连接 f3 失效；</li><li>同时删除原文件 f1，硬连接 f2，整个文件会真正的被删除。</li></ul>`,165);function m(v,b){return i(),l("div",null,[t(" more "),d,r,u])}const g=e(p,[["render",m],["__file","Linuxchangyongdejibenmingling.html.vue"]]);export{g as default};
