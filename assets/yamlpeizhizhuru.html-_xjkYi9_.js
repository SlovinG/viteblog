import{_ as a,r as e,o as t,c as p,a as l,e as i,w as o,d as c,f as n}from"./app-GYMnAgnr.js";const u="/viteblog/assets/148-KKOcon42.png",r="/viteblog/assets/149-0SEEfvba.png",d="/viteblog/assets/150-7fojREJo.png",k="/viteblog/assets/151-uNZKG6He.png",v="/viteblog/assets/152-5lYrxBnW.png",m={},g=n(`<h2 id="配置文件" tabindex="-1"><a class="header-anchor" href="#配置文件" aria-hidden="true">#</a> 配置文件</h2><h3 id="配置文件类型" tabindex="-1"><a class="header-anchor" href="#配置文件类型" aria-hidden="true">#</a> 配置文件类型</h3><p>SpringBoot 常用的配置文件类型有两种，分为 properties 和 yaml。先甭管什么文件，SpringBoot 都能正确加载读取里面的参数，配置文件的路径在：<code>src/main/resources</code></p><ol><li>properties 为拓展名的文件，这种大家都比较熟悉了，比如：<code>jdbc.properties</code>，或 <code>log4j.properties</code>。</li><li>yaml 为拓展名的文件，YAML（Yet Another Markup Language）结构化的数据配置文件</li></ol><h3 id="配置文件的作用" tabindex="-1"><a class="header-anchor" href="#配置文件的作用" aria-hidden="true">#</a> 配置文件的作用</h3><p>SpringBoot 使用一个全局的配置文件 ， 该配置文件的名称是固定的：</p><ul><li><p>application.properties</p><p>语法结构 ：<code>key=value</code></p></li><li><p>application.yaml</p><p>语法结构 ：<code>key:空格value</code></p></li></ul><p>修改 SpringBoot 自动配置的默认值，因为 SpringBoot 在底层都给我们自动配置好了；</p><p>比如我们可以在配置文件中修改 Tomcat 默认启动的端口号！测试一下！</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">server.port</span><span class="token punctuation">=</span><span class="token value attr-value">8081</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="yaml-概述" tabindex="-1"><a class="header-anchor" href="#yaml-概述" aria-hidden="true">#</a> yaml 概述</h2><p>YAML 是 &quot;<strong>Y</strong>AML <strong>A</strong>in&#39;t a <strong>M</strong>arkup <strong>L</strong>anguage&quot; （YAML不是一种标记语言）的递归缩写。在开发的这种语言时，YAML 的意思其实是：&quot;Yet Another Markup Language&quot;（仍是一种标记语言）</p><p><strong>这种语言以数据作为中心，而不是以标记语言为重点！</strong></p><p>Spring Boot 为什么推荐用 yaml 而不是我们钟爱的 properties 来作为配置文件呢？</p><p>在回答这个问题前，我们先回顾一下，在传统开发模式里常见的配置文件有哪些格式：</p><ul><li><p>xml</p></li><li><p>properties</p></li><li><p>json</p></li></ul><p>假设，我们现在需要配置两个 user 对象，每个 user 有两个属性（id，name），则不同格式下的配置内容如下：</p><ul><li><p>使用 xml</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>users</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span><span class="token punctuation">&gt;</span></span> 
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span> 
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>德华<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span> 
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span><span class="token punctuation">&gt;</span></span> 
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span> 
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>学友<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span> 
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>users</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>优点：层次结构清晰，允许重用</p></li><li><p>缺点：数据冗余，不够精简</p></li></ul></li><li><p>使用 properties</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">user1.id</span><span class="token punctuation">=</span><span class="token value attr-value">1</span>
<span class="token key attr-name">user1.name</span><span class="token punctuation">=</span><span class="token value attr-value">德华</span>
<span class="token key attr-name">user2.id</span><span class="token punctuation">=</span><span class="token value attr-value">2</span>
<span class="token key attr-name">user2.name</span><span class="token punctuation">=</span><span class="token value attr-value">学友</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>优点：数据精简</p></li><li><p>缺点：不能重用</p></li></ul></li><li><p>使用 json</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span> 
    <span class="token property">&quot;users&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
            <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
            <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;德华&quot;</span> 
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span> 
            <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> 
            <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;学友&quot;</span> 
        <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>优点：数据精简，允许重复</p></li><li><p>缺点：和以上两种对比，未发现什么缺点</p></li></ul></li></ul><p>好了，了解了常见配置文件格式后，我们可以发现其实 yaml 和 json 类似，你可以将 yaml 理解为 json 的超集，json 所能表达的，yaml 也能表达，而且语法比 json 更简洁。</p><p>同样，如果用 yaml 来表达以上需求，则形式为：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">users</span><span class="token punctuation">:</span>
 <span class="token punctuation">-</span> <span class="token key atrule">user</span><span class="token punctuation">:</span>
    <span class="token key atrule">username</span><span class="token punctuation">:</span>
    <span class="token key atrule">password</span><span class="token punctuation">:</span>
 <span class="token punctuation">-</span> <span class="token key atrule">user</span><span class="token punctuation">:</span>
	<span class="token key atrule">username</span><span class="token punctuation">:</span>
	<span class="token key atrule">password</span><span class="token punctuation">:</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到 yaml 结合了 json，perperties，xml 等配置文件的所有优点，因此 spring boot 选中它也是合情合理的。</p><h2 id="yaml-基础语法" tabindex="-1"><a class="header-anchor" href="#yaml-基础语法" aria-hidden="true">#</a> yaml 基础语法</h2><p><strong>注意：yaml对语法的要求很严格！</strong></p><ol><li>空格不能省略</li><li>以缩进来控制层级关系，只要是左边对齐的一列数据都是同一个层级的</li><li>属性和值的大小写都是十分敏感的</li></ol><h3 id="字面量-普通的值-数字-布尔值-字符串" tabindex="-1"><a class="header-anchor" href="#字面量-普通的值-数字-布尔值-字符串" aria-hidden="true">#</a> 字面量：普通的值 [ 数字，布尔值，字符串 ]</h3><p>字面量直接写在后面就可以 ， 字符串默认不用加上双引号或者单引号</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>k: v
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>注意：</strong></p><ul><li><p>“ ” 双引号，不会转义字符串里面的特殊字符，特殊字符会作为本身想表示的意思；</p><p>比如 ：name: &quot;kuang \\n shen&quot; 输出 ：kuang 换行 shen</p></li><li><p>&#39; &#39; 单引号，会转义特殊字符，特殊字符最终会变成和普通字符一样输出；</p><p>比如 ：name: &#39;kuang \\n shen&#39; 输出 ：kuang \\n shen</p></li></ul><h3 id="对象、map-键值对" tabindex="-1"><a class="header-anchor" href="#对象、map-键值对" aria-hidden="true">#</a> 对象、Map（键值对）</h3><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment">#对象、Map格式</span>
<span class="token key atrule">k</span><span class="token punctuation">:</span> 
	<span class="token key atrule">v1</span><span class="token punctuation">:</span>
	<span class="token key atrule">v2</span><span class="token punctuation">:</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在下一行来写对象的属性和值得关系，注意缩进，比如：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">student</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> qinjiang
    <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>行内写法：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">student</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">name</span><span class="token punctuation">:</span> qinjiang<span class="token punctuation">,</span><span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="数组-list、set" tabindex="-1"><a class="header-anchor" href="#数组-list、set" aria-hidden="true">#</a> 数组（ List、set ）</h3><p>用 - 值表示数组中的一个元素,比如：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">pets</span><span class="token punctuation">:</span>
 <span class="token punctuation">-</span> cat
 <span class="token punctuation">-</span> dog
 <span class="token punctuation">-</span> pig
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>行内写法：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">pets</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>cat<span class="token punctuation">,</span>dog<span class="token punctuation">,</span>pig<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="修改-springboot-的默认端口号" tabindex="-1"><a class="header-anchor" href="#修改-springboot-的默认端口号" aria-hidden="true">#</a> 修改 SpringBoot 的默认端口号</h3><p>配置文件中添加，端口号的参数，就可以切换端口：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8082</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="yaml-注入配置文件" tabindex="-1"><a class="header-anchor" href="#yaml-注入配置文件" aria-hidden="true">#</a> yaml 注入配置文件</h2><p>yaml 文件更强大的地方在于，他可以给我们的实体类直接注入匹配值</p><ol><li><p>在 springboot 项目中的 resources 目录下新建一个文件 <code>application.yml</code></p></li><li><p>编写一个实体类 Dog：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kuang<span class="token punctuation">.</span>springboot<span class="token punctuation">.</span>pojo</span><span class="token punctuation">;</span>
<span class="token annotation punctuation">@Component</span>  <span class="token comment">//注册bean到容器中</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>    
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>
    <span class="token comment">//有参无参构造、get、set方法、toString()方法 </span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>思考，我们原来是如何给bean注入属性值的！@Value，给狗狗类测试一下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span> <span class="token comment">//注册bean</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>    
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;旺财&quot;</span><span class="token punctuation">)</span>    
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;18&quot;</span><span class="token punctuation">)</span>    
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在 SpringBoot 的测试类下注入狗狗输出一下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTestclass</span> <span class="token class-name">DemoApplicationTests</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span> <span class="token comment">//将狗狗自动注入进来   </span>
    <span class="token class-name">Dog</span> dog<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Test</span>    
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dog<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//打印，看下狗狗对象   </span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>结果成功输出，@Value注入成功，这是我们原来的办法对吧：</p><p><img src="`+u+`" alt=""></p><ol start="5"><li><p>我们再编写一个复杂一点的实体类：Person 类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span> <span class="token comment">//注册bean到容器中</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Boolean</span> happy<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Date</span> birth<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> maps<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> lists<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Dog</span> dog<span class="token punctuation">;</span>
    
    <span class="token comment">//有参构造、无参构造、get方法、set方法、toString方法  </span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>我们来使用 yaml 配置的方式进行注入，大家写的时候注意区别和优势，我们编写一个 yaml 配置：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">person</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> qinjiang
  <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">3</span>
  <span class="token key atrule">happy</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
  <span class="token key atrule">birth</span><span class="token punctuation">:</span> 2000/01/01
  <span class="token key atrule">maps</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">k1</span><span class="token punctuation">:</span> v1<span class="token punctuation">,</span><span class="token key atrule">k2</span><span class="token punctuation">:</span> v2<span class="token punctuation">}</span>
  <span class="token key atrule">lists</span><span class="token punctuation">:</span>
   <span class="token punctuation">-</span> code
   <span class="token punctuation">-</span> girl
   <span class="token punctuation">-</span> music
  <span class="token key atrule">dog</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> 旺财
    <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>我们刚才已经把 person 这个对象的所有值都写好了，我们现在来注入到我们的类中：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">/*
	@ConfigurationProperties 作用：
		将配置文件中配置的每一个属性的值，映射到这个组件中；
		告诉 SpringBoot 将本类中的所有属性和配置文件中相关的配置进行绑定
		参数 prefix = “person” : 将配置文件中的 person 下面的所有属性一一对应
*/</span>
<span class="token annotation punctuation">@Component</span> <span class="token comment">//注册bean</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;person&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Boolean</span> happy<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Date</span> birth<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> maps<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> lists<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Dog</span> dog<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>IDEA 提示，springboot 配置注解处理器没有找到，让我们看文档，我们可以查看官方文档，找到一个依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 导入配置文件处理器，配置文件进行绑定就会有提示，需要重启 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>确认以上配置都 OK 之后，我们去测试类中测试一下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">class</span> <span class="token class-name">DemoApplicationTests</span> <span class="token punctuation">{</span>
    
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">Person</span> person<span class="token punctuation">;</span> <span class="token comment">//将person自动注入进来</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//打印person信息</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>结果：所有值全部注入成功：</p><p><img src="`+r+`" alt=""></p><p><strong>yaml 配置注入到实体类完全OK！</strong></p><p>测试：</p><ol><li>将配置文件的 <strong>key 值</strong> 和 <strong>属性的值</strong> 设置为不一样的，则结果输出为 null，注入失败</li><li>新配置一个 person2，然后将 <strong>@ConfigurationProperties(prefix = &quot;person2&quot;)</strong> 指向我们的 person2</li></ol><h2 id="加载指定的配置文件" tabindex="-1"><a class="header-anchor" href="#加载指定的配置文件" aria-hidden="true">#</a> 加载指定的配置文件</h2><p><strong>@PropertySource</strong>：加载指定的配置文件；</p><p><strong>@ConfigurationProperties</strong>：默认从全局配置文件中获取值；</p><p>1、我们去在 resources 目录下新建一个 <code>person.properties</code> 文件</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">name</span><span class="token punctuation">=</span><span class="token value attr-value">SlovinG</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2、然后在我们的代码中指定加载 <code>person.properties</code> 文件</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;classpath:person.properties&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Component</span> <span class="token comment">//注册bean</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${name}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、再次输出测试一下：指定配置文件绑定成功</p><p><img src="`+d+`" alt=""></p><h2 id="配置文件占位符" tabindex="-1"><a class="header-anchor" href="#配置文件占位符" aria-hidden="true">#</a> 配置文件占位符</h2><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">person</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> qinjiang$<span class="token punctuation">{</span>random.uuid<span class="token punctuation">}</span> <span class="token comment"># 随机uuid</span>
    <span class="token key atrule">age</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>random.int<span class="token punctuation">}</span>  <span class="token comment"># 随机int</span>
    <span class="token key atrule">happy</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
    <span class="token key atrule">birth</span><span class="token punctuation">:</span> 2000/01/01
    <span class="token key atrule">maps</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">k1</span><span class="token punctuation">:</span> v1<span class="token punctuation">,</span><span class="token key atrule">k2</span><span class="token punctuation">:</span> v2<span class="token punctuation">}</span>
    <span class="token key atrule">lists</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> code
      <span class="token punctuation">-</span> girl
      <span class="token punctuation">-</span> music
    <span class="token key atrule">dog</span><span class="token punctuation">:</span>
      <span class="token key atrule">name</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>person.hello<span class="token punctuation">:</span>other<span class="token punctuation">}</span>_旺财
      <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="回顾-properties-配置" tabindex="-1"><a class="header-anchor" href="#回顾-properties-配置" aria-hidden="true">#</a> 回顾 properties 配置</h2><p>我们上面采用的 yaml 方法都是最简单的方式，开发中最常用的，也是 springboot 所推荐的！那我们来唠唠其他的实现方式，道理都是相同的，写还是那样写，配置文件除了 yml 还有我们之前常用的 properties</p>`,68),b=n('<p>settings--&gt;FileEncodings 中配置：</p><p><img src="'+k+`" alt=""></p><p><strong>测试步骤：</strong></p><p>1、新建一个实体类User</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span> <span class="token comment">//注册bean</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    
    <span class="token keyword">private</span> <span class="token class-name">String</span> sex<span class="token punctuation">;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、编辑配置文件 user.properties</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">user1.name</span><span class="token punctuation">=</span><span class="token value attr-value">kuangshenuser1.age=18user1.sex=男</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>3、我们在 User 类上使用 @Value 来进行注入</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span> <span class="token comment">//注册bean</span>
<span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;classpath:user.properties&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    
    <span class="token comment">//直接使用@value    </span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${user.name}&quot;</span><span class="token punctuation">)</span> <span class="token comment">//从配置文件中取值    </span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;#{9*2}&quot;</span><span class="token punctuation">)</span>  <span class="token comment">// #{SPEL} Spring表达式    </span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;男&quot;</span><span class="token punctuation">)</span>  <span class="token comment">// 字面量    </span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> sex<span class="token punctuation">;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4、Springboot 测试</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">class</span> <span class="token class-name">DemoApplicationTests</span> <span class="token punctuation">{</span>
    
    <span class="token annotation punctuation">@Autowired</span>    
    <span class="token class-name">User</span> user<span class="token punctuation">;</span>
    
    <span class="token annotation punctuation">@Test</span>    
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果正常输出：</p><p><img src="`+v+'" alt=""></p><h2 id="对比小结" tabindex="-1"><a class="header-anchor" href="#对比小结" aria-hidden="true">#</a> 对比小结</h2><h3 id="功能对比" tabindex="-1"><a class="header-anchor" href="#功能对比" aria-hidden="true">#</a> 功能对比</h3><table><thead><tr><th></th><th>@ConfigurationProperties</th><th>@Value</th></tr></thead><tbody><tr><td>功能</td><td>批量注入配置文件中的属性</td><td>一个个指定</td></tr><tr><td>松散绑定（松散语法）</td><td>支持</td><td>不支持</td></tr><tr><td>SpEL</td><td>不支持</td><td>支持</td></tr><tr><td>JSR303数据校验</td><td>支持</td><td>不支持</td></tr><tr><td>复杂类型封装</td><td>支持</td><td>不支持</td></tr></tbody></table><ul><li>@ConfigurationProperties 只需要写一次即可， @Value 则需要每个字段都添加，使用起来并不友好，我们需要为每个属性单独注解赋值，比较麻烦。</li><li>松散绑定：这个是什么意思呢？比如我的 yml 中写的 last-name，这个和 lastName 是一样的， - 后面跟着的字母默认是大写的。这就是松散绑定。可以测试一下。</li><li>JSR（Java Specification Requests）303 数据校验 ， 这个就是我们可以在字段里增加一层过滤器验证 ， 可以保证数据的合法性。</li><li>复杂类型封装，yml 中可以封装对象 ， 使用 value 就不支持。</li></ul><h3 id="结论" tabindex="-1"><a class="header-anchor" href="#结论" aria-hidden="true">#</a> 结论</h3><ol><li>配置 yml 和配置 properties 都可以获取到值 ， 强烈推荐 yml</li><li>如果我们在某个业务中，只需要获取配置文件中的某个值，可以使用一下 <code>@value</code></li><li>如果说，我们专门编写了一个 JavaBean 来和配置文件进行一一映射，就直接 <code>@configurationProperties</code>，不要犹豫</li></ol>',19);function y(h,x){const s=e("font");return t(),p("div",null,[l(" more "),g,i(s,{color:"red"},{default:o(()=>[c("**注意：properties 配置文件在写中文的时候，会有乱码 ， 我们需要去IDEA中设置编码格式为UTF-8**")]),_:1}),b])}const f=a(m,[["render",y],["__file","yamlpeizhizhuru.html.vue"]]);export{f as default};
