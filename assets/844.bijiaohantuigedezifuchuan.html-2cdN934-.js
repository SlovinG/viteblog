import{_ as n,o as s,c as a,a as t,f as e}from"./app-GYMnAgnr.js";const p={},o=e(`<p><strong>难度：简单</strong></p><p>给定 <code>s</code> 和 <code>t</code> 两个字符串，当它们分别被输入到空白的文本编辑器后，如果两者相等，返回 <code>true</code> 。<code>#</code> 代表退格字符。</p><p><strong>注意</strong>：如果对空文本输入退格字符，文本继续为空。</p><p><strong>示例 1：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：s = &quot;ab#c&quot;, t = &quot;ad#c&quot;
输出：true
解释：s 和 t 都会变成 &quot;ac&quot;。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：s = &quot;ab##&quot;, t = &quot;c#d#&quot;
输出：true
解释：s 和 t 都会变成 &quot;&quot;。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：s = &quot;a#c&quot;, t = &quot;b&quot;
输出：false
解释：s 会变成 &quot;c&quot;，但 t 仍然是 &quot;b&quot;。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length, t.length &lt;= 200</code></li><li><code>s</code> 和 <code>t</code> 只含有小写字母以及字符 <code>&#39;#&#39;</code></li></ul><p><strong>进阶：</strong></p><ul><li>你可以用 <code>O(n)</code> 的时间复杂度和 <code>O(1)</code> 的空间复杂度解决该问题吗？</li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>看到 <strong>退格</strong> 这个词，我就想到可以用 <strong>栈</strong> 来做这个题。</p><p>逐字符遍历字符串，如果碰到字符 <code>#</code> 就退栈，碰到小写字母就进栈，同时注意考虑【已经到了栈底，无法继续退栈】的边界情况。</p><p>这样当遍历结束的时候，就得到了最终的字符串形态，再直接进行比较即可。</p><h2 id="使用栈的代码" tabindex="-1"><a class="header-anchor" href="#使用栈的代码" aria-hidden="true">#</a> 使用栈的代码</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">backspaceCompare</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token class-name">String</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 处理两个字符串，考虑退格符的影响</span>
    <span class="token class-name">String</span> processedS <span class="token operator">=</span> <span class="token function">processString</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> processedT <span class="token operator">=</span> <span class="token function">processString</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 比较处理后的字符串是否相等</span>
    <span class="token keyword">return</span> processedS<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>processedT<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 处理字符串，考虑退格符的影响</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">processString</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> pointer <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// 指向结果字符串的下一个字符位置</span>
    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 创建字符数组存储最终结果</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">char</span> current <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">!=</span> <span class="token char">&#39;#&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 如果当前字符不是退格符，就将其添加到结果中</span>
            result<span class="token punctuation">[</span>pointer<span class="token punctuation">]</span> <span class="token operator">=</span> current<span class="token punctuation">;</span>
            pointer<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pointer <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 如果是退格符，并且之前有字符，则退格（减少指针）</span>
            pointer<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 返回最终结果字符串</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> pointer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>时间复杂度：O(n+m)，其中 n 和 m 分别为字符串 S 和 T 的长度。我们需要遍历两字符串各一次。</p><p>空间复杂度：O(n)，其中 n 是两个输入字符串中较长那个的长度。</p><p>上述代码并没有直接使用栈数据结构，而是使用了一个字符数组 <code>result</code> 和一个额外的指针 <code>pointer</code> 来模拟栈的行为，从而有效地处理字符串中的退格符。这种方法的优点是简单且不需要额外的栈数据结构，但它只适用于模拟简单的入栈/出栈操作。</p><p>但单纯用栈，空间复杂度不满足题目中 O(1) 的要求，所以在上述算法的基础上，考虑使用双指针来减少空间依赖。</p><h2 id="更优思路" tabindex="-1"><a class="header-anchor" href="#更优思路" aria-hidden="true">#</a> 更优思路</h2><p>一个字符串中某位置的字符是否会被删除，<strong>只取决于该字符后面的退格符，而与该字符前面的退格符无关</strong>。</p><p>由于一个 <code>#</code> 号只会消除其左边的一个字符，对右边的字符无影响，所以当我们选择 <strong>从后往前</strong> 遍历 s、t 字符串时，就可以立即确定当前字符是否会被删掉。</p><p>详细思路：</p><ol><li>设定两个指针 sPointer、tPointer 分别为字符串 s、t 中最后一个字符的索引</li><li>两个指针都是从后往前遍历字符串，同时设置变量 sSkips 和 tSkips 作为退格计数器，用来记录当前遇到的 <strong>有效</strong> <code>#</code> 的数量，也就是 <strong>当前待删除的字符的数量</strong></li><li>使用一个外层的 <code>while</code> 循环，条件是 <code>sPointer</code> 或 <code>tPointer</code> 中至少有一个大于等于0，意味着至少有一个字符串还没有遍历完全。 <ul><li>循环内部，我们对字符串 s、t 各使用一个 <code>while</code> 循环来找到当前字符串中下一个有效字符的位置（在从后往前的情况下），即不会由退格符 <code>&#39;#&#39;</code> 删除的字符。 <ul><li>若碰到 <code>#</code> ，则增加退格计数器（<code>sSkips</code> 或 <code>tSkips</code>），并向左移动指针（减少 <code>sPointer</code> 或 <code>tPointer</code>）</li><li>若碰到小写字母且退格计数器大于 0，意味着当前字符需要被删除了，则减少退格计数器的值，并向左移动指针</li><li>若碰到小写字母且退格计数器等于 0，意味着此时指针指向的正是下一个有效字符，此时退出当前循环，可以开始比较字符了。</li></ul></li><li>若两个指针都大于或等于 0，则比较两个字符串在这些位置上的字符。 <ul><li>若字符不相同，则说明字符串已经不相等，返回 <code>false</code>。</li><li>若字符相同，则将 <code>sPointer</code> 和 <code>tPointer</code> 向左移动一位（减1），继续外层循环，寻找下一个有效字符。</li></ul></li><li>若只有一个指针小于 0，说明一个字符串的有效字符已经遍历完了，而另一个字符串还存在有效字符，则说明字符串已经不相等，返回 <code>false</code>。</li></ul></li><li>如果所有有效字符都相等，且两个字符串同时遍历完毕，则说明字符串相等，返回 <code>true</code>。</li></ol><h2 id="更优代码" tabindex="-1"><a class="header-anchor" href="#更优代码" aria-hidden="true">#</a> 更优代码</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">backspaceCompare</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token class-name">String</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> sPointer <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> tPointer <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> sSkips <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> tSkips <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>sPointer <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">||</span> tPointer <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 找到下一个有效字符的位置或字符串开始位置</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>sPointer <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>sPointer<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">&#39;#&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                sSkips<span class="token operator">++</span><span class="token punctuation">;</span>
                sPointer<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sSkips <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                sSkips<span class="token operator">--</span><span class="token punctuation">;</span>
                sPointer<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">while</span> <span class="token punctuation">(</span>tPointer <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>tPointer<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">&#39;#&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                tSkips<span class="token operator">++</span><span class="token punctuation">;</span>
                tPointer<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>tSkips <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                tSkips<span class="token operator">--</span><span class="token punctuation">;</span>
                tPointer<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 比较两个字符串的当前字符</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>sPointer <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> tPointer <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>sPointer<span class="token punctuation">)</span> <span class="token operator">!=</span> t<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>tPointer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sPointer <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token punctuation">(</span>tPointer <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 一个字符串的有效字符已经遍历完了，而另一个字符串还存在有效字符</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        sPointer<span class="token operator">--</span><span class="token punctuation">;</span>
        tPointer<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>时间复杂度：O(n+m)，其中 n 和 m 分别为字符串 s 和 t 的长度。我们需要遍历两个字符串各一次。</p><p>空间复杂度：O(1)。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>逆向遍历字符串的想法不容易想到，而且其边界条件也更加复杂，在对空间复杂度没有需求的时候，第一种做法是更容易想到的。</p>`,34);function c(i,l){return s(),a("div",null,[t(" more "),o])}const r=n(p,[["render",c],["__file","844.bijiaohantuigedezifuchuan.html.vue"]]);export{r as default};
