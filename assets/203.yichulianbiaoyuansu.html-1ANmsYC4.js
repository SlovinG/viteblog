import{_ as n,o as s,c as a,f as e}from"./app-GYMnAgnr.js";const t="/viteblog/assets/removelinked-list-ikYQq2Vt.jpg",p={},o=e('<p><strong>难度：简单</strong></p><p>给你一个链表的头节点 <code>head</code> 和一个整数 <code>val</code> ，请你删除链表中所有满足 <code>Node.val == val</code> 的节点，并返回 <strong>新的头节点</strong> 。</p><p><strong>示例 1：</strong></p><p><img src="'+t+`" alt="img"></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：head = [1,2,6,3,4,5,6], val = 6
输出：[1,2,3,4,5]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：head = [], val = 1
输出：[]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：head = [7,7,7,7], val = 7
输出：[]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li>列表中的节点数目在范围 <code>[0, 104]</code> 内</li><li><code>1 &lt;= Node.val &lt;= 50</code></li><li><code>0 &lt;= val &lt;= 50</code></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>很容易想到的暴力做法是：遍历一遍链表，遇到满足条件的节点就删除。</p><p>细节上需要注意的是：</p><ul><li>如何删除第一个节点</li><li>如何删除最后一个节点</li><li>从代码易实现的角度出发，考虑是删除当前节点容易，还是删除当前节点的下一个节点容易</li></ul><h2 id="我的代码" tabindex="-1"><a class="header-anchor" href="#我的代码" aria-hidden="true">#</a> 我的代码</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">removeElements</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ListNode</span> result <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token comment">// 去掉最前面的需要剔除的节点，获取真正的头节点</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> result<span class="token punctuation">.</span>val <span class="token operator">==</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        result <span class="token operator">=</span> result<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 获取当前不需要剔除的第一个节点</span>
    <span class="token class-name">ListNode</span> currentNode <span class="token operator">=</span> result<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>currentNode <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 由于没有虚拟头节点，所以这里采用删除当前节点的下一个节点</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>currentNode<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> currentNode<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val <span class="token operator">==</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            currentNode<span class="token punctuation">.</span>next <span class="token operator">=</span> currentNode<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        currentNode <span class="token operator">=</span> currentNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>时间复杂度：O(n)</p><p>空间复杂度：O(1)</p><h2 id="添加虚拟头节点的做法" tabindex="-1"><a class="header-anchor" href="#添加虚拟头节点的做法" aria-hidden="true">#</a> 添加虚拟头节点的做法</h2><p>假设链表为[1, 2, 3]，那么删除中间节点 2 的操作就是让节点 1 的 next 指针直接指向节点 2 的下一个节点就可以了，同理删除尾部节点 3 的操作就是让节点 2 的 next 指针指向节点 3 的下一个节点，当然这里为 null。</p><p>那么删除节点 1 该如何操作呢？</p><p>这里就涉及到了链表操作的两种方式：</p><h3 id="直接使用原来的链表来进行删除操作" tabindex="-1"><a class="header-anchor" href="#直接使用原来的链表来进行删除操作" aria-hidden="true">#</a> 直接使用原来的链表来进行删除操作</h3><p>移除头结点和移除其他节点的操作是不一样的，因为链表的其他节点都是通过 <strong>前一个节点</strong> 来 <strong>移除当前节点</strong>，而头结点没有前一个节点。</p><p>所以移除头结点需要将头结点向后移动一位，这样就从链表中移除了一个头结点。</p><p>这意味着我们在写题的时候，需要单独写一段逻辑来处理移除头结点的情况，这样不是很方便。</p><p>那么可不可以用一种 <strong>统一的方式</strong> 来移除链表的任意节点呢？</p><p>答案就是 <strong>设置一个虚拟头结点</strong>，这样原链表的所有节点就都可以按照统一的方式进行移除了。</p><h3 id="设置一个虚拟头结点再进行删除操作" tabindex="-1"><a class="header-anchor" href="#设置一个虚拟头结点再进行删除操作" aria-hidden="true">#</a> 设置一个虚拟头结点再进行删除操作</h3><p>假设链表为[1, 2, 3]，那么给节点 1 加一个前置的虚拟头结点 0（dummyNode），使新链表为[0, 1, 2, 3]。</p><p>那么这个时候，我们要移除节点 1 的话，操作和移除节点 2、3 并无区别，我们的移除操作也就统一了。</p><p>注意，最后返回结果的时候，由于虚拟头节点的存在，我们需要返回 dummyNode.next，才是真正的头节点。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">removeElements</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 因为删除可能涉及到头节点，所以设置dummy节点，统一操作</span>
    <span class="token class-name">ListNode</span> dummy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ListNode</span> pre <span class="token operator">=</span> dummy<span class="token punctuation">;</span>
    <span class="token class-name">ListNode</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val <span class="token operator">==</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            pre<span class="token punctuation">.</span>next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            pre <span class="token operator">=</span> cur<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> dummy<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>时间复杂度：O(n)</p><p>空间复杂度：O(1)</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>如果使用 C，C++ 编程语言的话，不要忘了还要从内存中删除这两个移除的节点。</p><p><strong>当然如果使用 Java ，Python 的话就不用手动管理内存了。</strong></p><p>注意虚拟头节点的引入，可以使代码逻辑更统一。</p>`,40),l=[o];function c(i,u){return s(),a("div",null,l)}const d=n(p,[["render",c],["__file","203.yichulianbiaoyuansu.html.vue"]]);export{d as default};
