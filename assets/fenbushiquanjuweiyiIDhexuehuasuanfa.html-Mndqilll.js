import{_ as n,o as s,c as a,f as e}from"./app-GYMnAgnr.js";const p="/viteblog/assets/9012-PNsZKizA.png",t="/viteblog/assets/640-1701342647717-2-hl45joWw.png",o={},c=e('<h2 id="为什么需要分布式全局唯一id以及分布式id的业务需求" tabindex="-1"><a class="header-anchor" href="#为什么需要分布式全局唯一id以及分布式id的业务需求" aria-hidden="true">#</a> 为什么需要分布式全局唯一ID以及分布式ID的业务需求</h2><p>在复杂分布式系统中，往往需要对大量的数据和消息进行唯一标识，如在美团点评的金融、支付、餐饮、酒店等产品的系统中，数据逐渐增长，对数据库分库分表后需要有一个唯一 ID 来标识一条数据或信息。</p><p>此时一个能够生成全局唯一ID的系统是非常必要的。</p><p><img src="'+p+`" alt="图片"></p><h2 id="id-生成规则的部分硬性要求" tabindex="-1"><a class="header-anchor" href="#id-生成规则的部分硬性要求" aria-hidden="true">#</a> ID 生成规则的部分硬性要求</h2><ul><li><p><strong>全局唯一</strong></p></li><li><p><strong>趋势递增</strong>：在 MySQL 的 InnoDB 引擎中使用的是聚集索引，由于多数 RDBMS 使用 Btree 的数据结构来存储索引，在主键的选择上面我们应该尽量使用有序的主键，保证写入的性能</p></li><li><p><strong>单调递增</strong>：保证下一个 ID 一定大于上一个 ID，满足事务版本号、IM 增量消息、排序等特殊需求</p></li><li><p><strong>信息安全</strong>：如果 ID 是连续，恶意用户的爬取工作就非常容易做了，直接按照顺序下载指定 URL 即可，如果是订单号就危险了，竞争对手可以直接知道我们一天的单量，所以在一些应用场景下，需要 ID 无明显规则，让竞争对手不好猜</p></li><li><p><strong>含时间戳</strong>：能够快速在开发中，了解这个分布式 ID 是什么时候生成的</p></li></ul><h2 id="id-号生成系统的可用性要求" tabindex="-1"><a class="header-anchor" href="#id-号生成系统的可用性要求" aria-hidden="true">#</a> ID 号生成系统的可用性要求</h2><p><strong>高可用</strong>：发布一个获取分布式 ID 请求，服务器就要保证 99.999% 的情况下给我创建一个唯一分布式 ID</p><p><strong>低延迟</strong>：发一个获取分布式 ID 的请求，服务器就要快，极速</p><p><strong>高 QPS</strong>：例如并发一口气 10 万个创建分布式 ID 请求同时杀过来，服务器要顶得住且一下子成功创建 10 万个分布式 ID</p><h2 id="常用的解决方案" tabindex="-1"><a class="header-anchor" href="#常用的解决方案" aria-hidden="true">#</a> 常用的解决方案</h2><h3 id="uuid" tabindex="-1"><a class="header-anchor" href="#uuid" aria-hidden="true">#</a> UUID</h3><p><code>UUID.randomUUID()</code>, UUID 的标准型包含 32 个 16 进制数字，以连字号分为五段，形式为 8-4-4-4-12 的 36 个字符，性能非常高，本地生成，没有网络消耗。</p><h4 id="存在的问题" tabindex="-1"><a class="header-anchor" href="#存在的问题" aria-hidden="true">#</a> 存在的问题</h4><p><strong>入数据库性能差，因为 UUID 是无序的</strong></p><p>无序，也就不能生成递增有序的数字。</p><p>首先分布式 id 一般都会作为主键，但是按照 MySQL 官方推荐主键尽量越短越好，UUID 每一个都很长，所以不是很推荐。<strong>在特定的环境下会存在一些问题</strong></p><p>比如做 DB 主键的场景下，UUID 就非常不适用，MySQL 官方有明确的说明。</p><p><strong>索引，B+ 树索引的分裂</strong></p><p>既然分布式 ID 是主键，然后主键是包含索引的，而 MySQL 的索引是通过 B+ 树来实现的，每一次新的 UUID 数据的插入，为了查询的优化，都会对索引底层的B+树进行修改，因为 UUID 数据是无序的，所以每一次 UUID 数据的插入都会对主键的 B+ 树进行很大的修改，这一点很不好，插入完全无序，不但会导致一些中间节点产生分裂，也会白白创造出很多不饱和的节点，这样大大降低了数据库插入的性能。</p><h3 id="数据库自增主键" tabindex="-1"><a class="header-anchor" href="#数据库自增主键" aria-hidden="true">#</a> 数据库自增主键</h3><h4 id="单机" tabindex="-1"><a class="header-anchor" href="#单机" aria-hidden="true">#</a> 单机</h4><p>在分布式里面，数据库的自增 ID 机制的主要原理是：数据库自增 ID 和 MySQL 数据库的 <code>replace into</code> 实现的，这里的 <code>replace into</code> 跟 insert 功能类似，不同点在于：<code>replace into</code> 首先尝试插入数据列表中，如果发现表中已经有此行数据（根据主键或唯一索引判断）则先删除，再插入，否则直接插入新数据。</p><p><code>REPLACE INTO</code> 的含义是插入一条记录，如果表中唯一索引的值遇到冲突，则替换老数据：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> t_test <span class="token punctuation">(</span>
    id <span class="token keyword">BIGINT</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">UNSIGNED</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>
    stub <span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
    <span class="token keyword">UNIQUE</span> <span class="token keyword">KEY</span> stub <span class="token punctuation">(</span>stub<span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>REPLACE into t_test(stub) values(&#39;b&#39;);
select LAST_INSERT_ID();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们每次插入的时候，发现都会把原来的数据给替换，并且 ID 也会增加</p><p>这就满足了</p><ul><li>递增性</li><li>单调性</li><li>唯一性</li></ul><p>在分布式情况下，并且并发量不多的情况，可以使用这种方案来解决，获得一个全局的唯一ID</p><h4 id="集群分布式集群" tabindex="-1"><a class="header-anchor" href="#集群分布式集群" aria-hidden="true">#</a> 集群分布式集群</h4><p>那数据库自增ID机制适合做分布式ID吗？答案是不太适合</p><p>系统水平扩展比较困难，比如定义好步长和机器台数之后，如果要添加机器该怎么办，假设现在有一台机器发号是：1,2,3,4,5,（步长是1），这个时候需要扩容机器一台，可以这样做：把第二胎机器的初始值设置得比第一台超过很多，貌似还好，但是假设线上如果有100台机器，这个时候扩容要怎么做，简直是噩梦，所以系统水平扩展方案复杂难以实现。</p><p>数据库压力还是很大，每次获取ID都得读写一次数据库，非常影响性能，不符合分布式ID里面的延迟低和高QPS的规则（在高并发下，如果都去数据库里面获取ID，那是非常影响性能的）</p><h3 id="基于-redis-生成全局-id-策略" tabindex="-1"><a class="header-anchor" href="#基于-redis-生成全局-id-策略" aria-hidden="true">#</a> 基于 Redis 生成全局 ID 策略</h3><h4 id="单机版" tabindex="-1"><a class="header-anchor" href="#单机版" aria-hidden="true">#</a> 单机版</h4><p>因为 Redis 是单线程，天生保证原子性，可以使用原子操作 INCR 和 INCRBY 来实现</p><p>INCRBY：设置增长步长</p><h4 id="集群分布式" tabindex="-1"><a class="header-anchor" href="#集群分布式" aria-hidden="true">#</a> 集群分布式</h4><p>注意：在 Redis 集群情况下，同样和 MySQL 一样需要设置不同的增长步长，同时 key 一定要设置有效期，可以使用 Redis 集群来获取更高的吞吐量。</p><p>假设一个集群中有 5 台 Redis，可以初始化每台Redis的值分别是 1,2,3,4,5 ， 然后设置步长都是5</p><p>各个 Redis 生成的ID为：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>A：1 6 11 16 21
B：2 7 12 17 22
C：3 8 13 18 23
D：4 9 14 19 24
E：5 10 15 20 25
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是存在的问题是，Redis 集群的维护和保养比较麻烦，配置麻烦。因为要设置单点故障，哨兵值守。</p><p>但是主要是的问题是，为了一个 ID，却需要引入整个 Redis 集群，有种杀鸡焉用牛刀的感觉。</p><h2 id="雪花算法" tabindex="-1"><a class="header-anchor" href="#雪花算法" aria-hidden="true">#</a> 雪花算法</h2><h3 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h3><p>Snowflake 是 Twitter 的分布式自增 ID 算法，</p><p>最初 Twitter 把存储系统从 MySQL 迁移到 Cassandra（由 Facebook 开发的一套开源分布式 NoSQL 数据库系统）因为 Cassandra 没有顺序ID生成机制，所以开发了这样一套全局唯一 ID 生成服务。</p><p>Twitter 的分布式雪花算法 SnowFlake，经测试 SnowFlake 每秒可以产生 26 万个自增可排序的 ID</p><ul><li>twitter 的 SnowFlake 生成 ID 能够按照时间有序生成</li><li>SnowFlake 算法生成 ID 的结果是一个64Bit大小的整数，为一个Long型（转换成字符串后长度最多19）</li><li>分布式系统内不会产生 ID 碰撞（由 datacenter 和 workerID 做区分）并且效率较高</li></ul><h3 id="结构" tabindex="-1"><a class="header-anchor" href="#结构" aria-hidden="true">#</a> 结构</h3><p>雪花算法的几个核心组成部分</p><p><img src="`+t+`" alt="图片"></p><p>在 Java 中 64bit 的证书是 long 类型，所以在 SnowFlake 算法生成的 ID 就是 long 类存储的</p><h3 id="第一部分" tabindex="-1"><a class="header-anchor" href="#第一部分" aria-hidden="true">#</a> 第一部分</h3><p>二进制中最高位是符号位，1 表示负数，0 表示正数。生成的 ID 一般都是用整数，所以最高位固定为 0。</p><h4 id="第二部分" tabindex="-1"><a class="header-anchor" href="#第二部分" aria-hidden="true">#</a> 第二部分</h4><p>第二部分是 41bit 时间戳位，用来记录时间戳，毫秒级</p><p>41 位可以表示 2^41 -1 个数字</p><p>如果只用来表示正整数，可以表示的范围是：0 - 2^41 -1，减1是因为可以表示的数值范围是从0开始计算的，而不是从1。</p><p>也就是说 41 位可以表示 2^41 - 1 毫秒的值，转换成单位年则是 69.73 年</p><h4 id="第三部分" tabindex="-1"><a class="header-anchor" href="#第三部分" aria-hidden="true">#</a> 第三部分</h4><p>第三部分为工作机器 ID，10Bit 用来记录工作机器ID</p><p>可以部署在 2^10 = 1024 个节点，包括5位 datacenterId（数据中心，机房） 和 5 位 workerID（机器码）</p><p>5 位可以表示的最大正整数是 2 ^ 5 = 31个数字，来表示不同的数据中心 和 机器码</p><h4 id="第四部分" tabindex="-1"><a class="header-anchor" href="#第四部分" aria-hidden="true">#</a> 第四部分</h4><p>12 位bit可以用来表示的正整数是 2^12 = 4095，即可以用0 1 2 … 4094 来表示同一个机器同一个时间戳内产生的4095个ID序号。</p><p>SnowFlake 可以保证所有生成的ID按时间趋势递增，整个分布式系统内不会产生重复ID，因为有 datacenterId 和 workerId 来做区分</p><h3 id="实现" tabindex="-1"><a class="header-anchor" href="#实现" aria-hidden="true">#</a> 实现</h3><p>雪花算法是由 scala 算法编写的，使用 Java 实现的代码地址：https://github.com/beyondfengyu/SnowFlake/blob/master/SnowFlake.java</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * twitter的snowflake算法 -- java实现
 * 
 * <span class="token keyword">@author</span> beyond
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SnowFlake</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 起始的时间戳
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token constant">START_STMP</span> <span class="token operator">=</span> <span class="token number">1480166465631L</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 每一部分占用的位数
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token constant">SEQUENCE_BIT</span> <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span> <span class="token comment">//序列号占用的位数</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token constant">MACHINE_BIT</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>   <span class="token comment">//机器标识占用的位数</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token constant">DATACENTER_BIT</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment">//数据中心占用的位数</span>

    <span class="token doc-comment comment">/**
     * 每一部分的最大值
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token constant">MAX_DATACENTER_NUM</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1L</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1L</span> <span class="token operator">&lt;&lt;</span> <span class="token constant">DATACENTER_BIT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token constant">MAX_MACHINE_NUM</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1L</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1L</span> <span class="token operator">&lt;&lt;</span> <span class="token constant">MACHINE_BIT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token constant">MAX_SEQUENCE</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1L</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1L</span> <span class="token operator">&lt;&lt;</span> <span class="token constant">SEQUENCE_BIT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 每一部分向左的位移
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token constant">MACHINE_LEFT</span> <span class="token operator">=</span> <span class="token constant">SEQUENCE_BIT</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token constant">DATACENTER_LEFT</span> <span class="token operator">=</span> <span class="token constant">SEQUENCE_BIT</span> <span class="token operator">+</span> <span class="token constant">MACHINE_BIT</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token constant">TIMESTMP_LEFT</span> <span class="token operator">=</span> <span class="token constant">DATACENTER_LEFT</span> <span class="token operator">+</span> <span class="token constant">DATACENTER_BIT</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">long</span> datacenterId<span class="token punctuation">;</span>  <span class="token comment">//数据中心</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> machineId<span class="token punctuation">;</span>     <span class="token comment">//机器标识</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> sequence <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span> <span class="token comment">//序列号</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> lastStmp <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1L</span><span class="token punctuation">;</span><span class="token comment">//上一次时间戳</span>

    <span class="token keyword">public</span> <span class="token class-name">SnowFlake</span><span class="token punctuation">(</span><span class="token keyword">long</span> datacenterId<span class="token punctuation">,</span> <span class="token keyword">long</span> machineId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>datacenterId <span class="token operator">&gt;</span> <span class="token constant">MAX_DATACENTER_NUM</span> <span class="token operator">||</span> datacenterId <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;datacenterId can&#39;t be greater than MAX_DATACENTER_NUM or less than 0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>machineId <span class="token operator">&gt;</span> <span class="token constant">MAX_MACHINE_NUM</span> <span class="token operator">||</span> machineId <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;machineId can&#39;t be greater than MAX_MACHINE_NUM or less than 0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>datacenterId <span class="token operator">=</span> datacenterId<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>machineId <span class="token operator">=</span> machineId<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 产生下一个ID
     *
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">long</span> <span class="token function">nextId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> currStmp <span class="token operator">=</span> <span class="token function">getNewstmp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>currStmp <span class="token operator">&lt;</span> lastStmp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;Clock moved backwards.  Refusing to generate id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>currStmp <span class="token operator">==</span> lastStmp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//相同毫秒内，序列号自增</span>
            sequence <span class="token operator">=</span> <span class="token punctuation">(</span>sequence <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token constant">MAX_SEQUENCE</span><span class="token punctuation">;</span>
            <span class="token comment">//同一毫秒的序列数已经达到最大</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>sequence <span class="token operator">==</span> <span class="token number">0L</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                currStmp <span class="token operator">=</span> <span class="token function">getNextMill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">//不同毫秒内，序列号置为0</span>
            sequence <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        lastStmp <span class="token operator">=</span> currStmp<span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token punctuation">(</span>currStmp <span class="token operator">-</span> <span class="token constant">START_STMP</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token constant">TIMESTMP_LEFT</span> <span class="token comment">//时间戳部分</span>
                <span class="token operator">|</span> datacenterId <span class="token operator">&lt;&lt;</span> <span class="token constant">DATACENTER_LEFT</span>       <span class="token comment">//数据中心部分</span>
                <span class="token operator">|</span> machineId <span class="token operator">&lt;&lt;</span> <span class="token constant">MACHINE_LEFT</span>             <span class="token comment">//机器标识部分</span>
                <span class="token operator">|</span> sequence<span class="token punctuation">;</span>                             <span class="token comment">//序列号部分</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">long</span> <span class="token function">getNextMill</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> mill <span class="token operator">=</span> <span class="token function">getNewstmp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>mill <span class="token operator">&lt;=</span> lastStmp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            mill <span class="token operator">=</span> <span class="token function">getNewstmp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> mill<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">long</span> <span class="token function">getNewstmp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SnowFlake</span> snowFlake <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SnowFlake</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>snowFlake<span class="token punctuation">.</span><span class="token function">nextId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="工程落地经验" tabindex="-1"><a class="header-anchor" href="#工程落地经验" aria-hidden="true">#</a> 工程落地经验</h3><p>hutools工具包，地址：https://github.com/looly/hutool</p><h3 id="springboot整合雪花算法" tabindex="-1"><a class="header-anchor" href="#springboot整合雪花算法" aria-hidden="true">#</a> SpringBoot整合雪花算法</h3><p>引入hutool工具类：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>cn.hutool<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>hutool-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>整合：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 雪花算法
 *
 * <span class="token keyword">@author</span>: 陌溪
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SnowFlakeDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> workerId <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> datacenterId <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Snowflake</span> snowFlake <span class="token operator">=</span> <span class="token class-name">IdUtil</span><span class="token punctuation">.</span><span class="token function">createSnowflake</span><span class="token punctuation">(</span>workerId<span class="token punctuation">,</span> datacenterId<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@PostConstruct</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 将网络ip转换成long</span>
            workerId <span class="token operator">=</span> <span class="token class-name">NetUtil</span><span class="token punctuation">.</span><span class="token function">ipv4ToLong</span><span class="token punctuation">(</span><span class="token class-name">NetUtil</span><span class="token punctuation">.</span><span class="token function">getLocalhostStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 获取雪花ID
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">long</span> <span class="token function">snowflakeId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>snowFlake<span class="token punctuation">.</span><span class="token function">nextId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">long</span> <span class="token function">snowflakeId</span><span class="token punctuation">(</span><span class="token keyword">long</span> workerId<span class="token punctuation">,</span> <span class="token keyword">long</span> datacenterId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Snowflake</span> snowflake <span class="token operator">=</span> <span class="token class-name">IdUtil</span><span class="token punctuation">.</span><span class="token function">createSnowflake</span><span class="token punctuation">(</span>workerId<span class="token punctuation">,</span> datacenterId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> snowflake<span class="token punctuation">.</span><span class="token function">nextId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SnowFlakeDemo</span> snowFlakeDemo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SnowFlakeDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>snowFlakeDemo<span class="token punctuation">.</span><span class="token function">snowflakeId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>得到结果</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1251350711346790400
1251350711346790402
1251350711346790401
1251350711346790403
1251350711346790405
1251350711346790404
1251350711346790406
1251350711346790407
1251350711350984704
1251350711350984706
1251350711350984705
1251350711350984707
1251350711350984708
1251350711350984709
1251350711350984710
1251350711350984711
1251350711350984712
1251350711355179008
1251350711355179009
1251350711355179010
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="优点" tabindex="-1"><a class="header-anchor" href="#优点" aria-hidden="true">#</a> 优点</h3><ul><li>毫秒数在高维，自增序列在低位，整个ID都是趋势递增的</li><li>不依赖数据库等第三方系统，以服务的方式部署，稳定性更高，生成ID的性能也是非常高的</li><li>可以根据自身业务特性分配bit位，非常灵活</li></ul><h3 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点" aria-hidden="true">#</a> 缺点</h3><ul><li>依赖机器时钟，如果机器时钟回拨，会导致重复ID生成</li><li>在单机上是递增的，但由于涉及到分布式环境，每台机器上的时钟不可能完全同步，有时候会出现不是全局递增的情况，此缺点可以认为无所谓，一般分布式ID只要求趋势递增，并不会严格要求递增，90%的需求只要求趋势递增。</li></ul><h3 id="其它补充" tabindex="-1"><a class="header-anchor" href="#其它补充" aria-hidden="true">#</a> 其它补充</h3><ul><li>为了解决时钟回拨问题，导致ID重复，后面有人专门提出了解决的方案 <ul><li>百度开源的分布式唯一ID生成器 UidGenerator</li><li>Leaf - 美团点评分布式ID生成系统</li></ul></li></ul>`,87),l=[c];function i(u,r){return s(),a("div",null,l)}const k=n(o,[["render",i],["__file","fenbushiquanjuweiyiIDhexuehuasuanfa.html.vue"]]);export{k as default};
