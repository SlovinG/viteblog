import{_ as e,r as t,o,c as p,a as l,e as c,w as r,d as i,b as s,f as n}from"./app-GYMnAgnr.js";const k={},u=s("div",{class:"custom-container tip"},[s("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[s("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[s("circle",{cx:"12",cy:"12",r:"9"}),s("path",{d:"M12 8h.01"}),s("path",{d:"M11 12h1v4h1"})])]),s("p",{class:"custom-container-title"},"为什么要了解sql语句的执行顺序"),s("p",null,"了解一个sql语句的执行顺序，可以让我们清楚到sql执行时的操作顺序，进而有利于我们更好的优化自己的sql语句，提升程序性能。")],-1),d=n(`<h2 id="一、举例" tabindex="-1"><a class="header-anchor" href="#一、举例" aria-hidden="true">#</a> 一、举例</h2><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">--sql 1</span>
<span class="token keyword">select</span> a<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span> table_a a <span class="token keyword">left</span> <span class="token keyword">join</span> table_b b <span class="token keyword">on</span> a<span class="token punctuation">.</span>id <span class="token operator">=</span> b<span class="token punctuation">.</span>a_id <span class="token keyword">where</span> b<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;john&#39;</span><span class="token punctuation">;</span>
 
<span class="token comment">--sql 2</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> table_a <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">select</span> a_id <span class="token keyword">from</span> table_b <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">&#39;john&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>倘若说 table_a 和 table_b 都是几十几百万数据的表，而 <code>name = ‘john’</code> 这个过滤字段可以查到 table_b 的唯一数据。</p><p>那么此时，一定是sql2的执行效率要高于sql1的。为什么？通过sql语句的执行顺序可以知道，table_a 和 table_b 会优先执行联表操作。两个都是大表，其查询出来的结果集虚拟表也会很大。而sql2中，table_a 只用通过 table_b 查询出来的唯一数据更快的获取到指定结果。</p><p>所以，如果你不知道sql执行顺序，同样的业务需求，也许，你就使用了性能不够好的sql1了。</p><h2 id="二、sql语句定义时的顺序" tabindex="-1"><a class="header-anchor" href="#二、sql语句定义时的顺序" aria-hidden="true">#</a> 二、sql语句定义时的顺序</h2><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">SELECT</span>
<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">DISTINCT</span><span class="token operator">&lt;</span>select_list<span class="token operator">&gt;</span>
<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">FROM</span> <span class="token operator">&lt;</span>left_table<span class="token operator">&gt;</span>
<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>join_type<span class="token operator">&gt;</span> <span class="token keyword">JOIN</span> <span class="token operator">&lt;</span>right_table<span class="token operator">&gt;</span>
<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">ON</span> <span class="token operator">&lt;</span>join_condition<span class="token operator">&gt;</span>
<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token keyword">WHERE</span> <span class="token operator">&lt;</span>where_condition<span class="token operator">&gt;</span>
<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token operator">&lt;</span>group_by_list<span class="token operator">&gt;</span>
<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token keyword">WITH</span> {CUBE<span class="token operator">|</span>ROLLUP}
<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token keyword">HAVING</span> <span class="token operator">&lt;</span>having_condition<span class="token operator">&gt;</span>
<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token operator">&lt;</span>order_by_condition<span class="token operator">&gt;</span>
<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token keyword">LIMIT</span> <span class="token operator">&lt;</span>limit_number<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、sql语句执行时的顺序" tabindex="-1"><a class="header-anchor" href="#三、sql语句执行时的顺序" aria-hidden="true">#</a> 三、sql语句执行时的顺序</h2><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token keyword">SELECT</span>
<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token keyword">DISTINCT</span><span class="token operator">&lt;</span>select_list<span class="token operator">&gt;</span>
<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">FROM</span> <span class="token operator">&lt;</span>left_table<span class="token operator">&gt;</span>
<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>join_type<span class="token operator">&gt;</span> <span class="token keyword">JOIN</span> <span class="token operator">&lt;</span>right_table<span class="token operator">&gt;</span>
<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">ON</span> <span class="token operator">&lt;</span>join_condition<span class="token operator">&gt;</span>
<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">WHERE</span> <span class="token operator">&lt;</span>where_condition<span class="token operator">&gt;</span>
<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token operator">&lt;</span>group_by_list<span class="token operator">&gt;</span>
<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token keyword">WITH</span> {CUBE<span class="token operator">|</span>ROLLUP}
<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token keyword">HAVING</span> <span class="token operator">&lt;</span>having_condition<span class="token operator">&gt;</span>
<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token operator">&lt;</span>order_by_list<span class="token operator">&gt;</span>
<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token keyword">LIMIT</span> <span class="token operator">&lt;</span>limit_number<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>可以看到，在这十一个步骤中，最先执行的是FROM操作，最后执行的是LIMIT操作</strong></p>`,10),b=n("<p>执行顺序：</p><p><strong>(1) FROM</strong>：对 FROM 子句中的左表 <code>&lt;left_table&gt;</code> 和右表 <code>&lt;right_table&gt;</code> 执行笛卡儿积，产生虚拟表 VT1</p><p><strong>(2) ON</strong>：对虚拟表 VT1 进行 ON 筛选，只有那些符合 <code>&lt;join_condition&gt;</code> 的行才被插入虚拟表 VT2</p><p><strong>(3) JOIN</strong>：如果指定了 <code>OUTER JOIN</code> （如 LEFT OUTER JOIN、RIGHT OUTER JOIN），那么保留表中未匹配的行作为外部行添加到虚拟表 VT2 ，产生虚拟表 VT3 。如果FROM子句包含两个以上的表，则对上一个连接生成的结果表 VT3 和下一个表重复执行步骤1~步骤3，直到处理完所有的表</p><p><strong>(4) WHERE</strong>：对虚拟表 VT3 应用 WHERE 过滤条件，只有符合 <code>&lt;where_condition&gt;</code> 的记录才会被插入虚拟表VT4</p><p><strong>(5) GROUP By</strong>：根据 GROUP BY 子句中的列，对 VT4 中的记录进行分组操作，产生 VT5</p><p><strong>(6) CUBE|ROllUP</strong>：对 VT5 进行 CUBE 或 ROLLUP 操作，产生表 VT6</p><p><strong>(7) HAVING</strong>：对虚拟表 VT6 应用 HAVING 过滤器，只有符合 <code>&lt;having_condition&gt;</code> 的记录才会被插入到 VT7</p><p><strong>(8) SELECT</strong>：第二次执行 SELECT 操作，选择指定的列，插入到虚拟表 VT8 中</p><p><strong>(9) DISTINCT</strong>：去除重复，产生虚拟表 VT9</p><p><strong>(10) ORDER BY</strong>：将虚拟表 VT9 中的记录按照 <code>&lt;order_by_list&gt;</code> 进行排序操作，产生虚拟表 VT10</p><p><strong>(11) LIMIT</strong>：取出指定几行的记录，产生虚拟表 VT11 ，并返回给查询用户</p>",12);function m(g,v){const a=t("font");return o(),p("div",null,[u,l(" more "),d,c(a,{color:"red"},{default:r(()=>[i("**每个操作都会产生一个虚拟表，该虚拟表将作为下一个处理的输入**")]),_:1}),b])}const w=e(k,[["render",m],["__file","sqlyujudezhixingshunxu.html.vue"]]);export{w as default};
