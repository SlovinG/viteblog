import{_ as n,o as s,c as a,f as e}from"./app-GYMnAgnr.js";const o="/viteblog/assets/tree1-1709436528419-26-vG_SmiiT.jpg",t="/viteblog/assets/tree2-1709436528420-27-_bareXBI.jpg",p={},l=e('<p><strong>难度：容易</strong></p><p>给定二叉搜索树（BST）的根节点 <code>root</code> 和一个整数值 <code>val</code>。</p><p>你需要在 BST 中找到节点值等于 <code>val</code> 的节点。 返回以该节点为根的子树。 如果节点不存在，则返回 <code>null</code> 。</p><p><strong>示例 1:</strong></p><p><img src="'+o+`" alt="img"></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：root = [4,2,7,1,3], val = 2
输出：[2,1,3]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2:</strong></p><p><img src="`+t+`" alt="img"></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：root = [4,2,7,1,3], val = 5
输出：[]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li>树中节点数在 <code>[1, 5000]</code> 范围内</li><li><code>1 &lt;= Node.val &lt;= 107</code></li><li><code>root</code> 是二叉搜索树</li><li><code>1 &lt;= val &lt;= 107</code></li></ul><h2 id="递归法" tabindex="-1"><a class="header-anchor" href="#递归法" aria-hidden="true">#</a> 递归法</h2><p>二叉搜索树是一个有序树：</p><ul><li>若它的左子树不空，则左子树上所有结点的值都小于它的根结点的值；</li><li>若它的右子树不空，则右子树上所有结点的值都大于它的根结点的值；</li><li>它的左、右子树也分别为二叉搜索树</li></ul><p>算法步骤：</p><ol><li><strong>检查当前节点是否为 <code>null</code></strong>：如果当前节点为 <code>null</code>，说明已经到达了树的底部而没有找到目标值，因此返回 <code>null</code>。</li><li><strong>比较当前节点的值与目标值</strong>： <ul><li>如果目标值等于当前节点的值，那么找到了目标节点，返回当前节点。</li><li>如果目标值小于当前节点的值，说明目标节点（如果存在）一定在当前节点的左子树中，因此递归地在当前节点的左子树中查找目标值。</li><li>如果目标值大于当前节点的值，说明目标节点（如果存在）一定在当前节点的右子树中，因此递归地在当前节点的右子树中查找目标值。</li></ul></li><li><strong>递归查找</strong>：根据目标值与当前节点值的比较结果，选择左子树或右子树进行递归查找。</li></ol><h2 id="代码展示" tabindex="-1"><a class="header-anchor" href="#代码展示" aria-hidden="true">#</a> 代码展示</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">searchBST</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">==</span> root<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> root<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&lt;</span> root<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">searchBST</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&gt;</span> root<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">searchBST</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>时间复杂度：O(h)，其中h是树的高度。在最坏的情况下（即树高度最大时），算法的时间复杂度与树的高度成线性关系。对于一棵平衡的二叉搜索树，时间复杂度是O(log n)，其中n是树中节点的数量。对于一棵非平衡的二叉搜索树，最坏情况下的时间复杂度可能达到O(n)。</p><p>空间复杂度：O(h)，递归调用栈的最大深度等于树的高度h。对于平衡二叉搜索树，空间复杂度是O(log n)，对于非平衡二叉搜索树，最坏情况下的空间复杂度是O(n)。</p><h2 id="迭代法" tabindex="-1"><a class="header-anchor" href="#迭代法" aria-hidden="true">#</a> 迭代法</h2><p>一提到二叉树遍历的迭代法，可能立刻想起 <strong>使用栈来模拟深度遍历</strong>，<strong>使用队列来模拟广度遍历</strong>。</p><p>对于二叉搜索树可就不一样了，因为二叉搜索树的特殊性，也就是节点的有序性，可以不使用辅助栈或者队列就可以写出迭代法。</p><p>对于一般二叉树，递归过程中还有回溯的过程，例如走一个左方向的分支走到头了，那么要调头，再走右分支。</p><p>而 <strong>对于二叉搜索树，不需要回溯的过程，因为节点的有序性已经帮我们确定了搜索的方向。</strong></p><p>算法步骤</p><ol><li><strong>初始化结果节点</strong>：首先，定义一个 <code>TreeNode</code> 类型的变量 <code>result</code>，初始化为 <code>null</code>，用于存储查找的结果。</li><li><strong>检查根节点是否为空</strong>：如果传入的根节点 <code>root</code> 为空，则直接返回 <code>null</code>，表示树中没有节点，因此查找失败。</li><li><strong>将根节点赋值给结果变量</strong>：将 <code>root</code> 赋值给 <code>result</code>，以便从根节点开始进行查找。</li><li><strong>迭代查找</strong>：使用 <code>while</code>循环不断迭代查找： <ul><li>如果 <code>val</code> 等于 <code>result</code> 节点的值，说明已经找到目标节点，跳出循环。</li><li>如果 <code>val</code> 小于 <code>result</code> 节点的值，说明目标节点（如果存在）位于当前节点的左子树中，因此将 <code>result</code> 更新为其左子节点，继续迭代。</li><li>如果 <code>val</code> 大于 <code>result</code> 节点的值，说明目标节点（如果存在）位于当前节点的右子树中，因此将 <code>result</code> 更新为其右子节点，继续迭代。</li></ul></li><li><strong>返回结果</strong>：循环结束后，<code>result</code> 要么是目标节点（找到目标值），要么是 <code>null</code>（未找到目标值）。返回 <code>result</code> 作为查找结果。</li></ol><h2 id="代码展示-1" tabindex="-1"><a class="header-anchor" href="#代码展示-1" aria-hidden="true">#</a> 代码展示</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">searchBST</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">TreeNode</span> result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    result <span class="token operator">=</span> root<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">==</span> result<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&lt;</span> result<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            result <span class="token operator">=</span> result<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&gt;</span> result<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            result <span class="token operator">=</span> result<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>时间复杂度：O(h)，其中h是树的高度。在最坏的情况下（树高度最大时），算法的时间复杂度与树的高度成线性关系。对于平衡的二叉搜索树，时间复杂度是O(log n)，其中n是树中节点的数量。对于非平衡的二叉搜索树，最坏情况下的时间复杂度可能达到O(n)。</p><p>空间复杂度：O(1)，算法只使用了有限的几个变量，与树的大小和形状无关。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>这种迭代方法提供了一种空间效率更高的方式来在二叉搜索树中查找一个值，特别适合于深度较大的树，因为它避免了递归造成的栈空间开销。</p>`,33),c=[l];function i(u,r){return s(),a("div",null,c)}const k=n(p,[["render",i],["__file","700.erchasousuoshuzhongdesousuo.html.vue"]]);export{k as default};
