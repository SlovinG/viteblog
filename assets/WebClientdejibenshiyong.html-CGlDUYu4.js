import{_ as n,o as s,c as a,a as t,f as p}from"./app-GYMnAgnr.js";const e="/viteblog/assets/640-1701583600414-1-RtLXwp09.png",o={},c=p(`<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><p>在 Spring 5 之前，如果我们想要调用其他系统提供的HTTP服务，我们通常可以使用 Spring 提供的 RestTemplate 来访问。RestTemplate 用法很简单，但它的不足之处在于它的请求是 <strong>同步阻塞</strong> 模式，因此存在一定的性能瓶颈，当然如果想要使用异步方式请求，也可以使用 AsyncRestTemplate。</p><p>从 Spring 5 开始，Spring 中全面引入了 Reactive 响应式编程，WebClient 就属于 Spring WebFlux 的一部分。WebClient 的请求模式属于异步非阻塞、反应式的，能够以少量固定的线程处理高并发的 HTTP 请求。</p><p>因此，从 Spring 5 开始，HTTP 服务之间的通信方式我们可以考虑使用 WebCLient 来取代之前的 RestTemplate。</p><p><strong>重点：即使升级了 spring web 6.0.0 版本，也无法在 HttpRequestFactory 中设置请求超时，这是放弃使用 RestTemplate 的最大因素之一。</strong></p><h2 id="特点" tabindex="-1"><a class="header-anchor" href="#特点" aria-hidden="true">#</a> 特点</h2><p>webClient 是一个功能完善的 HTTP 请求客户端，支持以下内容：</p><ul><li><strong>非阻塞I/O</strong>：WebClient 构建在 Reactor 之上，它提供了一种非阻塞、反应式的方法来处理 I/O。这可以在高流量应用程序中实现更好的可扩展性和更高的性能。</li><li><strong>反应流回压</strong>（即消费者负载过高时，主动反馈生产者放慢速度的机制）</li><li><strong>具有高并发性</strong>，硬件资源消耗更少</li><li><strong>流程的 API 设计</strong>：可以更轻松地配置和自定义请求</li><li><strong>同步与异步交互</strong></li><li><strong>流式传输支持</strong>：WebClient 支持请求和响应正文的流式传输，这对于处理大文件或实时数据非常有用。</li><li><strong>改进的错误处理</strong> ：WebClient 提供比 RestTemplate 更好的错误处理和日志记录，从而更轻松地诊断和解决问题。</li></ul><h2 id="使用方法" tabindex="-1"><a class="header-anchor" href="#使用方法" aria-hidden="true">#</a> 使用方法</h2><h3 id="添加依赖" tabindex="-1"><a class="header-anchor" href="#添加依赖" aria-hidden="true">#</a> 添加依赖</h3><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-webflux<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建-webclient-实例" tabindex="-1"><a class="header-anchor" href="#创建-webclient-实例" aria-hidden="true">#</a> 创建 WebClient 实例</h3><p>创建 WebClient 最简单的方法是通过静态工厂方法创建：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 1.创建WebClient</span>
<span class="token class-name">WebClient</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 2.创建WebClient并且指定baseURL</span>
<span class="token class-name">WebClient</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">String</span> baseUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以使用 <strong>WebClient.builder</strong> 提供更多的选项：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 3.通过builder创建WebClient</span>
<span class="token class-name">WebClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="配置-webclient" tabindex="-1"><a class="header-anchor" href="#配置-webclient" aria-hidden="true">#</a> 配置 WebClient</h3><p>WebClient 实例构造器可以设置一些基础的全局web请求配置信息，比如默认的 cookie、header、baseUrl 等。</p><p>示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpHeaders</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpMethod</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>function<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">ClientResponse</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>function<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">ExchangeFilterFunction</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>function<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">WebClient</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">DefaultUriBuilderFactory</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebClientExample</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">WebClient</span> webClient <span class="token operator">=</span> <span class="token class-name">WebClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token comment">//修改maxInMemorySize的缓存值，默认是256k，修改为10MB</span>
                <span class="token punctuation">.</span><span class="token function">codecs</span><span class="token punctuation">(</span>configurer<span class="token operator">-&gt;</span>configurer<span class="token punctuation">.</span><span class="token function">defaultCodecs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">maxInMemorySize</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">clientConnector</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CustomClientHttpConnector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">defaultCookie</span><span class="token punctuation">(</span><span class="token string">&quot;sessionId&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">defaultHeaders</span><span class="token punctuation">(</span>headers <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                    headers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;Authorization&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Bearer token&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">defaultRequest</span><span class="token punctuation">(</span>defaultRequest <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                    defaultRequest<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token class-name">HttpMethod</span><span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    defaultRequest<span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">&quot;/api&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    defaultRequest<span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span>httpHeaders <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                        httpHeaders<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;Custom-Header&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Custom-Value&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">exchangeStrategies</span><span class="token punctuation">(</span>builder <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 配置交换策略</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">ExchangeFilterFunction</span><span class="token punctuation">.</span><span class="token function">ofRequestProcessor</span><span class="token punctuation">(</span>clientRequest <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 对请求进行预处理</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Processing request: &quot;</span> <span class="token operator">+</span> clientRequest<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> clientRequest<span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span> clientRequest<span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">filters</span><span class="token punctuation">(</span>filters <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 添加多个自定义过滤器</span>
                    filters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">CustomExchangeFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">uriBuilderFactory</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DefaultUriBuilderFactory</span><span class="token punctuation">(</span><span class="token string">&quot;https://api.example.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 发起GET请求</span>
        webClient<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">&quot;/resource&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">retrieve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">bodyToMono</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">doOnTerminate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Request completed.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>responseBody <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Response body: &quot;</span> <span class="token operator">+</span> responseBody<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 自定义ClientHttpConnector</span>
    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">CustomClientHttpConnector</span> <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>function<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span>ClientHttpConnector</span> <span class="token punctuation">{</span>
        <span class="token comment">// 实现自定义的ClientHttpConnector</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 自定义ExchangeFilterFunction</span>
    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">CustomExchangeFilter</span> <span class="token keyword">implements</span> <span class="token class-name">ExchangeFilterFunction</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">WebClient<span class="token punctuation">.</span>ResponseSpec</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">ClientRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ExchangeFunction</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 对请求和响应进行处理</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Custom filter processing request: &quot;</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> next<span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>配置说明</strong>：</p><ul><li><code>codecs(Consumer&lt;ClientCodecConfigurer&gt; consumer)</code>：该方法允许你配置用于请求和响应体编码和解码的编解码器，默认256K</li><li><code>clientConnector(ClientHttpConnector connector)</code>：设置自定义的 <code>ClientHttpConnector</code> 来控制 <code>WebClient</code> 与 <code>HTTP</code> 服务器之间的通信。例如，你可以配置连接池和超时时间</li><li><code>defaultCookie(String name, String value)</code> 和 <code>defaultCookies(Consumer&lt;MultiValueMap&lt;String, String&gt;&gt;cookiesConsumer)</code>：<code>defaultCookie</code> 方法设置一个默认的<code>Cookie</code>，而 <code>defaultCookies</code> 允许你设置多个 <code>Cookie</code></li><li><code>defaultHeader(String name, String value)</code> 和 <code>defaultHeaders(Consumer&lt;HttpHeaders&gt;headersConsumer)</code>：<code>defaultHeader</code>方法设置一个默认的头信息，而<code>defaultHeaders</code>允许你设置多个头信息</li><li><code>defaultRequest(Consumer&lt;DefaultUriBuilderFactory&gt;defaultRequestConsumer)</code>：该方法配置默认的请求属性。例如，你可以设置默认的<code>HTTP</code>方法、<code>URI</code>和其他请求参数。</li><li><code>defaultUriVariables(Consumer&lt;DefaultUriBuilderFactory&gt;uriVariablesConsumer)</code>：该方法允许你设置默认的<code>URI</code>变量，这些变量可以在<code>URI</code>模板中作为占位符使用。</li><li><code>exchangeStrategies(Consumer&lt;ExchangeStrategies.Builder&gt;exchangeStrategiesConsumer)</code>：定制<code>WebClient</code>使用的交换策略，比如请求和响应体的序列化和反序列化方式。</li><li><code>filter(ClientFilter... filters)</code> 和 <code>filters(Consumer&lt;List&lt;ClientFilter&gt;&gt;filtersConsumer)</code>：允许你为WebClient添加过滤器，用于对请求和响应进行预处理或后处理，使用<code>filters</code>方法添加多个过滤器，也可以使用<code>filter</code>方法逐个添加。</li><li><code>uriBuilderFactory(UriBuilderFactory uriBuilderFactory)</code>：允许你设置自定义的<code>UriBuilderFactory</code>，用于从模板字符串创建<code>URI</code>。</li></ul><p>注意：一旦构建完成，<code>WebClient</code> 就是不可变的，但可以<code>mutate</code> 克隆它并构建一个修改后的副本：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">WebClient</span> client1 <span class="token operator">=</span> <span class="token class-name">WebClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>filterA<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>filterB<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 创建一个副本</span>
<span class="token class-name">WebClient</span> client2 <span class="token operator">=</span> client1<span class="token punctuation">.</span><span class="token function">mutate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>filterC<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>filterD<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="同步发送请求-就像-resttemplate-一样" tabindex="-1"><a class="header-anchor" href="#同步发送请求-就像-resttemplate-一样" aria-hidden="true">#</a> 同步发送请求（就像 RestTemplate 一样）</h3><p>如果你想坚持使用发送 HTTP 请求并等待响应的老方法，也可以使用 WebClient 实现如下所示的相同功能：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">postSynchronously</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">String</span> requestBody<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token constant">LOG</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Going to hit API - URL {} Body {}&quot;</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> requestBody<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> response <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        response <span class="token operator">=</span>
            client
            <span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token class-name">HttpMethod</span><span class="token punctuation">.</span><span class="token constant">POST</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">ALL</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_JSON</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">bodyValue</span><span class="token punctuation">(</span>requestBody<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">retrieve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">bodyToMono</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">block</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token constant">LOG</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Error while calling API &quot;</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RunTimeException</span><span class="token punctuation">(</span><span class="token string">&quot;XYZ service api error: &quot;</span> <span class="token operator">+</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        <span class="token constant">LOG</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;API Response {}&quot;</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> response<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>block()</code> 用于同步等待响应，这可能并不适合所有情况，你可能需要考虑 <code>subscribe()</code> 异步使用和处理响应。</p><h3 id="异步发送请求" tabindex="-1"><a class="header-anchor" href="#异步发送请求" aria-hidden="true">#</a> 异步发送请求</h3><p>有时我们不想等待响应，而是希望异步处理响应，这可以按如下方式完成：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">makePostRequestAsync</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">String</span> postData<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">WebClient</span> webClient <span class="token operator">=</span> <span class="token class-name">WebClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> webClient<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_FORM_URLENCODED</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token class-name">BodyInserters</span><span class="token punctuation">.</span><span class="token function">fromFormData</span><span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">,</span> postData<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">retrieve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">bodyToMono</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要使用此函数，只需传入要向其发送 POST 请求的 URL 以及要在请求正文中以 URL 编码字符串形式发送的数据。该函数将返回来自服务器的响应，或者如果请求由于任何原因失败，则返回一条错误消息。</p><p>要使用响应，您可以订阅Mono并异步处理响应。下面是一个例子：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">makePostRequestAsync</span><span class="token punctuation">(</span> <span class="token string">&quot;https://example.com/api&quot;</span> <span class="token punctuation">,</span> <span class="token string">&quot;param1=value1¶m2=value2&quot;</span> <span class="token punctuation">)</span> 
    <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>response <span class="token operator">-&gt;</span> <span class="token punctuation">{</span> 
        <span class="token comment">// 处理响应</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span>println <span class="token punctuation">(</span> response <span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span><span class="token punctuation">,</span> error <span class="token operator">-&gt;</span> <span class="token punctuation">{</span> 
        <span class="token comment">// 处理错误</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span>println <span class="token punctuation">(</span> error<span class="token punctuation">.</span>getMessage <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     
    <span class="token punctuation">}</span>
              <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>subscribe()</code> 用于异步处理响应，你可以提供两个 lambda 表达式作为 <code>subscribe()</code> 的参数。如果请求成功并收到响应作为参数，则执行第一个 lambda 表达式；如果请求失败并收到错误作为参数，则执行第二个 lambda 表达式。</p><h3 id="处理-4xx-和-5xx-错误" tabindex="-1"><a class="header-anchor" href="#处理-4xx-和-5xx-错误" aria-hidden="true">#</a> 处理 4XX 和 5XX 错误</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">makePostRequestAsync</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">String</span> postData<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">WebClient</span> webClient <span class="token operator">=</span> <span class="token class-name">WebClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">baseUrl</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> webClient<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_FORM_URLENCODED</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token class-name">BodyInserters</span><span class="token punctuation">.</span><span class="token function">fromFormData</span><span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">,</span> postData<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">retrieve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">onStatus</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token operator">::</span><span class="token function">is4xxClientError</span><span class="token punctuation">,</span> clientResponse <span class="token operator">-&gt;</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;Client error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">onStatus</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token operator">::</span><span class="token function">is5xxServerError</span><span class="token punctuation">,</span> clientResponse <span class="token operator">-&gt;</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;Server error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">bodyToMono</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在此示例中，该 <code>onStatus()</code> 方法被调用两次，一次针对 4xx 客户端错误，一次针对 5xx 服务器错误。<code>onStatus()</code> 每次调用都采用两个参数：</p><ul><li>aPredicate 确定错误状态代码是否与条件匹配</li><li>aFunction 用于返回 Mono，即要传播到订阅者的错误信息。</li></ul><p>如果状态代码与条件匹配，Mono 则会发出相应的状态代码，并且 Mono 链会因错误而终止。在此示例中，Mono 将发出一条 RuntimeException 错误消息，指示该错误是客户端错误还是服务器错误。</p><h3 id="根据错误状态采取行动" tabindex="-1"><a class="header-anchor" href="#根据错误状态采取行动" aria-hidden="true">#</a> 根据错误状态采取行动</h3><p>要根据 Mono 的 <code>subscribe()</code> 方法中的错误采取操作，可以在 <code>subscribe</code> 函数中处理响应的 lambda 表达式之后添加另一个 lambda 表达。如果在处理 Monumber 的过程中出现错误，则执行第二个 lambda 表达式。</p><p>下面是如何使用 makePostRequestAsync 函数和处理 subscribe 方法中的错误的更新示例:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">makePostRequestAsync</span><span class="token punctuation">(</span><span class="token string">&quot;https://example.com/api&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;param1=value1&amp;param2=value2&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>response <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// handle the response</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> error <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// handle the error</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;An error occurred: &quot;</span> <span class="token operator">+</span> error<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>error <span class="token keyword">instanceof</span> <span class="token class-name">WebClientResponseException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">WebClientResponseException</span> webClientResponseException <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">WebClientResponseException</span><span class="token punctuation">)</span> error<span class="token punctuation">;</span>
        <span class="token keyword">int</span> statusCode <span class="token operator">=</span> webClientResponseException<span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> statusText <span class="token operator">=</span> webClientResponseException<span class="token punctuation">.</span><span class="token function">getStatusText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Error status code: &quot;</span> <span class="token operator">+</span> statusCode<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Error status text: &quot;</span> <span class="token operator">+</span> statusText<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>subscribe()</code> 方法中的第二个 lambda 表达式检查错误是否是 WebClientResponseException 的实例，这是 WebClient 在服务器有错误响应时抛出的特定类型的异常。如果它是 WebClientResponseException 的实例，则代码将从异常中提取状态代码和状态文本，并将它们记录到日志中。</p><p>还可以根据发生的特定错误在此 lambda 表达式中添加其他错误处理逻辑。例如，你可以重试请求、回退到默认值或以特定方式记录错误。</p><h3 id="处理成功响应和错误的完整代码" tabindex="-1"><a class="header-anchor" href="#处理成功响应和错误的完整代码" aria-hidden="true">#</a> 处理成功响应和错误的完整代码</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>responseMono<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>
response <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// handle the response</span>
  <span class="token constant">LOG</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;SUCCESS API Response {}&quot;</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
error <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// handle the error</span>
  <span class="token constant">LOG</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;An error occurred: {}&quot;</span><span class="token punctuation">,</span> error<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token constant">LOG</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;error class: {}&quot;</span><span class="token punctuation">,</span> error<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Errors / Exceptions from Server</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>error <span class="token keyword">instanceof</span> <span class="token class-name">WebClientResponseException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">WebClientResponseException</span> webClientResponseException <span class="token operator">=</span>
        <span class="token punctuation">(</span><span class="token class-name">WebClientResponseException</span><span class="token punctuation">)</span> error<span class="token punctuation">;</span>
    <span class="token keyword">int</span> statusCode <span class="token operator">=</span> webClientResponseException<span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> statusText <span class="token operator">=</span> webClientResponseException<span class="token punctuation">.</span><span class="token function">getStatusText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token constant">LOG</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Error status code: {}&quot;</span><span class="token punctuation">,</span> statusCode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token constant">LOG</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Error status text: {}&quot;</span><span class="token punctuation">,</span> statusText<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>statusCode <span class="token operator">&gt;=</span> <span class="token number">400</span> <span class="token operator">&amp;&amp;</span> statusCode <span class="token operator">&lt;</span> <span class="token number">500</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token constant">LOG</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>
          <span class="token string">&quot;Error Response body {}&quot;</span><span class="token punctuation">,</span> webClientResponseException<span class="token punctuation">.</span><span class="token function">getResponseBodyAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">Throwable</span> cause <span class="token operator">=</span> webClientResponseException<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token constant">LOG</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;webClientResponseException&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> cause<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token constant">LOG</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Cause {}&quot;</span><span class="token punctuation">,</span> cause<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>cause <span class="token keyword">instanceof</span> <span class="token class-name">ReadTimeoutException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token constant">LOG</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;ReadTimeout Exception&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>cause <span class="token keyword">instanceof</span> <span class="token class-name">TimeoutException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token constant">LOG</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Timeout Exception&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// Client errors i.e. Timeouts etc - </span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>error <span class="token keyword">instanceof</span> <span class="token class-name">WebClientRequestException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token constant">LOG</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;webClientRequestException&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">WebClientRequestException</span> webClientRequestException <span class="token operator">=</span>
        <span class="token punctuation">(</span><span class="token class-name">WebClientRequestException</span><span class="token punctuation">)</span> error<span class="token punctuation">;</span>
    <span class="token class-name">Throwable</span> cause <span class="token operator">=</span> webClientRequestException<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> cause<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token constant">LOG</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Cause {}&quot;</span><span class="token punctuation">,</span> cause<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>cause <span class="token keyword">instanceof</span> <span class="token class-name">ReadTimeoutException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token constant">LOG</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;ReadTimeout Exception&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      
      <span class="token keyword">if</span> <span class="token punctuation">(</span>cause <span class="token keyword">instanceof</span> <span class="token class-name">ConnectTimeoutException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token constant">LOG</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Connect Timeout Exception&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="超时" tabindex="-1"><a class="header-anchor" href="#超时" aria-hidden="true">#</a> 超时</h3><p>我们可以在每个请求中设置超时，如下所示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">return</span> webClient
    <span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>httpMethod<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>uri<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span>httpHeaders <span class="token operator">-&gt;</span> httpHeaders<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>additionalHeaders<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">bodyValue</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>requestEntity<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">retrieve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">bodyToMono</span><span class="token punctuation">(</span>responseType<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">timeout</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMillis</span><span class="token punctuation">(</span>readTimeout<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// request timeout for this request</span>
    <span class="token punctuation">.</span><span class="token function">block</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是，我们无法在每个请求中设置连接超时，这是WebClient 的属性，只能设置一次。如果需要，我们始终可以使用新的连接超时值创建一个新的 Web 客户端实例。</p><p>连接超时、读取超时和请求超时的区别如下：</p><p><img src="`+e+`" alt="图片"></p><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/*******************************设置日志打印级别*******************************/</span>
    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">LoggerContext</span><span class="token punctuation">)</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getILoggerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">getLoggerList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>logger <span class="token operator">-&gt;</span> logger<span class="token punctuation">.</span><span class="token function">setLevel</span><span class="token punctuation">(</span><span class="token class-name">Level</span><span class="token punctuation">.</span><span class="token constant">ERROR</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/******************1.设置连接超时时间********************/</span>
    <span class="token doc-comment comment">/******************2.设置响应超时时间********************/</span>
    <span class="token doc-comment comment">/******************3.设置读取超时时间********************/</span>
    <span class="token class-name">HttpClient</span> httpClient <span class="token operator">=</span> <span class="token class-name">HttpClient</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token class-name">ChannelOption</span><span class="token punctuation">.</span><span class="token constant">CONNECT_TIMEOUT_MILLIS</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">responseTimeout</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMillis</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">doOnConnected</span><span class="token punctuation">(</span>conn <span class="token operator">-&gt;</span> conn<span class="token punctuation">.</span><span class="token function">addHandlerLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ReadTimeoutHandler</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">WebClient</span> client <span class="token operator">=</span> <span class="token class-name">WebClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clientConnector</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ReactorClientHttpConnector</span><span class="token punctuation">(</span>httpClient<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">&quot;http://localhost:8888/scp/mgmt/opn/log/list&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> requestBody <span class="token operator">=</span> <span class="token string">&quot;{\\&quot;stime\\&quot;:\\&quot;2023-07-21 10:19:00\\&quot;,\\&quot;etime\\&quot;:\\&quot;2023-10-19 11:19:00\\&quot;,\\&quot;page\\&quot;:\\&quot;1\\&quot;,\\&quot;limit\\&quot;:\\&quot;2\\&quot;}&quot;</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/*******************************同    步*******************************/</span>
    <span class="token class-name">String</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token class-name">HttpMethod</span><span class="token punctuation">.</span><span class="token constant">POST</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>
            <span class="token comment">// 添加请求头信息</span>
            <span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpHeaders</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token annotation punctuation">@Override</span>
                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">HttpHeaders</span> headers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    headers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;usid&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;a29320c00e3246bb9c76add28745c3af&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token comment">// 设置接受的媒体类型为所有类型</span>
            <span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">ALL</span><span class="token punctuation">)</span>
            <span class="token comment">// 设置请求的内容类型为JSON</span>
            <span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_JSON</span><span class="token punctuation">)</span>
            <span class="token comment">// 设置请求体的值，即要发送的数据</span>
            <span class="token punctuation">.</span><span class="token function">bodyValue</span><span class="token punctuation">(</span>requestBody<span class="token punctuation">)</span>
            <span class="token comment">// 执行请求并获取响应</span>
            <span class="token punctuation">.</span><span class="token function">retrieve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token comment">// 将响应体转换为字符串类型的Mono对象</span>
            <span class="token punctuation">.</span><span class="token function">bodyToMono</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
            <span class="token comment">// 设置请求超时</span>
            <span class="token punctuation">.</span><span class="token function">timeout</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMillis</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token comment">// 阻塞当前线程，等待响应结果并返回</span>
            <span class="token punctuation">.</span><span class="token function">block</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;同步响应返回:&quot;</span><span class="token operator">+</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/*******************************异    步*******************************/</span>
    <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> mono <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token class-name">HttpMethod</span><span class="token punctuation">.</span><span class="token constant">POST</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>
            <span class="token comment">// 添加请求头信息</span>
            <span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span>headers <span class="token operator">-&gt;</span> headers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;usid&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;a29320c00e3246bb9c76add28745c3af&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token comment">// 设置接受的媒体类型为所有类型</span>
            <span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">ALL</span><span class="token punctuation">)</span>
            <span class="token comment">// 设置请求的内容类型为JSON</span>
            <span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_JSON</span><span class="token punctuation">)</span>
            <span class="token comment">// 设置请求体的值，即要发送的数据</span>
            <span class="token punctuation">.</span><span class="token function">bodyValue</span><span class="token punctuation">(</span>requestBody<span class="token punctuation">)</span>
            <span class="token comment">// 执行请求并获取响应</span>
            <span class="token punctuation">.</span><span class="token function">retrieve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token comment">// 将响应体转换为字符串类型的Mono对象</span>
            <span class="token punctuation">.</span><span class="token function">bodyToMono</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    mono<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>res <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;异步响应正常返回:&quot;</span><span class="token operator">+</span>res<span class="token punctuation">)</span><span class="token punctuation">,</span> err <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;异步响应异常返回:&quot;</span><span class="token operator">+</span>err<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 在异步请求完成前等待一段时间（这里用于演示，在实际应用中可能不需要）</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="工具类" tabindex="-1"><a class="header-anchor" href="#工具类" aria-hidden="true">#</a> 工具类</h2><h3 id="proxydo-代理实体" tabindex="-1"><a class="header-anchor" href="#proxydo-代理实体" aria-hidden="true">#</a> ProxyDO（代理实体）</h3><p>如果要使用代理，则先构建这个代理实体</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">AllArgsConstructor</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang3<span class="token punctuation">.</span></span><span class="token class-name">StringUtils</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>constraints<span class="token punctuation">.</span></span><span class="token class-name">NotBlank</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * ProxyDO
 *
 * <span class="token keyword">@author</span> 陈伟伟 John Chen cww23218@ly.com
 * <span class="token keyword">@since</span> 2019/11/15
 */</span>
<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyDO</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 服务地址（用于代理服务的地址）（必填）
     */</span>
    <span class="token annotation punctuation">@NotBlank</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> serviceAddress<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 端口（必填）
     */</span>
    <span class="token annotation punctuation">@NotBlank</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> port<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 内网IP（选填，通常用于IP切换等Job中）
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> innerIp<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 用户名（选填，如有）
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> userName<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 密码（选填，如有）
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 获取连接字符串
     * 格式：[serviceAddress]:[port]<span class="token punctuation">{</span>:[userName]:[password]<span class="token punctuation">}</span>
     *
     * <span class="token keyword">@return</span> 返回用于代理连接的字符串
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getProxyContentStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">StringBuilder</span> stringBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span>serviceAddress <span class="token operator">+</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>userName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>userName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> stringBuilder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="webclientutils-主类" tabindex="-1"><a class="header-anchor" href="#webclientutils-主类" aria-hidden="true">#</a> WebClientUtils（主类）</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebClientUtils</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 默认10s超时时间
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Duration</span> <span class="token constant">DEFAULT_REQUEST_TIMEOUT</span> <span class="token operator">=</span> <span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 默认代理超时时间
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Long</span> <span class="token constant">DEFAULT_PROXY_TIMEOUT_MILLIS</span> <span class="token operator">=</span> <span class="token constant">DEFAULT_REQUEST_TIMEOUT</span><span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//region 生成WebClient.Builder的方法</span>

    <span class="token doc-comment comment">/**
     * 给了一个默认的WebClient，这个Client里面配置了默认请求超时时间
     *
     * <span class="token keyword">@return</span> 返回一个带超时时间的<span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">WebClient</span><span class="token punctuation">.</span><span class="token class-name">Builder</span></span><span class="token punctuation">}</span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">WebClient<span class="token punctuation">.</span>Builder</span> <span class="token function">getDefaultWebClientBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">getWebClientBuilder</span><span class="token punctuation">(</span><span class="token constant">DEFAULT_REQUEST_TIMEOUT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * [基础创建方法]
     * 给了一个默认的WebClient，这个Client里面配置了指定了请求超时时间
     *
     * <span class="token keyword">@param</span> <span class="token parameter">requestTimeOut</span> 请求超时时间
     * <span class="token keyword">@return</span> 返回一个带超时时间的<span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">WebClient</span><span class="token punctuation">.</span><span class="token class-name">Builder</span></span><span class="token punctuation">}</span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">WebClient<span class="token punctuation">.</span>Builder</span> <span class="token function">getWebClientBuilder</span><span class="token punctuation">(</span><span class="token class-name">Duration</span> requestTimeOut<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>requestTimeOut <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            requestTimeOut <span class="token operator">=</span> <span class="token constant">DEFAULT_REQUEST_TIMEOUT</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token class-name">WebClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clientConnector</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ReactorClientHttpConnector</span><span class="token punctuation">(</span><span class="token class-name">HttpClient</span>
                <span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token comment">//重新定向开启</span>
                <span class="token punctuation">.</span><span class="token function">followRedirect</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">responseTimeout</span><span class="token punctuation">(</span>requestTimeOut<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 给到一个带默认超时时间，并带有不校验任何SSL整数的WebClient
     *
     * <span class="token keyword">@return</span> 返回一个带默认超时时间和默认全局信任的SSL请求校验器<span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">WebClient</span><span class="token punctuation">.</span><span class="token class-name">Builder</span></span><span class="token punctuation">}</span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">WebClient<span class="token punctuation">.</span>Builder</span> <span class="token function">getWebClientBuilderWithSslTrust</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">getWebClientBuilderWithSslTrust</span><span class="token punctuation">(</span><span class="token constant">DEFAULT_REQUEST_TIMEOUT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 给到一个带超时时间，并带有不校验任何SSL整数的WebClient
     *
     * <span class="token keyword">@param</span> <span class="token parameter">requestTimeOut</span> 超时时间
     * <span class="token keyword">@return</span> 返回一个带超时时间和默认全局信任的SSL请求校验器<span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">WebClient</span><span class="token punctuation">.</span><span class="token class-name">Builder</span></span><span class="token punctuation">}</span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">WebClient<span class="token punctuation">.</span>Builder</span> <span class="token function">getWebClientBuilderWithSslTrust</span><span class="token punctuation">(</span><span class="token class-name">Duration</span> requestTimeOut<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">getWebClientBuilderWithSslTrust</span><span class="token punctuation">(</span>requestTimeOut<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * [基础创建方法]
     * 给到一个带超时时间，并带有不校验任何SSL整数的WebClient
     *
     * <span class="token keyword">@param</span> <span class="token parameter">requestTimeOut</span>     超时时间
     * <span class="token keyword">@param</span> <span class="token parameter">compressionEnabled</span> 开启压缩？默认关闭
     * <span class="token keyword">@return</span> 返回一个带超时时间和默认全局信任的SSL请求校验器<span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">WebClient</span><span class="token punctuation">.</span><span class="token class-name">Builder</span></span><span class="token punctuation">}</span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">WebClient<span class="token punctuation">.</span>Builder</span> <span class="token function">getWebClientBuilderWithSslTrust</span><span class="token punctuation">(</span><span class="token class-name">Duration</span> requestTimeOut<span class="token punctuation">,</span> <span class="token keyword">boolean</span> compressionEnabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>requestTimeOut <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            requestTimeOut <span class="token operator">=</span> <span class="token constant">DEFAULT_REQUEST_TIMEOUT</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token class-name">WebClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clientConnector</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ReactorClientHttpConnector</span><span class="token punctuation">(</span><span class="token class-name">HttpClient</span>
                <span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token comment">//重新定向开启</span>
                <span class="token punctuation">.</span><span class="token function">followRedirect</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
                <span class="token comment">//这里注入了一个抛弃一切SSL认证的sslContext</span>
                <span class="token punctuation">.</span><span class="token function">secure</span><span class="token punctuation">(</span>sslContextSpec <span class="token operator">-&gt;</span> sslContextSpec<span class="token punctuation">.</span><span class="token function">sslContext</span><span class="token punctuation">(</span><span class="token class-name">SslContextBuilder</span><span class="token punctuation">.</span><span class="token function">forClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trustManager</span><span class="token punctuation">(</span><span class="token class-name">InsecureTrustManagerFactory</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">responseTimeout</span><span class="token punctuation">(</span>requestTimeOut<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">compress</span><span class="token punctuation">(</span>compressionEnabled<span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 给到一个带超时时间，带代理，并带有不校验任何SSL整数的WebClient
     *
     * <span class="token keyword">@param</span> <span class="token parameter">requestTimeOut</span> 超时时间
     * <span class="token keyword">@param</span> <span class="token parameter">proxyDO</span>        代理实体
     * <span class="token keyword">@return</span> 返回一个带超时时间和默认全局信任的SSL请求校验器<span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">WebClient</span><span class="token punctuation">.</span><span class="token class-name">Builder</span></span><span class="token punctuation">}</span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">WebClient<span class="token punctuation">.</span>Builder</span> <span class="token function">getWebClientBuilderWithSslTrustAndPolicy</span><span class="token punctuation">(</span><span class="token class-name">Duration</span> requestTimeOut<span class="token punctuation">,</span> <span class="token class-name">ProxyDO</span> proxyDO<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">getWebClientBuilderWithSslTrustAndPolicy</span><span class="token punctuation">(</span>requestTimeOut<span class="token punctuation">,</span> proxyDO<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * [基础创建方法]
     * 给到一个带超时时间，带代理，并带有不校验任何SSL整数的WebClient
     *
     * <span class="token keyword">@param</span> <span class="token parameter">requestTimeOut</span>     超时时间
     * <span class="token keyword">@param</span> <span class="token parameter">proxyDO</span>            代理实体
     * <span class="token keyword">@param</span> <span class="token parameter">compressionEnabled</span> 开启压缩？默认关闭
     * <span class="token keyword">@return</span> 返回一个带超时时间和默认全局信任的SSL请求校验器<span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">WebClient</span><span class="token punctuation">.</span><span class="token class-name">Builder</span></span><span class="token punctuation">}</span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">WebClient<span class="token punctuation">.</span>Builder</span> <span class="token function">getWebClientBuilderWithSslTrustAndPolicy</span><span class="token punctuation">(</span><span class="token class-name">Duration</span> requestTimeOut<span class="token punctuation">,</span> <span class="token class-name">ProxyDO</span> proxyDO<span class="token punctuation">,</span> <span class="token keyword">boolean</span> compressionEnabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>requestTimeOut <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            requestTimeOut <span class="token operator">=</span> <span class="token constant">DEFAULT_REQUEST_TIMEOUT</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token class-name">WebClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clientConnector</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ReactorClientHttpConnector</span><span class="token punctuation">(</span><span class="token class-name">HttpClient</span>
                <span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token comment">//这里注入了一个抛弃一切SSL认证的sslContext</span>
                <span class="token punctuation">.</span><span class="token function">secure</span><span class="token punctuation">(</span>sslContextSpec <span class="token operator">-&gt;</span> sslContextSpec<span class="token punctuation">.</span><span class="token function">sslContext</span><span class="token punctuation">(</span><span class="token class-name">SslContextBuilder</span><span class="token punctuation">.</span><span class="token function">forClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trustManager</span><span class="token punctuation">(</span><span class="token class-name">InsecureTrustManagerFactory</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">responseTimeout</span><span class="token punctuation">(</span>requestTimeOut<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">compress</span><span class="token punctuation">(</span>compressionEnabled<span class="token punctuation">)</span>
                <span class="token comment">//重新定向开启</span>
                <span class="token punctuation">.</span><span class="token function">followRedirect</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
                <span class="token comment">//Spring Boot 2.4 以上</span>
                <span class="token punctuation">.</span><span class="token function">proxy</span><span class="token punctuation">(</span>proxy <span class="token operator">-&gt;</span> proxy
                        <span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token class-name">ProxyProvider<span class="token punctuation">.</span>Proxy</span><span class="token punctuation">.</span><span class="token constant">HTTP</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">host</span><span class="token punctuation">(</span>proxyDO<span class="token punctuation">.</span><span class="token function">getServiceAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">port</span><span class="token punctuation">(</span>proxyDO<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">username</span><span class="token punctuation">(</span>proxyDO<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span>username <span class="token operator">-&gt;</span> proxyDO<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token comment">//</span>
<span class="token comment">//                .tcpConfiguration(tcpClient -&gt; tcpClient.proxy(</span>
<span class="token comment">//                        p -&gt; {</span>
<span class="token comment">//                            ProxyProvider.Builder pb = p.type(ProxyProvider.Proxy.HTTP)</span>
<span class="token comment">//                                    .address(InetSocketAddress.createUnresolved(proxyDO.getServiceAddress(), proxyDO.getPort()));</span>
<span class="token comment">//                            if (StringUtils.isNotEmpty(proxyDO.getUserName())) {</span>
<span class="token comment">//                                pb.username(proxyDO.getUserName())</span>
<span class="token comment">//                                        .password(v -&gt; proxyDO.getPassword());</span>
<span class="token comment">//                            }</span>
<span class="token comment">//                            Long proxyTimeOutMillis = proxyDO.getProxyTimeOutMillis();</span>
<span class="token comment">//                            if (proxyTimeOutMillis != null &amp;&amp; proxyTimeOutMillis &gt; 0) {</span>
<span class="token comment">//                                pb.connectTimeoutMillis(proxyTimeOutMillis);</span>
<span class="token comment">//                            } else {</span>
<span class="token comment">//                                pb.connectTimeoutMillis(DEFAULT_PROXY_TIMEOUT_MILLIS);</span>
<span class="token comment">//                            }</span>
<span class="token comment">//                        }</span>
<span class="token comment">//                ))</span>
        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token doc-comment comment">/**
     * 将http相应中的Cookie转换为用于http请求中的cookie
     * 方法中仅进行简单转换，不会对Cookie有效期等进行判断
     *
     * <span class="token keyword">@param</span> <span class="token parameter">responseCookie</span> 需要被转换的cookie
     * <span class="token keyword">@return</span> 返回可以用于请求的Cookies
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">MultiValueMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">transformResponseCookiesToRequestCookies</span><span class="token punctuation">(</span><span class="token class-name">MultiValueMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">ResponseCookie</span><span class="token punctuation">&gt;</span></span> responseCookie<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">MultiValueMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> ret <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedMultiValueMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>responseCookie <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> responseCookie<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>


        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">ResponseCookie</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> entity <span class="token operator">:</span> responseCookie<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> key <span class="token operator">=</span> entity<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ResponseCookie</span><span class="token punctuation">&gt;</span></span> value <span class="token operator">=</span> entity<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> size <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> cookies <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ResponseCookie</span> cookie <span class="token operator">:</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                cookies<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cookie<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            ret<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> cookies<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,62);function l(i,u){return s(),a("div",null,[t(" more "),c])}const r=n(o,[["render",l],["__file","WebClientdejibenshiyong.html.vue"]]);export{r as default};
