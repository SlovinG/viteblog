const e=JSON.parse(`{"key":"v-afac87ec","path":"/blogs/Java/Java BufferedReaderliu.html","title":"Java BufferedReader流","lang":"zh-CN","frontmatter":{"title":"Java BufferedReader流","date":"2020-09-16T00:00:00.000Z","tags":["Java","流"],"categories":["Java"]},"headers":[{"level":2,"title":"一、什么是 BufferedReader 类","slug":"一、什么是-bufferedreader-类","link":"#一、什么是-bufferedreader-类","children":[{"level":3,"title":"1、从字符输入流中读取文本并缓冲字符，以便有效地读取字符，数组和行怎么理解？","slug":"_1、从字符输入流中读取文本并缓冲字符-以便有效地读取字符-数组和行怎么理解","link":"#_1、从字符输入流中读取文本并缓冲字符-以便有效地读取字符-数组和行怎么理解","children":[]},{"level":3,"title":"2、构造函数指定缓冲区大小也可以使用默认大小怎么理解？","slug":"_2、构造函数指定缓冲区大小也可以使用默认大小怎么理解","link":"#_2、构造函数指定缓冲区大小也可以使用默认大小怎么理解","children":[]},{"level":3,"title":"3、由Reader构成的每个读取请求都会导致相应的读取请求由基础字符或字节流构成，建议通过BufferedReader包装Reader的实例类以提高效率?","slug":"_3、由reader构成的每个读取请求都会导致相应的读取请求由基础字符或字节流构成-建议通过bufferedreader包装reader的实例类以提高效率","link":"#_3、由reader构成的每个读取请求都会导致相应的读取请求由基础字符或字节流构成-建议通过bufferedreader包装reader的实例类以提高效率","children":[]},{"level":3,"title":"4、BufferedReader替代DataInputStreams进行本地化？","slug":"_4、bufferedreader替代datainputstreams进行本地化","link":"#_4、bufferedreader替代datainputstreams进行本地化","children":[]}]},{"level":2,"title":"二、BufferedReader 类实例域","slug":"二、bufferedreader-类实例域","link":"#二、bufferedreader-类实例域","children":[]},{"level":2,"title":"三、BufferedReader 类构造函数","slug":"三、bufferedreader-类构造函数","link":"#三、bufferedreader-类构造函数","children":[{"level":3,"title":"1、使用默认的缓冲区大小来创建缓冲字符输入流，默认大小为8192个字符","slug":"_1、使用默认的缓冲区大小来创建缓冲字符输入流-默认大小为8192个字符","link":"#_1、使用默认的缓冲区大小来创建缓冲字符输入流-默认大小为8192个字符","children":[]},{"level":3,"title":"2）创建指定缓冲区大小的缓冲字符输入流，一般使用默认即可","slug":"_2-创建指定缓冲区大小的缓冲字符输入流-一般使用默认即可","link":"#_2-创建指定缓冲区大小的缓冲字符输入流-一般使用默认即可","children":[]}]},{"level":2,"title":"四、BufferedReader 类 API","slug":"四、bufferedreader-类-api","link":"#四、bufferedreader-类-api","children":[{"level":3,"title":"1、read() 方法：读取1个或多个字节，返回一个字符，当读取到文件末尾时，返回 -1","slug":"_1、read-方法-读取1个或多个字节-返回一个字符-当读取到文件末尾时-返回-1","link":"#_1、read-方法-读取1个或多个字节-返回一个字符-当读取到文件末尾时-返回-1","children":[]},{"level":3,"title":"2、fill() 方法：从底层输入流中填充字符到缓冲区中，此方法会调用StreamDecoder的方法实现字节到字符的转换","slug":"_2、fill-方法-从底层输入流中填充字符到缓冲区中-此方法会调用streamdecoder的方法实现字节到字符的转换","link":"#_2、fill-方法-从底层输入流中填充字符到缓冲区中-此方法会调用streamdecoder的方法实现字节到字符的转换","children":[]},{"level":3,"title":"3、read(char cbuf[], int off, int len)：将最多length个字符读入数组中，返回实际读入的字符个数，当读取到文件末尾时，返回 -1","slug":"_3、read-char-cbuf-int-off-int-len-将最多length个字符读入数组中-返回实际读入的字符个数-当读取到文件末尾时-返回-1","link":"#_3、read-char-cbuf-int-off-int-len-将最多length个字符读入数组中-返回实际读入的字符个数-当读取到文件末尾时-返回-1","children":[]},{"level":3,"title":"4、读一行文字并返回该行字符，若读到文件末尾，则返回null：即当遇到换行符（'\\\\ n'），回车符（'\\\\ r'）时会终止读取表示该行文字读取完毕且返回该行文字（不包含换行符和回车符）","slug":"_4、读一行文字并返回该行字符-若读到文件末尾-则返回null-即当遇到换行符-n-回车符-r-时会终止读取表示该行文字读取完毕且返回该行文字-不包含换行符和回车符","link":"#_4、读一行文字并返回该行字符-若读到文件末尾-则返回null-即当遇到换行符-n-回车符-r-时会终止读取表示该行文字读取完毕且返回该行文字-不包含换行符和回车符","children":[]},{"level":3,"title":"5、close() 方法：关闭资源释放链接","slug":"_5、close-方法-关闭资源释放链接","link":"#_5、close-方法-关闭资源释放链接","children":[]},{"level":3,"title":"6、其它的skip()、make()方法等","slug":"_6、其它的skip-、make-方法等","link":"#_6、其它的skip-、make-方法等","children":[]}]},{"level":2,"title":"五、BufferedReader 类与 InputStreamReader 类比较","slug":"五、bufferedreader-类与-inputstreamreader-类比较","link":"#五、bufferedreader-类与-inputstreamreader-类比较","children":[]}],"git":{},"filePathRelative":"blogs/Java/Java BufferedReader流.md"}`);export{e as data};
