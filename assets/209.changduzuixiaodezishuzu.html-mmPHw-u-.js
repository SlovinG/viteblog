import{_ as m,r as o,o as v,c as h,a as g,b as p,e as n,w as s,d as a,f as l}from"./app-GYMnAgnr.js";const b={},f=l(`<p><strong>难度：中等</strong></p><p>给定一个含有 <code>n</code> 个正整数的数组和一个正整数 <code>target</code> <strong>。</strong></p><p>找出该数组中满足其和 <code>≥ target</code> 的长度最小的 <strong>连续子数组</strong> <code>[numsl, numsl+1, ..., numsr-1, numsr]</code> ，并返回其长度。如果不存在符合条件的子数组，返回 <code>0</code> 。</p><p><strong>示例 1：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：target = 7, nums = [2,3,1,2,4,3]
输出：2
解释：子数组 [4,3] 是该条件下的长度最小的子数组。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：target = 4, nums = [1,4,4]
输出：1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：target = 11, nums = [1,1,1,1,1,1,1,1]
输出：0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= target &lt;= 10^(9)</code></li><li><code>1 &lt;= nums.length &lt;= 10^(5)</code></li><li><code>1 &lt;= nums[i] &lt;= 10^(5)</code></li></ul><p><strong>进阶：</strong></p><ul><li>如果你已经实现 <code>O(n)</code> 时间复杂度的解法，请尝试设计一个 <code>O(n log(n))</code> 时间复杂度的解法。</li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>根据第 3 题滑动窗口的思想，这个题我考虑使用滑动窗口的方法来做。</p><p>可以直接套滑动窗口的模板。</p><p>我的思路：</p><ol><li>设定两个指针 left 和 right，其中 right 负责寻找当前 <strong>满足其和 <code>≥ target</code> 的长度最小的连续子数组</strong> 的末尾，left 指向当前当前目标子数组的开头</li><li>设定最短字串长度 minLength，初始为 <strong>Integer.MAX_VALUE</strong></li><li>设定一个变量 sum 当作窗口，用来存储从 left 开始，到 right 结束的子数组的和</li><li>起始的时候 left 指向 0，right 往右边扫描</li><li>right 扫描到一个数字 x 的时候，增大窗口，并且更新窗口内数据 sum += x</li><li>判断 sum &gt;= target 是否成立，若成立，则左侧窗口要收缩，同时更新 minLength 的值</li><li>right == nums.length 的时候，退出循环，返回 minLength &lt; <strong>Integer.MAX_VALUE</strong> ? minLength : 0;</li></ol><h2 id="我的代码" tabindex="-1"><a class="header-anchor" href="#我的代码" aria-hidden="true">#</a> 我的代码</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minSubArrayLen</span><span class="token punctuation">(</span><span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> minLength <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span><span class="token comment">// 记录结果</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// x 是将移入窗口的数字</span>
        <span class="token keyword">int</span> x <span class="token operator">=</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// 增大窗口</span>
        right<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token comment">// 进行窗口内数据的一系列更新</span>
        sum <span class="token operator">+=</span> x<span class="token punctuation">;</span>
        <span class="token comment">// 判断左侧窗口是否要收缩</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>sum <span class="token operator">&gt;=</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// d 是将移出窗口的数字</span>
            <span class="token keyword">int</span> d <span class="token operator">=</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token comment">// 在这里更新答案</span>
            minLength <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>minLength<span class="token punctuation">,</span> right <span class="token operator">-</span> left<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 缩小窗口</span>
            left<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token comment">// 进行窗口内数据的一系列更新</span>
            sum <span class="token operator">-=</span> d<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> minLength <span class="token operator">&lt;</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">?</span> minLength <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>时间复杂度：O(n)</p><p>空间复杂度：O(1)</p><p>注意：不要以为 for 里放一个 while，时间复杂度就是 O(n^2) 了。主要看每一个元素被操作的次数，每个元素在滑动窗后进来操作一次，出去操作一次，每个元素都是被操作两次，所以时间复杂度是 2 × n 也就是 O(n)。</p><h2 id="另一种解法-前缀和-二分查找" tabindex="-1"><a class="header-anchor" href="#另一种解法-前缀和-二分查找" aria-hidden="true">#</a> 另一种解法：前缀和 + 二分查找</h2><h3 id="思路来源-1" tabindex="-1"><a class="header-anchor" href="#思路来源-1" aria-hidden="true">#</a> 思路来源（1）</h3><p>如果没有想到滑动窗口的做法，那我们最容易想到的暴力做法是怎样的呢？</p><p>暴力枚举思路：</p><ul><li>使用双层循环，外层循环 i 从数组头扫到数组尾，内层循环 j 从 i 扫到数组尾</li><li>记录从 i 到 j 的元素和，若和小于 target，则 j 持续右移，直到 j 退出循环或者和第一次大于 target</li><li>每当和第一次大于 target 的时候，记录一下此时 i 到 j 的长度，并更新 minLength</li><li>当 i 和 j 都到达数组尾的时候，返回 minLength，其中记录的就是目标值</li></ul><p>这种做法是最容易想到和最容易实现的，但是其时间复杂度为 O(n^2)，是一种性能不高的算法。</p><p>由于我们这里频繁涉及到 <strong>区间和</strong> 的计算， 而且在计算从 i 到 j 的元素和的时候，有很多重复运算，比如 1、2、3、4 ，以 1 为下标时计算了 1 + 2 + 3 + 4，以 2 为下标时计算了 2 + 3 + 4，像这种避免区间和重复计算的优化方法，我们想到了前缀和，可以在 O(1) 时间迅速得到任意区间的和问题。</p><h3 id="前缀和" tabindex="-1"><a class="header-anchor" href="#前缀和" aria-hidden="true">#</a> 前缀和</h3><h4 id="定义" tabindex="-1"><a class="header-anchor" href="#定义" aria-hidden="true">#</a> 定义</h4><p>对于一个给定的数列 A，它的 <strong>前缀和数列</strong> S 中 S[i] 表示从第 0 个元素到第 i 个元素的总和。用公式表示为：</p>`,33),_={class:"katex-display"},y={class:"katex"},x={class:"katex-mathml"},w=l('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.8116690000000006em;"></span><span class="strut bottom" style="height:3.2254460000000007em;vertical-align:-1.4137769999999998em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord mathit" style="margin-right:0.05764em;">S</span><span class="mopen">[</span><span class="mord mathit">i</span><span class="mclose">]</span><span class="mrel">=</span><span class="mop op-limits"><span class="vlist"><span style="top:1.1776689999999999em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.05724em;">j</span><span class="mrel">=</span><span class="mord mathrm">1</span></span></span></span><span style="top:-0.000005000000000254801em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span><span class="op-symbol large-op mop">∑</span></span></span><span style="top:-1.2500050000000005em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord mathit">A</span><span class="mopen">[</span><span class="mord mathit" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span>',1),S=p("h4",{id:"构建方法",tabindex:"-1"},[p("a",{class:"header-anchor",href:"#构建方法","aria-hidden":"true"},"#"),a(" 构建方法")],-1),A=p("p",null,[a("前缀和数列可以通过 "),p("strong",null,"递推"),a(" 的方式从原数列中直接求出：")],-1),j={class:"katex-display"},L={class:"katex"},O={class:"katex-mathml"},z=l('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord mathit" style="margin-right:0.05764em;">S</span><span class="mopen">[</span><span class="mord mathit">i</span><span class="mclose">]</span><span class="mrel">=</span><span class="mord mathit" style="margin-right:0.05764em;">S</span><span class="mopen">[</span><span class="mord mathit">i</span><span class="mbin">−</span><span class="mord mathrm">1</span><span class="mclose">]</span><span class="mbin">+</span><span class="mord mathit">A</span><span class="mopen">[</span><span class="mord mathit">i</span><span class="mclose">]</span></span></span>',1),V=l(`<h4 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景" aria-hidden="true">#</a> 使用场景</h4><p>前缀和的主要用处：<strong>求任意区间的元素和</strong>。</p><p>需求：有 m 个查询，需要返回从数组 A（数组长度假设为 n ）第 l 个元素到第 r 个元素的和。</p><p>【暴力做法】：遍历求和，一次查询的时间复杂度是 O(n)， 那么 m 个查询的时间复杂度则是 O(mn)。</p><p>【前缀和做法】：</p><ul><li>遍历一次数组 A，构建前缀和数组 S，时间复杂度为 O(n)</li><li>每次查询，由于区间 i 到 j 的数组 A 元素和为 S[j] - S[i-1]，所以查询的时间复杂度为 O(1)</li></ul><p>显然采用前缀和做法后，总的时间复杂度为 O(n)，比暴力做法要好一些。</p><h3 id="思路来源-2" tabindex="-1"><a class="header-anchor" href="#思路来源-2" aria-hidden="true">#</a> 思路来源（2）</h3><p>引入前缀和的概念之后，问题从 <strong>求 i 到 j 的元素和 &gt;= target</strong> 转化为了 <strong>求 S[j] - S[i-1] &gt;= target</strong>，但这种做法的时间复杂度呢？</p><p>构建前缀和数组的时间复杂度为 O(n)，外层循环 i 遍历原数组，时间复杂度为O(n)，内层循环遍历前缀和数组，时间复杂度为O(n)，那么整体的时间复杂度为O(n^2+n) = O(n^2)，似乎并没有什么改进？</p><p>问题出在我们内层循环寻找目标元素 j 的过程上，注意到 <strong>这道题保证了数组中每个元素都为正，所以前缀和数组一定是递增的、有序的</strong>。</p><p>那么这种在有序数组中进行线性查找的问题，我们未必要采用死板的从头遍历，而是可以引入二分查找，来快速找到第一个满足 S[j] - S[i-1] &gt;= target 的 j。</p><p>而且二分查找的时间复杂度为 O(log n)，那么整个算法的时间复杂度应该为 O(n + nlog n) = O(nlog n)。</p><p>注意这里的二分查找在基础的版本上，需要改造一下：</p><ul><li>当元素存在时返回其下标</li><li>当元素不存在时，返回其第一个理论插入点的下标+1后的相反数</li></ul><h3 id="代码实现" tabindex="-1"><a class="header-anchor" href="#代码实现" aria-hidden="true">#</a> 代码实现</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minSubArrayLen</span><span class="token punctuation">(</span><span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token doc-comment comment">/**
     * 构建前缀和数组
     * 为了方便计算，令 length = n + 1
     * S[0] = 0 意味着前 0 个元素的前缀和为 0
     * S[1] = A[0] 前 1 个元素的前缀和为 A[0]
     * 以此类推
     */</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prefixSum <span class="token operator">=</span> <span class="token function">getPrefixSumArray</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 记录最小值</span>
    <span class="token keyword">int</span> minLength <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> bound <span class="token operator">=</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span>prefixSum<span class="token punctuation">,</span> i<span class="token punctuation">,</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">,</span> target <span class="token operator">+</span> prefixSum<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>bound <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            bound <span class="token operator">=</span> <span class="token operator">-</span>bound <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>bound <span class="token operator">&lt;=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            minLength <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>minLength<span class="token punctuation">,</span> bound <span class="token operator">-</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> minLength <span class="token operator">==</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> minLength<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 构建前缀和数组</span>
<span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getPrefixSumArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prefixSum  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    prefixSum<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        prefixSum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> prefixSum<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> prefixSum<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 改造后的二分查找</span>
<span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prefixSum<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 避免数值溢出</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>prefixSum<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>prefixSum<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> mid<span class="token punctuation">;</span> <span class="token comment">//发现目标值</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token punctuation">(</span>left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 目标值不存在</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>改造后的二分查找为什么返回插入点的时候，不是直接返回 -left 而是返回 -(left + 1) 呢？</strong></p><p>当找到 <code>key</code> 值时，函数会返回 <code>mid</code>，即 <code>key</code> 在数组中的正确索引位置。</p><p>如果未找到 <code>key</code>，则 <code>while</code> 循环会退出，此时 <code>low</code> 会大于 <code>high</code>。在这种情况下，<strong><code>low</code> 指向的位置是 <code>key</code> 可以插入数组以保持排序顺序的位置</strong>。</p><p>但是，仅返回 <code>-low</code> 是不够的，因为在索引 0 处找到 <code>key</code> 的情况下会返回 <code>0</code>，但是 <code>0</code> 的负数还是 <code>0</code>，这样会导致歧义，也就是说：<strong>我们需要一种方法来区分“未找到”和“在索引 0 处找到”的情况</strong>。</p><p>为了解决这个问题，代码返回了 <code>-(low + 1)</code>。通过对 <code>low</code> 加 <code>1</code> 并取反，可以确保结果是负数且大于等于 <code>-1</code>。因此，如果未找到 <code>key</code>，函数将返回一个负值，表示应该将 <code>key</code> 插入的位置。</p><p>简而言之，返回 <code>-(low + 1)</code> 的选择是二分查找算法中的一种约定，用于处理“未找到”和“在索引 0 处找到”的情况，而不会产生歧义。它允许函数在“未找到”情况下返回负值，同时仍然能够表示“找到”的正确索引位置。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>有同学很容易就想到了 O(n) 的解法，不理解学习O(n logn)解法的意义。</p><p>然而生活不是刷题，生活中的“最优解”往往是多种方法比较后的“择优录取”，他甚至都不是理论上的最优解。</p><p>多掌握一种解法，就多一种可能。</p>`,27);function M(E,I){const e=o("mi"),t=o("mo"),i=o("mn"),c=o("mrow"),k=o("msubsup"),u=o("annotation"),r=o("semantics"),d=o("math");return v(),h("div",null,[g(" more "),f,p("p",null,[p("span",_,[p("span",y,[p("span",x,[n(d,null,{default:s(()=>[n(r,null,{default:s(()=>[n(c,null,{default:s(()=>[n(e,null,{default:s(()=>[a("S")]),_:1}),n(t,null,{default:s(()=>[a("[")]),_:1}),n(e,null,{default:s(()=>[a("i")]),_:1}),n(t,null,{default:s(()=>[a("]")]),_:1}),n(t,null,{default:s(()=>[a("=")]),_:1}),n(k,null,{default:s(()=>[n(t,null,{default:s(()=>[a("∑")]),_:1}),n(c,null,{default:s(()=>[n(e,null,{default:s(()=>[a("j")]),_:1}),n(t,null,{default:s(()=>[a("=")]),_:1}),n(i,null,{default:s(()=>[a("1")]),_:1})]),_:1}),n(e,null,{default:s(()=>[a("i")]),_:1})]),_:1}),n(e,null,{default:s(()=>[a("A")]),_:1}),n(t,null,{default:s(()=>[a("[")]),_:1}),n(e,null,{default:s(()=>[a("j")]),_:1}),n(t,null,{default:s(()=>[a("]")]),_:1})]),_:1}),n(u,{encoding:"application/x-tex"},{default:s(()=>[a("S[i] = \\sum_{j=1}^iA[j] ")]),_:1})]),_:1})]),_:1})]),w])])]),S,A,p("p",null,[p("span",j,[p("span",L,[p("span",O,[n(d,null,{default:s(()=>[n(r,null,{default:s(()=>[n(c,null,{default:s(()=>[n(e,null,{default:s(()=>[a("S")]),_:1}),n(t,null,{default:s(()=>[a("[")]),_:1}),n(e,null,{default:s(()=>[a("i")]),_:1}),n(t,null,{default:s(()=>[a("]")]),_:1}),n(t,null,{default:s(()=>[a("=")]),_:1}),n(e,null,{default:s(()=>[a("S")]),_:1}),n(t,null,{default:s(()=>[a("[")]),_:1}),n(e,null,{default:s(()=>[a("i")]),_:1}),n(t,null,{default:s(()=>[a("−")]),_:1}),n(i,null,{default:s(()=>[a("1")]),_:1}),n(t,null,{default:s(()=>[a("]")]),_:1}),n(t,null,{default:s(()=>[a("+")]),_:1}),n(e,null,{default:s(()=>[a("A")]),_:1}),n(t,null,{default:s(()=>[a("[")]),_:1}),n(e,null,{default:s(()=>[a("i")]),_:1}),n(t,null,{default:s(()=>[a("]")]),_:1})]),_:1}),n(u,{encoding:"application/x-tex"},{default:s(()=>[a("S[i] = S[i - 1] + A[i] ")]),_:1})]),_:1})]),_:1})]),z])])]),V])}const X=m(b,[["render",M],["__file","209.changduzuixiaodezishuzu.html.vue"]]);export{X as default};
